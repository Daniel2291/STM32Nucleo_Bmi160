
Bmi160_dev_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800ea88  0800ea88  0001ea88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef40  0800ef40  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef40  0800ef40  0001ef40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef48  0800ef48  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef48  0800ef48  0001ef48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef4c  0800ef4c  0001ef4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800ef50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f00  200002d4  0800f224  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021d4  0800f224  000221d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001652b  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a9e  00000000  00000000  00036872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  0003a310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d85  00000000  00000000  0003b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000254c7  00000000  00000000  0003c26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d77  00000000  00000000  00061734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d067d  00000000  00000000  000794ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e28  00000000  00000000  00149b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014f950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002d4 	.word	0x200002d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ea70 	.word	0x0800ea70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002d8 	.word	0x200002d8
 800020c:	0800ea70 	.word	0x0800ea70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <BMI160_Init>:
 * INITIALISATION
 *
 */
uint8_t BMI160_Init(BMI160 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	601a      	str	r2, [r3, #0]
	imu->csPinBank 	    = csPinBank;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	605a      	str	r2, [r3, #4]
	imu->csPin 		    = csPin;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	887a      	ldrh	r2, [r7, #2]
 800104e:	811a      	strh	r2, [r3, #8]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2200      	movs	r2, #0
 8001054:	729a      	strb	r2, [r3, #10]
	imu->readingGyr = 0;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	72da      	strb	r2, [r3, #11]

	uint8_t status = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Sensor requires rising edge on CSB after start-up to activate SPI, not sure this is needed for bmi160, maybe better use register setting */
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6858      	ldr	r0, [r3, #4]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	891b      	ldrh	r3, [r3, #8]
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	f001 fc5c 	bl	8002928 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001070:	2064      	movs	r0, #100	; 0x64
 8001072:	f000 fe83 	bl	8001d7c <HAL_Delay>
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6858      	ldr	r0, [r3, #4]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	891b      	ldrh	r3, [r3, #8]
 800107e:	2201      	movs	r2, #1
 8001080:	4619      	mov	r1, r3
 8001082:	f001 fc51 	bl	8002928 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001086:	2064      	movs	r0, #100	; 0x64
 8001088:	f000 fe78 	bl	8001d7c <HAL_Delay>


	/* Perform sensor soft reset */
	status += BMI160_WriteRegister(imu, BMI_CMD, 0xB6);
 800108c:	22b6      	movs	r2, #182	; 0xb6
 800108e:	217e      	movs	r1, #126	; 0x7e
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f000 f8eb 	bl	800126c <BMI160_WriteRegister>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	4413      	add	r3, r2
 800109e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80010a0:	2032      	movs	r0, #50	; 0x32
 80010a2:	f000 fe6b 	bl	8001d7c <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI160_ReadRegister(imu, BMI_CHIP_ID, &chipID);
 80010a6:	f107 0316 	add.w	r3, r7, #22
 80010aa:	461a      	mov	r2, r3
 80010ac:	2100      	movs	r1, #0
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 f8a0 	bl	80011f4 <BMI160_ReadRegister>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	4413      	add	r3, r2
 80010bc:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0xD1) {

		//return 0;

	}
	HAL_Delay(10);
 80010be:	200a      	movs	r0, #10
 80010c0:	f000 fe5c 	bl	8001d7c <HAL_Delay>


	/* Configure accelerometer  */
	status += BMI160_WriteRegister(imu, BMI_ACC_CONF, 0b00101000); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 80010c4:	2228      	movs	r2, #40	; 0x28
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 f8cf 	bl	800126c <BMI160_WriteRegister>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	4413      	add	r3, r2
 80010d6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010d8:	200a      	movs	r0, #10
 80010da:	f000 fe4f 	bl	8001d7c <HAL_Delay>

	status += BMI160_WriteRegister(imu, BMI_ACC_RANGE, 0b00000101); /* +- 4g range */
 80010de:	2205      	movs	r2, #5
 80010e0:	2141      	movs	r1, #65	; 0x41
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 f8c2 	bl	800126c <BMI160_WriteRegister>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	4413      	add	r3, r2
 80010f0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010f2:	200a      	movs	r0, #10
 80010f4:	f000 fe42 	bl	8001d7c <HAL_Delay>


	status += BMI160_WriteRegister(imu, BMI_INT_STATUS, 0x10); // Flag DRDY data ready interrupt to be active
 80010f8:	2210      	movs	r2, #16
 80010fa:	211d      	movs	r1, #29
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 f8b5 	bl	800126c <BMI160_WriteRegister>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	4413      	add	r3, r2
 800110a:	75fb      	strb	r3, [r7, #23]
    HAL_Delay(10);
 800110c:	200a      	movs	r0, #10
 800110e:	f000 fe35 	bl	8001d7c <HAL_Delay>


	status += BMI160_WriteRegister(imu, BMI_INT_EN, 0b00010000); // enable data ready interrupt
 8001112:	2210      	movs	r2, #16
 8001114:	2151      	movs	r1, #81	; 0x51
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 f8a8 	bl	800126c <BMI160_WriteRegister>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	4413      	add	r3, r2
 8001124:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001126:	200a      	movs	r0, #10
 8001128:	f000 fe28 	bl	8001d7c <HAL_Delay>


	status += BMI160_WriteRegister(imu, BMI_INT_OUT_CTRL, 0b10101010); /* INT2 disable, 0000,   INT1 = push-pull output, active low */
 800112c:	22aa      	movs	r2, #170	; 0xaa
 800112e:	2153      	movs	r1, #83	; 0x53
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f000 f89b 	bl	800126c <BMI160_WriteRegister>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	7dfb      	ldrb	r3, [r7, #23]
 800113c:	4413      	add	r3, r2
 800113e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001140:	200a      	movs	r0, #10
 8001142:	f000 fe1b 	bl	8001d7c <HAL_Delay>

	status += BMI160_WriteRegister(imu, BMI_INT1_INT2_MAP_DATA, 0b10001000);
 8001146:	2288      	movs	r2, #136	; 0x88
 8001148:	2156      	movs	r1, #86	; 0x56
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 f88e 	bl	800126c <BMI160_WriteRegister>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	4413      	add	r3, r2
 8001158:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800115a:	200a      	movs	r0, #10
 800115c:	f000 fe0e 	bl	8001d7c <HAL_Delay>


	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion =   (4.00f * 9.81f)/ 327268.0f; /* Datasheet page  */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4a22      	ldr	r2, [pc, #136]	; (80011ec <BMI160_Init+0x1bc>)
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2292      	movs	r2, #146	; 0x92
 800116a:	731a      	strb	r2, [r3, #12]
	 */



	/* Configure gyroscope */
	status += BMI160_WriteRegister(imu, BMI_GYR_RANGE, 0b00000010); /* +- 500 deg/s */
 800116c:	2202      	movs	r2, #2
 800116e:	2143      	movs	r1, #67	; 0x43
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f000 f87b 	bl	800126c <BMI160_WriteRegister>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	4413      	add	r3, r2
 800117e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001180:	200a      	movs	r0, #10
 8001182:	f000 fdfb 	bl	8001d7c <HAL_Delay>

	status += BMI160_WriteRegister(imu, BMI_GYR_BANDWIDTH, 0b00101000); /* ODR = 800 Hz, Filter bandwidth = 254 Hz */
 8001186:	2228      	movs	r2, #40	; 0x28
 8001188:	2142      	movs	r1, #66	; 0x42
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 f86e 	bl	800126c <BMI160_WriteRegister>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	4413      	add	r3, r2
 8001198:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800119a:	200a      	movs	r0, #10
 800119c:	f000 fdee 	bl	8001d7c <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = (0.01745329251f * 500.0f) / 32768.0f; /*  */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <BMI160_Init+0x1c0>)
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	228c      	movs	r2, #140	; 0x8c
 80011aa:	751a      	strb	r2, [r3, #20]
/* Put sensor into active mode */
	//status += BMI160_WriteRegister(imu, BMI_PMU_CONF, 0b10010100);
	//HAL_Delay(10);


	status += BMI160_WriteRegister(imu, BMI_CMD, 0b00010001); //accelerometer in normal
 80011ac:	2211      	movs	r2, #17
 80011ae:	217e      	movs	r1, #126	; 0x7e
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f000 f85b 	bl	800126c <BMI160_WriteRegister>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	4413      	add	r3, r2
 80011be:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80011c0:	2032      	movs	r0, #50	; 0x32
 80011c2:	f000 fddb 	bl	8001d7c <HAL_Delay>

	status += BMI160_WriteRegister(imu, BMI_CMD, 0b00010101); //gyro in normal
 80011c6:	2215      	movs	r2, #21
 80011c8:	217e      	movs	r1, #126	; 0x7e
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f000 f84e 	bl	800126c <BMI160_WriteRegister>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	4413      	add	r3, r2
 80011d8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80011da:	2032      	movs	r0, #50	; 0x32
 80011dc:	f000 fdce 	bl	8001d7c <HAL_Delay>

	return status;
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	38fb73c1 	.word	0x38fb73c1
 80011f0:	398ba058 	.word	0x398ba058

080011f4 <BMI160_ReadRegister>:
 *
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

uint8_t BMI160_ReadRegister(BMI160 *imu, uint8_t regAddr, uint8_t *data) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	460b      	mov	r3, r1
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80 };
 8001202:	2300      	movs	r3, #0
 8001204:	82bb      	strh	r3, [r7, #20]
 8001206:	7afb      	ldrb	r3, [r7, #11]
 8001208:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800120c:	b2db      	uxtb	r3, r3
 800120e:	753b      	strb	r3, [r7, #20]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6858      	ldr	r0, [r3, #4]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	891b      	ldrh	r3, [r3, #8]
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	f001 fb84 	bl	8002928 <HAL_GPIO_WritePin>

	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	f107 0210 	add.w	r2, r7, #16
 8001228:	f107 0114 	add.w	r1, r7, #20
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2302      	movs	r3, #2
 8001234:	f004 f924 	bl	8005480 <HAL_SPI_TransmitReceive>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	bf0c      	ite	eq
 800123e:	2301      	moveq	r3, #1
 8001240:	2300      	movne	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6858      	ldr	r0, [r3, #4]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	891b      	ldrh	r3, [r3, #8]
 800124e:	2201      	movs	r2, #1
 8001250:	4619      	mov	r1, r3
 8001252:	f001 fb69 	bl	8002928 <HAL_GPIO_WritePin>

	if (status == 1) {
 8001256:	7dfb      	ldrb	r3, [r7, #23]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d102      	bne.n	8001262 <BMI160_ReadRegister+0x6e>

		*data = rxBuf[1];
 800125c:	7c7a      	ldrb	r2, [r7, #17]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8001262:	7dfb      	ldrb	r3, [r7, #23]

}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <BMI160_WriteRegister>:

uint8_t BMI160_WriteRegister(BMI160 *imu, uint8_t regAddr, uint8_t data) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
 8001278:	4613      	mov	r3, r2
 800127a:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	733b      	strb	r3, [r7, #12]
 8001280:	78bb      	ldrb	r3, [r7, #2]
 8001282:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6858      	ldr	r0, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	891b      	ldrh	r3, [r3, #8]
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	f001 fb4a 	bl	8002928 <HAL_GPIO_WritePin>

	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	f107 010c 	add.w	r1, r7, #12
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	2202      	movs	r2, #2
 80012a2:	f003 ffaa 	bl	80051fa <HAL_SPI_Transmit>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	73fb      	strb	r3, [r7, #15]
	//while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6858      	ldr	r0, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	891b      	ldrh	r3, [r3, #8]
 80012bc:	2201      	movs	r2, #1
 80012be:	4619      	mov	r1, r3
 80012c0:	f001 fb32 	bl	8002928 <HAL_GPIO_WritePin>

	return status;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]

}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <BMI160_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI160_ReadAccelerometer(BMI160 *imu) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr,, 6 bytes data */
 80012d8:	4a36      	ldr	r2, [pc, #216]	; (80013b4 <BMI160_ReadAccelerometer+0xe4>)
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012e2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6858      	ldr	r0, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	891b      	ldrh	r3, [r3, #8]
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	f001 fb19 	bl	8002928 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	f107 0208 	add.w	r2, r7, #8
 80012fe:	f107 0110 	add.w	r1, r7, #16
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2308      	movs	r3, #8
 800130a:	f004 f8b9 	bl	8005480 <HAL_SPI_TransmitReceive>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6858      	ldr	r0, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	891b      	ldrh	r3, [r3, #8]
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	f001 fafe 	bl	8002928 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 800132c:	7abb      	ldrb	r3, [r7, #10]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21a      	sxth	r2, r3
 8001332:	7a7b      	ldrb	r3, [r7, #9]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 800133a:	7b3b      	ldrb	r3, [r7, #12]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	7afb      	ldrb	r3, [r7, #11]
 8001342:	b21b      	sxth	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8001348:	7bbb      	ldrb	r3, [r7, #14]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b21a      	sxth	r2, r3
 800134e:	7b7b      	ldrb	r3, [r7, #13]
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800135c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	imu->acc_mps2[1] = imu->accConversion * accY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001378:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[2] = imu->accConversion * accZ;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001394:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001398:	ee07 3a90 	vmov	s15, r3
 800139c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

	return status;
 80013aa:	7ffb      	ldrb	r3, [r7, #31]

}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	0800ea88 	.word	0x0800ea88

080013b8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == INT_IMU_Pin) {
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d102      	bne.n	80013ce <HAL_GPIO_EXTI_Callback+0x16>
		//HAL_DMA_IRQHandler(&hdma_spi1_tx);// Maybe a solution for DMA working but not for now
		BMI160_ReadAccelerometer(&imu);
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x20>)
 80013ca:	f7ff ff81 	bl	80012d0 <BMI160_ReadAccelerometer>
	}

}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000450 	.word	0x20000450

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013e0:	b094      	sub	sp, #80	; 0x50
 80013e2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f000 fc58 	bl	8001c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e8:	f000 f846 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ec:	f000 f938 	bl	8001660 <MX_GPIO_Init>
  MX_DMA_Init();
 80013f0:	f000 f90e 	bl	8001610 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013f4:	f000 f8e2 	bl	80015bc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80013f8:	f008 f9d2 	bl	80097a0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80013fc:	f000 f8a8 	bl	8001550 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* Initilize the IMU */


  BMI160_Init(&imu, &hspi1, GPIOB, SPI1_CS_Pin);
 8001400:	2340      	movs	r3, #64	; 0x40
 8001402:	4a19      	ldr	r2, [pc, #100]	; (8001468 <main+0x8c>)
 8001404:	4919      	ldr	r1, [pc, #100]	; (800146c <main+0x90>)
 8001406:	481a      	ldr	r0, [pc, #104]	; (8001470 <main+0x94>)
 8001408:	f7ff fe12 	bl	8001030 <BMI160_Init>
	//BMI160_ReadRegister(&imu,0x02, &dataa);

	//uint8_t ch=0;
	//ch = BMI160_ReadAccelerometer(&imu);

    sprintf(logBuf, "%.2f\t%.2f\t%.2f\r\n", imu.acc_mps2[0],imu.acc_mps2[1],imu.acc_mps2[2]);
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <main+0x94>)
 800140e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8b9 	bl	8000588 <__aeabi_f2d>
 8001416:	4680      	mov	r8, r0
 8001418:	4689      	mov	r9, r1
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <main+0x94>)
 800141c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f8b2 	bl	8000588 <__aeabi_f2d>
 8001424:	4604      	mov	r4, r0
 8001426:	460d      	mov	r5, r1
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <main+0x94>)
 800142a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f8ab 	bl	8000588 <__aeabi_f2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4638      	mov	r0, r7
 8001438:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800143c:	e9cd 4500 	strd	r4, r5, [sp]
 8001440:	4642      	mov	r2, r8
 8001442:	464b      	mov	r3, r9
 8001444:	490b      	ldr	r1, [pc, #44]	; (8001474 <main+0x98>)
 8001446:	f009 fe73 	bl	800b130 <siprintf>

    CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 800144a:	463b      	mov	r3, r7
 800144c:	4618      	mov	r0, r3
 800144e:	f7fe ff2f 	bl	80002b0 <strlen>
 8001452:	4603      	mov	r3, r0
 8001454:	b29a      	uxth	r2, r3
 8001456:	463b      	mov	r3, r7
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f008 fa5e 	bl	800991c <CDC_Transmit_FS>




	  HAL_Delay(250);
 8001460:	20fa      	movs	r0, #250	; 0xfa
 8001462:	f000 fc8b 	bl	8001d7c <HAL_Delay>
  {
 8001466:	e7d1      	b.n	800140c <main+0x30>
 8001468:	40020400 	.word	0x40020400
 800146c:	200002f0 	.word	0x200002f0
 8001470:	20000450 	.word	0x20000450
 8001474:	0800ea98 	.word	0x0800ea98

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	; 0x50
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2234      	movs	r2, #52	; 0x34
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f009 feb5 	bl	800b1f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	4b29      	ldr	r3, [pc, #164]	; (8001548 <SystemClock_Config+0xd0>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a28      	ldr	r2, [pc, #160]	; (8001548 <SystemClock_Config+0xd0>)
 80014a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
 80014ac:	4b26      	ldr	r3, [pc, #152]	; (8001548 <SystemClock_Config+0xd0>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <SystemClock_Config+0xd4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c4:	4a21      	ldr	r2, [pc, #132]	; (800154c <SystemClock_Config+0xd4>)
 80014c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b1f      	ldr	r3, [pc, #124]	; (800154c <SystemClock_Config+0xd4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d8:	2301      	movs	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e2:	2302      	movs	r3, #2
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014ec:	2304      	movs	r3, #4
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014f0:	2348      	movs	r3, #72	; 0x48
 80014f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014f8:	2303      	movs	r3, #3
 80014fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fb51 	bl	8004bac <HAL_RCC_OscConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001510:	f000 f932 	bl	8001778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001514:	230f      	movs	r3, #15
 8001516:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001518:	2302      	movs	r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001524:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	2102      	movs	r1, #2
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fcc7 	bl	8003ec4 <HAL_RCC_ClockConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800153c:	f000 f91c 	bl	8001778 <Error_Handler>
  }
}
 8001540:	bf00      	nop
 8001542:	3750      	adds	r7, #80	; 0x50
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40023800 	.word	0x40023800
 800154c:	40007000 	.word	0x40007000

08001550 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001556:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <MX_SPI1_Init+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_SPI1_Init+0x64>)
 800155c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_SPI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_SPI1_Init+0x64>)
 800157c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001580:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001584:	2228      	movs	r2, #40	; 0x28
 8001586:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <MX_SPI1_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_SPI1_Init+0x64>)
 800159c:	220a      	movs	r2, #10
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_SPI1_Init+0x64>)
 80015a2:	f003 fda1 	bl	80050e8 <HAL_SPI_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015ac:	f000 f8e4 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200002f0 	.word	0x200002f0
 80015b8:	40013000 	.word	0x40013000

080015bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <MX_USART2_UART_Init+0x50>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015f4:	f004 fae2 	bl	8005bbc <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015fe:	f000 f8bb 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000408 	.word	0x20000408
 800160c:	40004400 	.word	0x40004400

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <MX_DMA_Init+0x4c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a0f      	ldr	r2, [pc, #60]	; (800165c <MX_DMA_Init+0x4c>)
 8001620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <MX_DMA_Init+0x4c>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2101      	movs	r1, #1
 8001636:	2038      	movs	r0, #56	; 0x38
 8001638:	f000 fc9f 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800163c:	2038      	movs	r0, #56	; 0x38
 800163e:	f000 fcb8 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	203b      	movs	r0, #59	; 0x3b
 8001648:	f000 fc97 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800164c:	203b      	movs	r0, #59	; 0x3b
 800164e:	f000 fcb0 	bl	8001fb2 <HAL_NVIC_EnableIRQ>

}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b3c      	ldr	r3, [pc, #240]	; (800176c <MX_GPIO_Init+0x10c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a3b      	ldr	r2, [pc, #236]	; (800176c <MX_GPIO_Init+0x10c>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b39      	ldr	r3, [pc, #228]	; (800176c <MX_GPIO_Init+0x10c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <MX_GPIO_Init+0x10c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a34      	ldr	r2, [pc, #208]	; (800176c <MX_GPIO_Init+0x10c>)
 800169c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b32      	ldr	r3, [pc, #200]	; (800176c <MX_GPIO_Init+0x10c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <MX_GPIO_Init+0x10c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a2d      	ldr	r2, [pc, #180]	; (800176c <MX_GPIO_Init+0x10c>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <MX_GPIO_Init+0x10c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b27      	ldr	r3, [pc, #156]	; (800176c <MX_GPIO_Init+0x10c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a26      	ldr	r2, [pc, #152]	; (800176c <MX_GPIO_Init+0x10c>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <MX_GPIO_Init+0x10c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2140      	movs	r1, #64	; 0x40
 80016ea:	4821      	ldr	r0, [pc, #132]	; (8001770 <MX_GPIO_Init+0x110>)
 80016ec:	f001 f91c 	bl	8002928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	481b      	ldr	r0, [pc, #108]	; (8001774 <MX_GPIO_Init+0x114>)
 8001708:	f000 ff7a 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_IMU_Pin */
  GPIO_InitStruct.Pin = INT_IMU_Pin;
 800170c:	2308      	movs	r3, #8
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001710:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4814      	ldr	r0, [pc, #80]	; (8001774 <MX_GPIO_Init+0x114>)
 8001722:	f000 ff6d 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001726:	2340      	movs	r3, #64	; 0x40
 8001728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <MX_GPIO_Init+0x110>)
 800173e:	f000 ff5f 	bl	8002600 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2009      	movs	r0, #9
 8001748:	f000 fc17 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800174c:	2009      	movs	r0, #9
 800174e:	f000 fc30 	bl	8001fb2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2028      	movs	r0, #40	; 0x28
 8001758:	f000 fc0f 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800175c:	2028      	movs	r0, #40	; 0x28
 800175e:	f000 fc28 	bl	8001fb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40020400 	.word	0x40020400
 8001774:	40020800 	.word	0x40020800

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	e7fe      	b.n	8001780 <Error_Handler+0x8>
	...

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_MspInit+0x4c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_MspInit+0x4c>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_MspInit+0x4c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_MspInit+0x4c>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017c2:	2007      	movs	r0, #7
 80017c4:	f000 fbce 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800

080017d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <HAL_SPI_MspInit+0x150>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	f040 8091 	bne.w	800191a <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	4b4a      	ldr	r3, [pc, #296]	; (8001928 <HAL_SPI_MspInit+0x154>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	4a49      	ldr	r2, [pc, #292]	; (8001928 <HAL_SPI_MspInit+0x154>)
 8001802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001806:	6453      	str	r3, [r2, #68]	; 0x44
 8001808:	4b47      	ldr	r3, [pc, #284]	; (8001928 <HAL_SPI_MspInit+0x154>)
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	4b43      	ldr	r3, [pc, #268]	; (8001928 <HAL_SPI_MspInit+0x154>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	4a42      	ldr	r2, [pc, #264]	; (8001928 <HAL_SPI_MspInit+0x154>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6313      	str	r3, [r2, #48]	; 0x30
 8001824:	4b40      	ldr	r3, [pc, #256]	; (8001928 <HAL_SPI_MspInit+0x154>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001830:	23e0      	movs	r3, #224	; 0xe0
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001840:	2305      	movs	r3, #5
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4838      	ldr	r0, [pc, #224]	; (800192c <HAL_SPI_MspInit+0x158>)
 800184c:	f000 fed8 	bl	8002600 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001850:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 8001852:	4a38      	ldr	r2, [pc, #224]	; (8001934 <HAL_SPI_MspInit+0x160>)
 8001854:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001856:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 8001858:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800185c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800186a:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 800186c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001870:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001872:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800187e:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001884:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800188a:	4b29      	ldr	r3, [pc, #164]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001890:	4827      	ldr	r0, [pc, #156]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 8001892:	f000 fba9 	bl	8001fe8 <HAL_DMA_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800189c:	f7ff ff6c 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a23      	ldr	r2, [pc, #140]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 80018a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80018a6:	4a22      	ldr	r2, [pc, #136]	; (8001930 <HAL_SPI_MspInit+0x15c>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_SPI_MspInit+0x164>)
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_SPI_MspInit+0x168>)
 80018b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_SPI_MspInit+0x164>)
 80018b4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80018b8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_SPI_MspInit+0x164>)
 80018bc:	2240      	movs	r2, #64	; 0x40
 80018be:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <HAL_SPI_MspInit+0x164>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_SPI_MspInit+0x164>)
 80018c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018cc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_SPI_MspInit+0x164>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_SPI_MspInit+0x164>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_SPI_MspInit+0x164>)
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_SPI_MspInit+0x164>)
 80018e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018e6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_SPI_MspInit+0x164>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80018ee:	4812      	ldr	r0, [pc, #72]	; (8001938 <HAL_SPI_MspInit+0x164>)
 80018f0:	f000 fb7a 	bl	8001fe8 <HAL_DMA_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 80018fa:	f7ff ff3d 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_SPI_MspInit+0x164>)
 8001902:	649a      	str	r2, [r3, #72]	; 0x48
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <HAL_SPI_MspInit+0x164>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2023      	movs	r0, #35	; 0x23
 8001910:	f000 fb33 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001914:	2023      	movs	r0, #35	; 0x23
 8001916:	f000 fb4c 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	; 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40013000 	.word	0x40013000
 8001928:	40023800 	.word	0x40023800
 800192c:	40020000 	.word	0x40020000
 8001930:	20000348 	.word	0x20000348
 8001934:	40026410 	.word	0x40026410
 8001938:	200003a8 	.word	0x200003a8
 800193c:	40026458 	.word	0x40026458

08001940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a19      	ldr	r2, [pc, #100]	; (80019c4 <HAL_UART_MspInit+0x84>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d12b      	bne.n	80019ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_UART_MspInit+0x88>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <HAL_UART_MspInit+0x88>)
 800196c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_UART_MspInit+0x88>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_UART_MspInit+0x88>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_UART_MspInit+0x88>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_UART_MspInit+0x88>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800199a:	230c      	movs	r3, #12
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019aa:	2307      	movs	r3, #7
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <HAL_UART_MspInit+0x8c>)
 80019b6:	f000 fe23 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ba:	bf00      	nop
 80019bc:	3728      	adds	r7, #40	; 0x28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40004400 	.word	0x40004400
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020000 	.word	0x40020000

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d4:	e7fe      	b.n	80019d4 <NMI_Handler+0x4>

080019d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <MemManage_Handler+0x4>

080019e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler+0x4>

080019ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1c:	f000 f98e 	bl	8001d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_IMU_Pin);
 8001a28:	2008      	movs	r0, #8
 8001a2a:	f000 ff97 	bl	800295c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <SPI1_IRQHandler+0x10>)
 8001a3a:	f003 fed1 	bl	80057e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200002f0 	.word	0x200002f0

08001a48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a50:	f000 ff84 	bl	800295c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <DMA2_Stream0_IRQHandler+0x10>)
 8001a5e:	f000 fb93 	bl	8002188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000348 	.word	0x20000348

08001a6c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <DMA2_Stream3_IRQHandler+0x10>)
 8001a72:	f000 fb89 	bl	8002188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200003a8 	.word	0x200003a8

08001a80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <OTG_FS_IRQHandler+0x10>)
 8001a86:	f001 f8cc 	bl	8002c22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20001984 	.word	0x20001984

08001a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return 1;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_kill>:

int _kill(int pid, int sig)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aae:	f009 fbf5 	bl	800b29c <__errno>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2216      	movs	r2, #22
 8001ab6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_exit>:

void _exit (int status)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ffe7 	bl	8001aa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ad6:	e7fe      	b.n	8001ad6 <_exit+0x12>

08001ad8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e00a      	b.n	8001b00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aea:	f3af 8000 	nop.w
 8001aee:	4601      	mov	r1, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	60ba      	str	r2, [r7, #8]
 8001af6:	b2ca      	uxtb	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf0      	blt.n	8001aea <_read+0x12>
  }

  return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e009      	b.n	8001b38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf1      	blt.n	8001b24 <_write+0x12>
  }
  return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_close>:

int _close(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b72:	605a      	str	r2, [r3, #4]
  return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_isatty>:

int _isatty(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f009 fb5a 	bl	800b29c <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20020000 	.word	0x20020000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	2000049c 	.word	0x2000049c
 8001c1c:	200021d8 	.word	0x200021d8

08001c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <SystemInit+0x20>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <SystemInit+0x20>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c48:	f7ff ffea 	bl	8001c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c4c:	480c      	ldr	r0, [pc, #48]	; (8001c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c4e:	490d      	ldr	r1, [pc, #52]	; (8001c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c64:	4c0a      	ldr	r4, [pc, #40]	; (8001c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c72:	f009 fb19 	bl	800b2a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c76:	f7ff fbb1 	bl	80013dc <main>
  bx  lr    
 8001c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c84:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8001c88:	0800ef50 	.word	0x0800ef50
  ldr r2, =_sbss
 8001c8c:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8001c90:	200021d4 	.word	0x200021d4

08001c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC_IRQHandler>
	...

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <HAL_Init+0x40>)
 8001ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_Init+0x40>)
 8001cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <HAL_Init+0x40>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f000 f94f 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f000 f808 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ccc:	f7ff fd5a 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023c00 	.word	0x40023c00

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_InitTick+0x54>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_InitTick+0x58>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f967 	bl	8001fce <HAL_SYSTICK_Config>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00e      	b.n	8001d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	d80a      	bhi.n	8001d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d10:	2200      	movs	r2, #0
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f000 f92f 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <HAL_InitTick+0x5c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	200004a0 	.word	0x200004a0

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	200004a0 	.word	0x200004a0

08001d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d84:	f7ff ffee 	bl	8001d64 <HAL_GetTick>
 8001d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d005      	beq.n	8001da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_Delay+0x44>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da2:	bf00      	nop
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d8f7      	bhi.n	8001da4 <HAL_Delay+0x28>
  {
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <__NVIC_GetPriorityGrouping+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0307 	and.w	r3, r3, #7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db0b      	blt.n	8001e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4907      	ldr	r1, [pc, #28]	; (8001e60 <__NVIC_EnableIRQ+0x38>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	; (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff8e 	bl	8001e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff29 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff3e 	bl	8001e0c <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff8e 	bl	8001eb8 <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff31 	bl	8001e28 <__NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffa2 	bl	8001f20 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff feb6 	bl	8001d64 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e099      	b.n	8002138 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002024:	e00f      	b.n	8002046 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002026:	f7ff fe9d 	bl	8001d64 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b05      	cmp	r3, #5
 8002032:	d908      	bls.n	8002046 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2203      	movs	r2, #3
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e078      	b.n	8002138 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1e8      	bne.n	8002026 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4b38      	ldr	r3, [pc, #224]	; (8002140 <HAL_DMA_Init+0x158>)
 8002060:	4013      	ands	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002072:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2b04      	cmp	r3, #4
 800209e:	d107      	bne.n	80020b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	4313      	orrs	r3, r2
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f023 0307 	bic.w	r3, r3, #7
 80020c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d117      	bne.n	800210a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00e      	beq.n	800210a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fa0b 	bl	8002508 <DMA_CheckFifoParam>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002106:	2301      	movs	r3, #1
 8002108:	e016      	b.n	8002138 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f9c2 	bl	800249c <DMA_CalcBaseAndBitshift>
 8002118:	4603      	mov	r3, r0
 800211a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	223f      	movs	r2, #63	; 0x3f
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	f010803f 	.word	0xf010803f

08002144 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d004      	beq.n	8002162 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e00c      	b.n	800217c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2205      	movs	r2, #5
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002194:	4b8e      	ldr	r3, [pc, #568]	; (80023d0 <HAL_DMA_IRQHandler+0x248>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a8e      	ldr	r2, [pc, #568]	; (80023d4 <HAL_DMA_IRQHandler+0x24c>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0a9b      	lsrs	r3, r3, #10
 80021a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	2208      	movs	r2, #8
 80021b4:	409a      	lsls	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01a      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0204 	bic.w	r2, r2, #4
 80021da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	2208      	movs	r2, #8
 80021e2:	409a      	lsls	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	2201      	movs	r2, #1
 80021fa:	409a      	lsls	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d012      	beq.n	800222a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	2201      	movs	r2, #1
 8002218:	409a      	lsls	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f043 0202 	orr.w	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	2204      	movs	r2, #4
 8002230:	409a      	lsls	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d012      	beq.n	8002260 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00b      	beq.n	8002260 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	2204      	movs	r2, #4
 800224e:	409a      	lsls	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f043 0204 	orr.w	r2, r3, #4
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	2210      	movs	r2, #16
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d043      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d03c      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2210      	movs	r2, #16
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d018      	beq.n	80022ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d108      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d024      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
 80022b6:	e01f      	b.n	80022f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01b      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4798      	blx	r3
 80022c8:	e016      	b.n	80022f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0208 	bic.w	r2, r2, #8
 80022e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	2220      	movs	r2, #32
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 808f 	beq.w	8002428 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8087 	beq.w	8002428 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	2220      	movs	r2, #32
 8002320:	409a      	lsls	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b05      	cmp	r3, #5
 8002330:	d136      	bne.n	80023a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0216 	bic.w	r2, r2, #22
 8002340:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002350:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <HAL_DMA_IRQHandler+0x1da>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0208 	bic.w	r2, r2, #8
 8002370:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	223f      	movs	r2, #63	; 0x3f
 8002378:	409a      	lsls	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002392:	2b00      	cmp	r3, #0
 8002394:	d07e      	beq.n	8002494 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
        }
        return;
 800239e:	e079      	b.n	8002494 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01d      	beq.n	80023ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10d      	bne.n	80023d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d031      	beq.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
 80023cc:	e02c      	b.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
 80023ce:	bf00      	nop
 80023d0:	20000000 	.word	0x20000000
 80023d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d023      	beq.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
 80023e8:	e01e      	b.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10f      	bne.n	8002418 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0210 	bic.w	r2, r2, #16
 8002406:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	2b00      	cmp	r3, #0
 800242e:	d032      	beq.n	8002496 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d022      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2205      	movs	r2, #5
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3301      	adds	r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	429a      	cmp	r2, r3
 800245e:	d307      	bcc.n	8002470 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f2      	bne.n	8002454 <HAL_DMA_IRQHandler+0x2cc>
 800246e:	e000      	b.n	8002472 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002470:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4798      	blx	r3
 8002492:	e000      	b.n	8002496 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002494:	bf00      	nop
    }
  }
}
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3b10      	subs	r3, #16
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <DMA_CalcBaseAndBitshift+0x64>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <DMA_CalcBaseAndBitshift+0x68>)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d909      	bls.n	80024de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	1d1a      	adds	r2, r3, #4
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	659a      	str	r2, [r3, #88]	; 0x58
 80024dc:	e007      	b.n	80024ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	aaaaaaab 	.word	0xaaaaaaab
 8002504:	0800eb0c 	.word	0x0800eb0c

08002508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d11f      	bne.n	8002562 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d856      	bhi.n	80025d6 <DMA_CheckFifoParam+0xce>
 8002528:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <DMA_CheckFifoParam+0x28>)
 800252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252e:	bf00      	nop
 8002530:	08002541 	.word	0x08002541
 8002534:	08002553 	.word	0x08002553
 8002538:	08002541 	.word	0x08002541
 800253c:	080025d7 	.word	0x080025d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d046      	beq.n	80025da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002550:	e043      	b.n	80025da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800255a:	d140      	bne.n	80025de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002560:	e03d      	b.n	80025de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256a:	d121      	bne.n	80025b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d837      	bhi.n	80025e2 <DMA_CheckFifoParam+0xda>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <DMA_CheckFifoParam+0x70>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	08002589 	.word	0x08002589
 800257c:	0800258f 	.word	0x0800258f
 8002580:	08002589 	.word	0x08002589
 8002584:	080025a1 	.word	0x080025a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      break;
 800258c:	e030      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d025      	beq.n	80025e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259e:	e022      	b.n	80025e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025a8:	d11f      	bne.n	80025ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ae:	e01c      	b.n	80025ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d903      	bls.n	80025be <DMA_CheckFifoParam+0xb6>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d003      	beq.n	80025c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025bc:	e018      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
      break;
 80025c2:	e015      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00e      	beq.n	80025ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      break;
 80025d4:	e00b      	b.n	80025ee <DMA_CheckFifoParam+0xe6>
      break;
 80025d6:	bf00      	nop
 80025d8:	e00a      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025da:	bf00      	nop
 80025dc:	e008      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
 80025e0:	e006      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e004      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e002      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ea:	bf00      	nop
 80025ec:	e000      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
    }
  } 
  
  return status; 
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e165      	b.n	80028e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	f040 8154 	bne.w	80028e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d005      	beq.n	8002652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264e:	2b02      	cmp	r3, #2
 8002650:	d130      	bne.n	80026b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0201 	and.w	r2, r3, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d017      	beq.n	80026f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d123      	bne.n	8002744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3208      	adds	r2, #8
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80ae 	beq.w	80028e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b5d      	ldr	r3, [pc, #372]	; (8002900 <HAL_GPIO_Init+0x300>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a5c      	ldr	r2, [pc, #368]	; (8002900 <HAL_GPIO_Init+0x300>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b5a      	ldr	r3, [pc, #360]	; (8002900 <HAL_GPIO_Init+0x300>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a2:	4a58      	ldr	r2, [pc, #352]	; (8002904 <HAL_GPIO_Init+0x304>)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4f      	ldr	r2, [pc, #316]	; (8002908 <HAL_GPIO_Init+0x308>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d025      	beq.n	800281a <HAL_GPIO_Init+0x21a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4e      	ldr	r2, [pc, #312]	; (800290c <HAL_GPIO_Init+0x30c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01f      	beq.n	8002816 <HAL_GPIO_Init+0x216>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4d      	ldr	r2, [pc, #308]	; (8002910 <HAL_GPIO_Init+0x310>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x212>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4c      	ldr	r2, [pc, #304]	; (8002914 <HAL_GPIO_Init+0x314>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x20e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4b      	ldr	r2, [pc, #300]	; (8002918 <HAL_GPIO_Init+0x318>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x20a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4a      	ldr	r2, [pc, #296]	; (800291c <HAL_GPIO_Init+0x31c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x206>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a49      	ldr	r2, [pc, #292]	; (8002920 <HAL_GPIO_Init+0x320>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x202>
 80027fe:	2306      	movs	r3, #6
 8002800:	e00c      	b.n	800281c <HAL_GPIO_Init+0x21c>
 8002802:	2307      	movs	r3, #7
 8002804:	e00a      	b.n	800281c <HAL_GPIO_Init+0x21c>
 8002806:	2305      	movs	r3, #5
 8002808:	e008      	b.n	800281c <HAL_GPIO_Init+0x21c>
 800280a:	2304      	movs	r3, #4
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x21c>
 800280e:	2303      	movs	r3, #3
 8002810:	e004      	b.n	800281c <HAL_GPIO_Init+0x21c>
 8002812:	2302      	movs	r3, #2
 8002814:	e002      	b.n	800281c <HAL_GPIO_Init+0x21c>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_GPIO_Init+0x21c>
 800281a:	2300      	movs	r3, #0
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	f002 0203 	and.w	r2, r2, #3
 8002822:	0092      	lsls	r2, r2, #2
 8002824:	4093      	lsls	r3, r2
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800282c:	4935      	ldr	r1, [pc, #212]	; (8002904 <HAL_GPIO_Init+0x304>)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	3302      	adds	r3, #2
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283a:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_GPIO_Init+0x324>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285e:	4a31      	ldr	r2, [pc, #196]	; (8002924 <HAL_GPIO_Init+0x324>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002864:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <HAL_GPIO_Init+0x324>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002888:	4a26      	ldr	r2, [pc, #152]	; (8002924 <HAL_GPIO_Init+0x324>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800288e:	4b25      	ldr	r3, [pc, #148]	; (8002924 <HAL_GPIO_Init+0x324>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <HAL_GPIO_Init+0x324>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b8:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_GPIO_Init+0x324>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028dc:	4a11      	ldr	r2, [pc, #68]	; (8002924 <HAL_GPIO_Init+0x324>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3301      	adds	r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	2b0f      	cmp	r3, #15
 80028ec:	f67f ae96 	bls.w	800261c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	40013800 	.word	0x40013800
 8002908:	40020000 	.word	0x40020000
 800290c:	40020400 	.word	0x40020400
 8002910:	40020800 	.word	0x40020800
 8002914:	40020c00 	.word	0x40020c00
 8002918:	40021000 	.word	0x40021000
 800291c:	40021400 	.word	0x40021400
 8002920:	40021800 	.word	0x40021800
 8002924:	40013c00 	.word	0x40013c00

08002928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
 8002934:	4613      	mov	r3, r2
 8002936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002938:	787b      	ldrb	r3, [r7, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002944:	e003      	b.n	800294e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	041a      	lsls	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	619a      	str	r2, [r3, #24]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d006      	beq.n	8002980 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fd1c 	bl	80013b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40013c00 	.word	0x40013c00

0800298c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af02      	add	r7, sp, #8
 8002992:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e108      	b.n	8002bb0 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f007 f909 	bl	8009bd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2203      	movs	r2, #3
 80029c2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029cc:	d102      	bne.n	80029d4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 fcca 	bl	8006372 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7c1a      	ldrb	r2, [r3, #16]
 80029e6:	f88d 2000 	strb.w	r2, [sp]
 80029ea:	3304      	adds	r3, #4
 80029ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ee:	f003 fba9 	bl	8006144 <USB_CoreInit>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0d5      	b.n	8002bb0 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 fcc2 	bl	8006394 <USB_SetCurrentMode>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0c6      	b.n	8002bb0 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
 8002a26:	e04a      	b.n	8002abe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3315      	adds	r3, #21
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	3314      	adds	r3, #20
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	b298      	uxth	r0, r3
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	332e      	adds	r3, #46	; 0x2e
 8002a64:	4602      	mov	r2, r0
 8002a66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	3318      	adds	r3, #24
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	331c      	adds	r3, #28
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3320      	adds	r3, #32
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3324      	adds	r3, #36	; 0x24
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	3301      	adds	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	791b      	ldrb	r3, [r3, #4]
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d3af      	bcc.n	8002a28 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e044      	b.n	8002b58 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	3301      	adds	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	791b      	ldrb	r3, [r3, #4]
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d3b5      	bcc.n	8002ace <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7c1a      	ldrb	r2, [r3, #16]
 8002b6a:	f88d 2000 	strb.w	r2, [sp]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b72:	f003 fc5b 	bl	800642c <USB_DevInit>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e013      	b.n	8002bb0 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7b1b      	ldrb	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d102      	bne.n	8002ba4 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f001 f96c 	bl	8003e7c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 fc92 	bl	80074d2 <USB_DevDisconnect>

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_PCD_Start+0x1c>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e022      	b.n	8002c1a <HAL_PCD_Start+0x62>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f003 fba5 	bl	8006350 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 fc40 	bl	8007490 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c22:	b590      	push	{r4, r7, lr}
 8002c24:	b08d      	sub	sp, #52	; 0x34
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f004 fcfe 	bl	800763a <USB_GetMode>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 84b9 	bne.w	80035b8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 fc62 	bl	8007514 <USB_ReadInterrupts>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 84af 	beq.w	80035b6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	0a1b      	lsrs	r3, r3, #8
 8002c62:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f004 fc4f 	bl	8007514 <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d107      	bne.n	8002c90 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f002 0202 	and.w	r2, r2, #2
 8002c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f004 fc3d 	bl	8007514 <USB_ReadInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d161      	bne.n	8002d68 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0210 	bic.w	r2, r2, #16
 8002cb2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f003 020f 	and.w	r2, r3, #15
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	4413      	add	r3, r2
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	0c5b      	lsrs	r3, r3, #17
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d124      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d035      	beq.n	8002d58 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6a38      	ldr	r0, [r7, #32]
 8002d00:	f004 fa74 	bl	80071ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d10:	441a      	add	r2, r3
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d22:	441a      	add	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	615a      	str	r2, [r3, #20]
 8002d28:	e016      	b.n	8002d58 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	0c5b      	lsrs	r3, r3, #17
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d110      	bne.n	8002d58 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6a38      	ldr	r0, [r7, #32]
 8002d42:	f004 fa53 	bl	80071ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d52:	441a      	add	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0210 	orr.w	r2, r2, #16
 8002d66:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 fbd1 	bl	8007514 <USB_ReadInterrupts>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d7c:	f040 80a7 	bne.w	8002ece <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f004 fbd6 	bl	800753a <USB_ReadDevAllOutEpInterrupt>
 8002d8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d90:	e099      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 808e 	beq.w	8002eba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f004 fbfa 	bl	80075a2 <USB_ReadDevOutEPInterrupt>
 8002dae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00c      	beq.n	8002dd4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2301      	movs	r3, #1
 8002dca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fece 	bl	8003b70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00c      	beq.n	8002df8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dea:	461a      	mov	r2, r3
 8002dec:	2308      	movs	r3, #8
 8002dee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 ffa4 	bl	8003d40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2310      	movs	r3, #16
 8002e12:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d030      	beq.n	8002e80 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b80      	cmp	r3, #128	; 0x80
 8002e28:	d109      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e3c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	3304      	adds	r3, #4
 8002e52:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	78db      	ldrb	r3, [r3, #3]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d108      	bne.n	8002e6e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	4619      	mov	r1, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f006 ffcd 	bl	8009e08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e96:	461a      	mov	r2, r3
 8002e98:	2320      	movs	r3, #32
 8002e9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eb8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f47f af62 	bne.w	8002d92 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 fb1e 	bl	8007514 <USB_ReadInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ede:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ee2:	f040 80db 	bne.w	800309c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f004 fb3f 	bl	800756e <USB_ReadDevAllInEpInterrupt>
 8002ef0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002ef6:	e0cd      	b.n	8003094 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80c2 	beq.w	8003088 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f004 fb65 	bl	80075de <USB_ReadDevInEPInterrupt>
 8002f14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d057      	beq.n	8002fd0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	2201      	movs	r2, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69f9      	ldr	r1, [r7, #28]
 8002f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f40:	4013      	ands	r3, r2
 8002f42:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f50:	461a      	mov	r2, r3
 8002f52:	2301      	movs	r3, #1
 8002f54:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	799b      	ldrb	r3, [r3, #6]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d132      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3320      	adds	r3, #32
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4403      	add	r3, r0
 8002f7e:	331c      	adds	r3, #28
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4419      	add	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4403      	add	r3, r0
 8002f92:	3320      	adds	r3, #32
 8002f94:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d113      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x3a2>
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3324      	adds	r3, #36	; 0x24
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d108      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	f004 fb6c 	bl	800769c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f006 fe97 	bl	8009cfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d008      	beq.n	8002fec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2308      	movs	r3, #8
 8002fea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003002:	461a      	mov	r2, r3
 8003004:	2310      	movs	r3, #16
 8003006:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301e:	461a      	mov	r2, r3
 8003020:	2340      	movs	r3, #64	; 0x40
 8003022:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d023      	beq.n	8003076 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800302e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003030:	6a38      	ldr	r0, [r7, #32]
 8003032:	f003 fb59 	bl	80066e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3310      	adds	r3, #16
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	3304      	adds	r3, #4
 8003048:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	78db      	ldrb	r3, [r3, #3]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d108      	bne.n	8003064 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f006 fee4 	bl	8009e2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003070:	461a      	mov	r2, r3
 8003072:	2302      	movs	r3, #2
 8003074:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fce8 	bl	8003a58 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	3301      	adds	r3, #1
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	2b00      	cmp	r3, #0
 8003098:	f47f af2e 	bne.w	8002ef8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f004 fa37 	bl	8007514 <USB_ReadInterrupts>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030b0:	d122      	bne.n	80030f8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d108      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030d8:	2100      	movs	r1, #0
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f007 f85e 	bl	800a19c <HAL_PCDEx_LPM_Callback>
 80030e0:	e002      	b.n	80030e8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f006 fe82 	bl	8009dec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 fa09 	bl	8007514 <USB_ReadInterrupts>
 8003102:	4603      	mov	r3, r0
 8003104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310c:	d112      	bne.n	8003134 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f006 fe3e 	bl	8009da0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003132:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f004 f9eb 	bl	8007514 <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003148:	d121      	bne.n	800318e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003158:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003160:	2b00      	cmp	r3, #0
 8003162:	d111      	bne.n	8003188 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	f003 020f 	and.w	r2, r3, #15
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800317e:	2101      	movs	r1, #1
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f007 f80b 	bl	800a19c <HAL_PCDEx_LPM_Callback>
 8003186:	e002      	b.n	800318e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f006 fe09 	bl	8009da0 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f004 f9be 	bl	8007514 <USB_ReadInterrupts>
 8003198:	4603      	mov	r3, r0
 800319a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a2:	f040 80b7 	bne.w	8003314 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2110      	movs	r1, #16
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 fa91 	bl	80066e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ca:	e046      	b.n	800325a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d8:	461a      	mov	r2, r3
 80031da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f0:	0151      	lsls	r1, r2, #5
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	440a      	add	r2, r1
 80031f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320c:	461a      	mov	r2, r3
 800320e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003212:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003224:	0151      	lsls	r1, r2, #5
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	440a      	add	r2, r1
 800322a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800322e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003232:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003244:	0151      	lsls	r1, r2, #5
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	440a      	add	r2, r1
 800324a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800324e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003252:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	3301      	adds	r3, #1
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	791b      	ldrb	r3, [r3, #4]
 800325e:	461a      	mov	r2, r3
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003262:	4293      	cmp	r3, r2
 8003264:	d3b2      	bcc.n	80031cc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003274:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003278:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7bdb      	ldrb	r3, [r3, #15]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d016      	beq.n	80032b0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003292:	f043 030b 	orr.w	r3, r3, #11
 8003296:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a8:	f043 030b 	orr.w	r3, r3, #11
 80032ac:	6453      	str	r3, [r2, #68]	; 0x44
 80032ae:	e015      	b.n	80032dc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d6:	f043 030b 	orr.w	r3, r3, #11
 80032da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032fe:	461a      	mov	r2, r3
 8003300:	f004 f9cc 	bl	800769c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f004 f8fb 	bl	8007514 <USB_ReadInterrupts>
 800331e:	4603      	mov	r3, r0
 8003320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003328:	d123      	bne.n	8003372 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f004 f991 	bl	8007656 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f003 fa4e 	bl	80067da <USB_GetDevSpeed>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681c      	ldr	r4, [r3, #0]
 800334a:	f000 fea1 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 800334e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003354:	461a      	mov	r2, r3
 8003356:	4620      	mov	r0, r4
 8003358:	f002 ff58 	bl	800620c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f006 fcf6 	bl	8009d4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003370:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f004 f8cc 	bl	8007514 <USB_ReadInterrupts>
 800337c:	4603      	mov	r3, r0
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b08      	cmp	r3, #8
 8003384:	d10a      	bne.n	800339c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f006 fcd3 	bl	8009d32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f002 0208 	and.w	r2, r2, #8
 800339a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f004 f8b7 	bl	8007514 <USB_ReadInterrupts>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	2b80      	cmp	r3, #128	; 0x80
 80033ae:	d123      	bne.n	80033f8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033bc:	2301      	movs	r3, #1
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
 80033c0:	e014      	b.n	80033ec <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d105      	bne.n	80033e6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fb08 	bl	80039f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	3301      	adds	r3, #1
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	791b      	ldrb	r3, [r3, #4]
 80033f0:	461a      	mov	r2, r3
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d3e4      	bcc.n	80033c2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f004 f889 	bl	8007514 <USB_ReadInterrupts>
 8003402:	4603      	mov	r3, r0
 8003404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800340c:	d13c      	bne.n	8003488 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800340e:	2301      	movs	r3, #1
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
 8003412:	e02b      	b.n	800346c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	3318      	adds	r3, #24
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d115      	bne.n	8003466 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800343a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800343c:	2b00      	cmp	r3, #0
 800343e:	da12      	bge.n	8003466 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	3317      	adds	r3, #23
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800345c:	b2db      	uxtb	r3, r3
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fac8 	bl	80039f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	3301      	adds	r3, #1
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	791b      	ldrb	r3, [r3, #4]
 8003470:	461a      	mov	r2, r3
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	4293      	cmp	r3, r2
 8003476:	d3cd      	bcc.n	8003414 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f004 f841 	bl	8007514 <USB_ReadInterrupts>
 8003492:	4603      	mov	r3, r0
 8003494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800349c:	d156      	bne.n	800354c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800349e:	2301      	movs	r3, #1
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
 80034a2:	e045      	b.n	8003530 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d12e      	bne.n	800352a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	da2b      	bge.n	800352a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80034de:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d121      	bne.n	800352a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	f203 2357 	addw	r3, r3, #599	; 0x257
 80034f8:	2201      	movs	r2, #1
 80034fa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003526:	6053      	str	r3, [r2, #4]
            break;
 8003528:	e008      	b.n	800353c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	3301      	adds	r3, #1
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	791b      	ldrb	r3, [r3, #4]
 8003534:	461a      	mov	r2, r3
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	4293      	cmp	r3, r2
 800353a:	d3b3      	bcc.n	80034a4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800354a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f003 ffdf 	bl	8007514 <USB_ReadInterrupts>
 8003556:	4603      	mov	r3, r0
 8003558:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800355c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003560:	d10a      	bne.n	8003578 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f006 fc74 	bl	8009e50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f003 ffc9 	bl	8007514 <USB_ReadInterrupts>
 8003582:	4603      	mov	r3, r0
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d115      	bne.n	80035b8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f006 fc64 	bl	8009e6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6859      	ldr	r1, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	e000      	b.n	80035b8 <HAL_PCD_IRQHandler+0x996>
      return;
 80035b6:	bf00      	nop
    }
  }
}
 80035b8:	3734      	adds	r7, #52	; 0x34
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd90      	pop	{r4, r7, pc}

080035be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_PCD_SetAddress+0x1a>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e012      	b.n	80035fe <HAL_PCD_SetAddress+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f003 ff28 	bl	8007444 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	4608      	mov	r0, r1
 8003610:	4611      	mov	r1, r2
 8003612:	461a      	mov	r2, r3
 8003614:	4603      	mov	r3, r0
 8003616:	70fb      	strb	r3, [r7, #3]
 8003618:	460b      	mov	r3, r1
 800361a:	803b      	strh	r3, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003628:	2b00      	cmp	r3, #0
 800362a:	da0f      	bge.n	800364c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	3310      	adds	r3, #16
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	3304      	adds	r3, #4
 8003642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	705a      	strb	r2, [r3, #1]
 800364a:	e00f      	b.n	800366c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	3304      	adds	r3, #4
 8003664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	b2da      	uxtb	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003678:	883a      	ldrh	r2, [r7, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	78ba      	ldrb	r2, [r7, #2]
 8003682:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	785b      	ldrb	r3, [r3, #1]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003696:	78bb      	ldrb	r3, [r7, #2]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d102      	bne.n	80036a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_PCD_EP_Open+0xaa>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e00e      	b.n	80036ce <HAL_PCD_EP_Open+0xc8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68f9      	ldr	r1, [r7, #12]
 80036be:	4618      	mov	r0, r3
 80036c0:	f003 f8b0 	bl	8006824 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80036cc:	7afb      	ldrb	r3, [r7, #11]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da0f      	bge.n	800370a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	f003 020f 	and.w	r2, r3, #15
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	3310      	adds	r3, #16
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	3304      	adds	r3, #4
 8003700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	705a      	strb	r2, [r3, #1]
 8003708:	e00f      	b.n	800372a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 020f 	and.w	r2, r3, #15
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_PCD_EP_Close+0x6e>
 8003740:	2302      	movs	r3, #2
 8003742:	e00e      	b.n	8003762 <HAL_PCD_EP_Close+0x8c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68f9      	ldr	r1, [r7, #12]
 8003752:	4618      	mov	r0, r3
 8003754:	f003 f8ee 	bl	8006934 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	460b      	mov	r3, r1
 8003778:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	f003 020f 	and.w	r2, r3, #15
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	3304      	adds	r3, #4
 8003792:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2200      	movs	r2, #0
 80037a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ac:	7afb      	ldrb	r3, [r7, #11]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	799b      	ldrb	r3, [r3, #6]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d102      	bne.n	80037c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	799b      	ldrb	r3, [r3, #6]
 80037ce:	461a      	mov	r2, r3
 80037d0:	6979      	ldr	r1, [r7, #20]
 80037d2:	f003 f98b 	bl	8006aec <USB_EPStartXfer>

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	f003 020f 	and.w	r2, r3, #15
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	460b      	mov	r3, r1
 800381e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003820:	7afb      	ldrb	r3, [r7, #11]
 8003822:	f003 020f 	and.w	r2, r3, #15
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	3310      	adds	r3, #16
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	3304      	adds	r3, #4
 8003836:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2200      	movs	r2, #0
 8003848:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2201      	movs	r2, #1
 800384e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003850:	7afb      	ldrb	r3, [r7, #11]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	b2da      	uxtb	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	799b      	ldrb	r3, [r3, #6]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d102      	bne.n	800386a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	799b      	ldrb	r3, [r3, #6]
 8003872:	461a      	mov	r2, r3
 8003874:	6979      	ldr	r1, [r7, #20]
 8003876:	f003 f939 	bl	8006aec <USB_EPStartXfer>

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	7912      	ldrb	r2, [r2, #4]
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e04f      	b.n	8003942 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	da0f      	bge.n	80038ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 020f 	and.w	r2, r3, #15
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	3310      	adds	r3, #16
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	3304      	adds	r3, #4
 80038c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	705a      	strb	r2, [r3, #1]
 80038c8:	e00d      	b.n	80038e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4413      	add	r3, r2
 80038dc:	3304      	adds	r3, #4
 80038de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_PCD_EP_SetStall+0x82>
 8003902:	2302      	movs	r3, #2
 8003904:	e01d      	b.n	8003942 <HAL_PCD_EP_SetStall+0xbe>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68f9      	ldr	r1, [r7, #12]
 8003914:	4618      	mov	r0, r3
 8003916:	f003 fcc1 	bl	800729c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	7999      	ldrb	r1, [r3, #6]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003932:	461a      	mov	r2, r3
 8003934:	f003 feb2 	bl	800769c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	7912      	ldrb	r2, [r2, #4]
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e042      	b.n	80039ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800396c:	2b00      	cmp	r3, #0
 800396e:	da0f      	bge.n	8003990 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 020f 	and.w	r2, r3, #15
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	3310      	adds	r3, #16
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	3304      	adds	r3, #4
 8003986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	705a      	strb	r2, [r3, #1]
 800398e:	e00f      	b.n	80039b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 020f 	and.w	r2, r3, #15
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	3304      	adds	r3, #4
 80039a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_PCD_EP_ClrStall+0x86>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e00e      	b.n	80039ee <HAL_PCD_EP_ClrStall+0xa4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	4618      	mov	r0, r3
 80039e0:	f003 fcca 	bl	8007378 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da0c      	bge.n	8003a24 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	3310      	adds	r3, #16
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3304      	adds	r3, #4
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e00c      	b.n	8003a3e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	f003 020f 	and.w	r2, r3, #15
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68f9      	ldr	r1, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f003 fae9 	bl	800701c <USB_EPStopXfer>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	3310      	adds	r3, #16
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d901      	bls.n	8003a90 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e06b      	b.n	8003b68 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d902      	bls.n	8003aac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3303      	adds	r3, #3
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ab4:	e02a      	b.n	8003b0c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d902      	bls.n	8003ad2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3303      	adds	r3, #3
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	68d9      	ldr	r1, [r3, #12]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	4603      	mov	r3, r0
 8003aee:	6978      	ldr	r0, [r7, #20]
 8003af0:	f003 fb3e 	bl	8007170 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	441a      	add	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	441a      	add	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d809      	bhi.n	8003b36 <PCD_WriteEmptyTxFifo+0xde>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d203      	bcs.n	8003b36 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1bf      	bne.n	8003ab6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d811      	bhi.n	8003b66 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	2201      	movs	r2, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	6939      	ldr	r1, [r7, #16]
 8003b5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b62:	4013      	ands	r3, r2
 8003b64:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3720      	adds	r7, #32
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	333c      	adds	r3, #60	; 0x3c
 8003b88:	3304      	adds	r3, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	799b      	ldrb	r3, [r3, #6]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d17b      	bne.n	8003c9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d015      	beq.n	8003bdc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	4a61      	ldr	r2, [pc, #388]	; (8003d38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	f240 80b9 	bls.w	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80b3 	beq.w	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd8:	6093      	str	r3, [r2, #8]
 8003bda:	e0a7      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	6093      	str	r3, [r2, #8]
 8003bf8:	e098      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f040 8093 	bne.w	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4a4b      	ldr	r2, [pc, #300]	; (8003d38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d90f      	bls.n	8003c2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c24:	461a      	mov	r2, r3
 8003c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2a:	6093      	str	r3, [r2, #8]
 8003c2c:	e07e      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	4413      	add	r3, r2
 8003c40:	3304      	adds	r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	0159      	lsls	r1, r3, #5
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	440b      	add	r3, r1
 8003c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5a:	1ad2      	subs	r2, r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d114      	bne.n	8003c90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	f003 fd0e 	bl	800769c <USB_EP0_OutStart>
 8003c80:	e006      	b.n	8003c90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	441a      	add	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f006 f816 	bl	8009cc8 <HAL_PCD_DataOutStageCallback>
 8003c9c:	e046      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d124      	bne.n	8003cf0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc2:	6093      	str	r3, [r2, #8]
 8003cc4:	e032      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2320      	movs	r3, #32
 8003ce0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f005 ffed 	bl	8009cc8 <HAL_PCD_DataOutStageCallback>
 8003cee:	e01d      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d114      	bne.n	8003d20 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d108      	bne.n	8003d20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	f003 fcbe 	bl	800769c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	4619      	mov	r1, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f005 ffce 	bl	8009cc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	4f54300a 	.word	0x4f54300a
 8003d3c:	4f54310a 	.word	0x4f54310a

08003d40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	333c      	adds	r3, #60	; 0x3c
 8003d58:	3304      	adds	r3, #4
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d90e      	bls.n	8003d94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f005 ff85 	bl	8009ca4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d90c      	bls.n	8003dbc <PCD_EP_OutSetupPacket_int+0x7c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	799b      	ldrb	r3, [r3, #6]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d108      	bne.n	8003dbc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003db4:	461a      	mov	r2, r3
 8003db6:	2101      	movs	r1, #1
 8003db8:	f003 fc70 	bl	800769c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	4f54300a 	.word	0x4f54300a

08003dcc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d107      	bne.n	8003dfa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003dea:	883b      	ldrh	r3, [r7, #0]
 8003dec:	0419      	lsls	r1, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
 8003df8:	e028      	b.n	8003e4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	4413      	add	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	e00d      	b.n	8003e2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	3340      	adds	r3, #64	; 0x40
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	4413      	add	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	3301      	adds	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
 8003e2a:	7bfa      	ldrb	r2, [r7, #15]
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d3ec      	bcc.n	8003e0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e34:	883b      	ldrh	r3, [r7, #0]
 8003e36:	0418      	lsls	r0, r3, #16
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6819      	ldr	r1, [r3, #0]
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	4302      	orrs	r2, r0
 8003e44:	3340      	adds	r3, #64	; 0x40
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	460b      	mov	r3, r1
 8003e64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eae:	f043 0303 	orr.w	r3, r3, #3
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0cc      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b68      	ldr	r3, [pc, #416]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d90c      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b63      	ldr	r3, [pc, #396]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0b8      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f18:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4a58      	ldr	r2, [pc, #352]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f30:	4b53      	ldr	r3, [pc, #332]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a52      	ldr	r2, [pc, #328]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b50      	ldr	r3, [pc, #320]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	494d      	ldr	r1, [pc, #308]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d044      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	4b47      	ldr	r3, [pc, #284]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d119      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e07f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d003      	beq.n	8003f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f82:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f92:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e067      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa2:	4b37      	ldr	r3, [pc, #220]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4934      	ldr	r1, [pc, #208]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb4:	f7fd fed6 	bl	8001d64 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbc:	f7fd fed2 	bl	8001d64 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e04f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 020c 	and.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1eb      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d20c      	bcs.n	800400c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e032      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004018:	4b19      	ldr	r3, [pc, #100]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4916      	ldr	r1, [pc, #88]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	490e      	ldr	r1, [pc, #56]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800404a:	f000 fb7f 	bl	800474c <HAL_RCC_GetSysClockFreq>
 800404e:	4602      	mov	r2, r0
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	490a      	ldr	r1, [pc, #40]	; (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 800405c:	5ccb      	ldrb	r3, [r1, r3]
 800405e:	fa22 f303 	lsr.w	r3, r2, r3
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd fe36 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023c00 	.word	0x40023c00
 8004080:	40023800 	.word	0x40023800
 8004084:	0800eaf4 	.word	0x0800eaf4
 8004088:	20000000 	.word	0x20000000
 800408c:	20000004 	.word	0x20000004

08004090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000000 	.word	0x20000000

080040a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040ac:	f7ff fff0 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0a9b      	lsrs	r3, r3, #10
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4903      	ldr	r1, [pc, #12]	; (80040cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40023800 	.word	0x40023800
 80040cc:	0800eb04 	.word	0x0800eb04

080040d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040d4:	f7ff ffdc 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0b5b      	lsrs	r3, r3, #13
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	; (80040f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	0800eb04 	.word	0x0800eb04

080040f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08c      	sub	sp, #48	; 0x30
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d010      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004130:	4b6f      	ldr	r3, [pc, #444]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004136:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	496c      	ldr	r1, [pc, #432]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800414e:	2301      	movs	r3, #1
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d010      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800415e:	4b64      	ldr	r3, [pc, #400]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004164:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416c:	4960      	ldr	r1, [pc, #384]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800417c:	2301      	movs	r3, #1
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d017      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800418c:	4b58      	ldr	r3, [pc, #352]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800418e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004192:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4955      	ldr	r1, [pc, #340]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041aa:	d101      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80041ac:	2301      	movs	r3, #1
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80041b8:	2301      	movs	r3, #1
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d017      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041c8:	4b49      	ldr	r3, [pc, #292]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d6:	4946      	ldr	r1, [pc, #280]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e6:	d101      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80041e8:	2301      	movs	r3, #1
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80041f4:	2301      	movs	r3, #1
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 808a 	beq.w	800431a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	4a38      	ldr	r2, [pc, #224]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004214:	6413      	str	r3, [r2, #64]	; 0x40
 8004216:	4b36      	ldr	r3, [pc, #216]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004222:	4b34      	ldr	r3, [pc, #208]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a33      	ldr	r2, [pc, #204]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800422e:	f7fd fd99 	bl	8001d64 <HAL_GetTick>
 8004232:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004234:	e008      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004236:	f7fd fd95 	bl	8001d64 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e278      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004248:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004254:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d02f      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426c:	6a3a      	ldr	r2, [r7, #32]
 800426e:	429a      	cmp	r2, r3
 8004270:	d028      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004272:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800427c:	4b1e      	ldr	r3, [pc, #120]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800427e:	2201      	movs	r2, #1
 8004280:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004282:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004288:	4a19      	ldr	r2, [pc, #100]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800428e:	4b18      	ldr	r3, [pc, #96]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b01      	cmp	r3, #1
 8004298:	d114      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800429a:	f7fd fd63 	bl	8001d64 <HAL_GetTick>
 800429e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a0:	e00a      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7fd fd5f 	bl	8001d64 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e240      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b8:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ee      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d0:	d114      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e6:	4902      	ldr	r1, [pc, #8]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	608b      	str	r3, [r1, #8]
 80042ec:	e00c      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40007000 	.word	0x40007000
 80042f8:	42470e40 	.word	0x42470e40
 80042fc:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a49      	ldr	r2, [pc, #292]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004302:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004306:	6093      	str	r3, [r2, #8]
 8004308:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800430a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	4944      	ldr	r1, [pc, #272]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004316:	4313      	orrs	r3, r2
 8004318:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	2b00      	cmp	r3, #0
 8004324:	d004      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800432c:	4b3f      	ldr	r3, [pc, #252]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800432e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800433c:	4b3a      	ldr	r3, [pc, #232]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800433e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004342:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434a:	4937      	ldr	r1, [pc, #220]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800435e:	4b32      	ldr	r3, [pc, #200]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004364:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436c:	492e      	ldr	r1, [pc, #184]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d011      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004380:	4b29      	ldr	r3, [pc, #164]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004386:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	4926      	ldr	r1, [pc, #152]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800439e:	d101      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80043a0:	2301      	movs	r3, #1
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	491a      	ldr	r1, [pc, #104]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d011      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e0:	4911      	ldr	r1, [pc, #68]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f0:	d101      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80043f2:	2301      	movs	r3, #1
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d005      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004404:	f040 80ff 	bne.w	8004606 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800440e:	f7fd fca9 	bl	8001d64 <HAL_GetTick>
 8004412:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004414:	e00e      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004416:	f7fd fca5 	bl	8001d64 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d907      	bls.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e188      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004428:	40023800 	.word	0x40023800
 800442c:	424711e0 	.word	0x424711e0
 8004430:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004434:	4b7e      	ldr	r3, [pc, #504]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1ea      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800445c:	2b00      	cmp	r3, #0
 800445e:	d028      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d124      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004468:	4b71      	ldr	r3, [pc, #452]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800446a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	3301      	adds	r3, #1
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800447a:	4b6d      	ldr	r3, [pc, #436]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800447c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004480:	0e1b      	lsrs	r3, r3, #24
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	019b      	lsls	r3, r3, #6
 8004492:	431a      	orrs	r2, r3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	3b01      	subs	r3, #1
 800449a:	041b      	lsls	r3, r3, #16
 800449c:	431a      	orrs	r2, r3
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	071b      	lsls	r3, r3, #28
 80044aa:	4961      	ldr	r1, [pc, #388]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d035      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044dc:	d130      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80044de:	4b54      	ldr	r3, [pc, #336]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	3301      	adds	r3, #1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044f0:	4b4f      	ldr	r3, [pc, #316]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80044f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f6:	0f1b      	lsrs	r3, r3, #28
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	019b      	lsls	r3, r3, #6
 8004508:	431a      	orrs	r2, r3
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	3b01      	subs	r3, #1
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	061b      	lsls	r3, r3, #24
 800451a:	431a      	orrs	r2, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	071b      	lsls	r3, r3, #28
 8004520:	4943      	ldr	r1, [pc, #268]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004528:	4b41      	ldr	r3, [pc, #260]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800452a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800452e:	f023 021f 	bic.w	r2, r3, #31
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	3b01      	subs	r3, #1
 8004538:	493d      	ldr	r1, [pc, #244]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004548:	2b00      	cmp	r3, #0
 800454a:	d029      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004554:	d124      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004556:	4b36      	ldr	r3, [pc, #216]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	3301      	adds	r3, #1
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004568:	4b31      	ldr	r3, [pc, #196]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800456a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456e:	0f1b      	lsrs	r3, r3, #28
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	019b      	lsls	r3, r3, #6
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	3b01      	subs	r3, #1
 800458a:	041b      	lsls	r3, r3, #16
 800458c:	431a      	orrs	r2, r3
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	061b      	lsls	r3, r3, #24
 8004592:	431a      	orrs	r2, r3
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	071b      	lsls	r3, r3, #28
 8004598:	4925      	ldr	r1, [pc, #148]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d016      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	019b      	lsls	r3, r3, #6
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	085b      	lsrs	r3, r3, #1
 80045be:	3b01      	subs	r3, #1
 80045c0:	041b      	lsls	r3, r3, #16
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	061b      	lsls	r3, r3, #24
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	071b      	lsls	r3, r3, #28
 80045d2:	4917      	ldr	r1, [pc, #92]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045da:	4b16      	ldr	r3, [pc, #88]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045e0:	f7fd fbc0 	bl	8001d64 <HAL_GetTick>
 80045e4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045e8:	f7fd fbbc 	bl	8001d64 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e09f      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045fa:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	2b01      	cmp	r3, #1
 800460a:	f040 8095 	bne.w	8004738 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004614:	f7fd fba6 	bl	8001d64 <HAL_GetTick>
 8004618:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800461a:	e00f      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800461c:	f7fd fba2 	bl	8001d64 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d908      	bls.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e085      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800462e:	bf00      	nop
 8004630:	40023800 	.word	0x40023800
 8004634:	42470068 	.word	0x42470068
 8004638:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800463c:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004648:	d0e8      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004666:	2b00      	cmp	r3, #0
 8004668:	d02b      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466e:	2b00      	cmp	r3, #0
 8004670:	d127      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004672:	4b34      	ldr	r3, [pc, #208]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	3301      	adds	r3, #1
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	019b      	lsls	r3, r3, #6
 800468e:	431a      	orrs	r2, r3
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	3b01      	subs	r3, #1
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	4928      	ldr	r1, [pc, #160]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046a8:	4b26      	ldr	r3, [pc, #152]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	3b01      	subs	r3, #1
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	4922      	ldr	r1, [pc, #136]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01d      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d6:	d118      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046d8:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046de:	0e1b      	lsrs	r3, r3, #24
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	019b      	lsls	r3, r3, #6
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	3b01      	subs	r3, #1
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	431a      	orrs	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	4910      	ldr	r1, [pc, #64]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800470a:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004710:	f7fd fb28 	bl	8001d64 <HAL_GetTick>
 8004714:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004718:	f7fd fb24 	bl	8001d64 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e007      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004736:	d1ef      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3730      	adds	r7, #48	; 0x30
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	42470070 	.word	0x42470070

0800474c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800474c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004750:	b0ae      	sub	sp, #184	; 0xb8
 8004752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004772:	4bcb      	ldr	r3, [pc, #812]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	2b0c      	cmp	r3, #12
 800477c:	f200 8206 	bhi.w	8004b8c <HAL_RCC_GetSysClockFreq+0x440>
 8004780:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	080047bd 	.word	0x080047bd
 800478c:	08004b8d 	.word	0x08004b8d
 8004790:	08004b8d 	.word	0x08004b8d
 8004794:	08004b8d 	.word	0x08004b8d
 8004798:	080047c5 	.word	0x080047c5
 800479c:	08004b8d 	.word	0x08004b8d
 80047a0:	08004b8d 	.word	0x08004b8d
 80047a4:	08004b8d 	.word	0x08004b8d
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	08004b8d 	.word	0x08004b8d
 80047b0:	08004b8d 	.word	0x08004b8d
 80047b4:	08004b8d 	.word	0x08004b8d
 80047b8:	080049bd 	.word	0x080049bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047bc:	4bb9      	ldr	r3, [pc, #740]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x358>)
 80047be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80047c2:	e1e7      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047c4:	4bb8      	ldr	r3, [pc, #736]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80047c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80047ca:	e1e3      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047cc:	4bb4      	ldr	r3, [pc, #720]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d8:	4bb1      	ldr	r3, [pc, #708]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d071      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e4:	4bae      	ldr	r3, [pc, #696]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	099b      	lsrs	r3, r3, #6
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80047f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004800:	2300      	movs	r3, #0
 8004802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800480a:	4622      	mov	r2, r4
 800480c:	462b      	mov	r3, r5
 800480e:	f04f 0000 	mov.w	r0, #0
 8004812:	f04f 0100 	mov.w	r1, #0
 8004816:	0159      	lsls	r1, r3, #5
 8004818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800481c:	0150      	lsls	r0, r2, #5
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4621      	mov	r1, r4
 8004824:	1a51      	subs	r1, r2, r1
 8004826:	6439      	str	r1, [r7, #64]	; 0x40
 8004828:	4629      	mov	r1, r5
 800482a:	eb63 0301 	sbc.w	r3, r3, r1
 800482e:	647b      	str	r3, [r7, #68]	; 0x44
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800483c:	4649      	mov	r1, r9
 800483e:	018b      	lsls	r3, r1, #6
 8004840:	4641      	mov	r1, r8
 8004842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004846:	4641      	mov	r1, r8
 8004848:	018a      	lsls	r2, r1, #6
 800484a:	4641      	mov	r1, r8
 800484c:	1a51      	subs	r1, r2, r1
 800484e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004850:	4649      	mov	r1, r9
 8004852:	eb63 0301 	sbc.w	r3, r3, r1
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004864:	4649      	mov	r1, r9
 8004866:	00cb      	lsls	r3, r1, #3
 8004868:	4641      	mov	r1, r8
 800486a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800486e:	4641      	mov	r1, r8
 8004870:	00ca      	lsls	r2, r1, #3
 8004872:	4610      	mov	r0, r2
 8004874:	4619      	mov	r1, r3
 8004876:	4603      	mov	r3, r0
 8004878:	4622      	mov	r2, r4
 800487a:	189b      	adds	r3, r3, r2
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
 800487e:	462b      	mov	r3, r5
 8004880:	460a      	mov	r2, r1
 8004882:	eb42 0303 	adc.w	r3, r2, r3
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004894:	4629      	mov	r1, r5
 8004896:	024b      	lsls	r3, r1, #9
 8004898:	4621      	mov	r1, r4
 800489a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800489e:	4621      	mov	r1, r4
 80048a0:	024a      	lsls	r2, r1, #9
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80048b8:	f7fc fa06 	bl	8000cc8 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4613      	mov	r3, r2
 80048c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048c6:	e067      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c8:	4b75      	ldr	r3, [pc, #468]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	099b      	lsrs	r3, r3, #6
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80048d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80048e2:	2300      	movs	r3, #0
 80048e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80048ea:	4622      	mov	r2, r4
 80048ec:	462b      	mov	r3, r5
 80048ee:	f04f 0000 	mov.w	r0, #0
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	0159      	lsls	r1, r3, #5
 80048f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048fc:	0150      	lsls	r0, r2, #5
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4621      	mov	r1, r4
 8004904:	1a51      	subs	r1, r2, r1
 8004906:	62b9      	str	r1, [r7, #40]	; 0x28
 8004908:	4629      	mov	r1, r5
 800490a:	eb63 0301 	sbc.w	r3, r3, r1
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800491c:	4649      	mov	r1, r9
 800491e:	018b      	lsls	r3, r1, #6
 8004920:	4641      	mov	r1, r8
 8004922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004926:	4641      	mov	r1, r8
 8004928:	018a      	lsls	r2, r1, #6
 800492a:	4641      	mov	r1, r8
 800492c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004930:	4649      	mov	r1, r9
 8004932:	eb63 0b01 	sbc.w	fp, r3, r1
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004942:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004946:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800494a:	4692      	mov	sl, r2
 800494c:	469b      	mov	fp, r3
 800494e:	4623      	mov	r3, r4
 8004950:	eb1a 0303 	adds.w	r3, sl, r3
 8004954:	623b      	str	r3, [r7, #32]
 8004956:	462b      	mov	r3, r5
 8004958:	eb4b 0303 	adc.w	r3, fp, r3
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800496a:	4629      	mov	r1, r5
 800496c:	028b      	lsls	r3, r1, #10
 800496e:	4621      	mov	r1, r4
 8004970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004974:	4621      	mov	r1, r4
 8004976:	028a      	lsls	r2, r1, #10
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004980:	2200      	movs	r2, #0
 8004982:	673b      	str	r3, [r7, #112]	; 0x70
 8004984:	677a      	str	r2, [r7, #116]	; 0x74
 8004986:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800498a:	f7fc f99d 	bl	8000cc8 <__aeabi_uldivmod>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4613      	mov	r3, r2
 8004994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004998:	4b41      	ldr	r3, [pc, #260]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	3301      	adds	r3, #1
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80049aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049ba:	e0eb      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049bc:	4b38      	ldr	r3, [pc, #224]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c8:	4b35      	ldr	r3, [pc, #212]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d06b      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d4:	4b32      	ldr	r3, [pc, #200]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	099b      	lsrs	r3, r3, #6
 80049da:	2200      	movs	r2, #0
 80049dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80049de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e6:	663b      	str	r3, [r7, #96]	; 0x60
 80049e8:	2300      	movs	r3, #0
 80049ea:	667b      	str	r3, [r7, #100]	; 0x64
 80049ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80049f0:	4622      	mov	r2, r4
 80049f2:	462b      	mov	r3, r5
 80049f4:	f04f 0000 	mov.w	r0, #0
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	0159      	lsls	r1, r3, #5
 80049fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a02:	0150      	lsls	r0, r2, #5
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4621      	mov	r1, r4
 8004a0a:	1a51      	subs	r1, r2, r1
 8004a0c:	61b9      	str	r1, [r7, #24]
 8004a0e:	4629      	mov	r1, r5
 8004a10:	eb63 0301 	sbc.w	r3, r3, r1
 8004a14:	61fb      	str	r3, [r7, #28]
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a22:	4659      	mov	r1, fp
 8004a24:	018b      	lsls	r3, r1, #6
 8004a26:	4651      	mov	r1, sl
 8004a28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2c:	4651      	mov	r1, sl
 8004a2e:	018a      	lsls	r2, r1, #6
 8004a30:	4651      	mov	r1, sl
 8004a32:	ebb2 0801 	subs.w	r8, r2, r1
 8004a36:	4659      	mov	r1, fp
 8004a38:	eb63 0901 	sbc.w	r9, r3, r1
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a50:	4690      	mov	r8, r2
 8004a52:	4699      	mov	r9, r3
 8004a54:	4623      	mov	r3, r4
 8004a56:	eb18 0303 	adds.w	r3, r8, r3
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	462b      	mov	r3, r5
 8004a5e:	eb49 0303 	adc.w	r3, r9, r3
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a70:	4629      	mov	r1, r5
 8004a72:	024b      	lsls	r3, r1, #9
 8004a74:	4621      	mov	r1, r4
 8004a76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	024a      	lsls	r2, r1, #9
 8004a7e:	4610      	mov	r0, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a86:	2200      	movs	r2, #0
 8004a88:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a8a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a90:	f7fc f91a 	bl	8000cc8 <__aeabi_uldivmod>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4613      	mov	r3, r2
 8004a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a9e:	e065      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x420>
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	00f42400 	.word	0x00f42400
 8004aa8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aac:	4b3d      	ldr	r3, [pc, #244]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	099b      	lsrs	r3, r3, #6
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004abc:	653b      	str	r3, [r7, #80]	; 0x50
 8004abe:	2300      	movs	r3, #0
 8004ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ac2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004ac6:	4642      	mov	r2, r8
 8004ac8:	464b      	mov	r3, r9
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	0159      	lsls	r1, r3, #5
 8004ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad8:	0150      	lsls	r0, r2, #5
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4641      	mov	r1, r8
 8004ae0:	1a51      	subs	r1, r2, r1
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004af8:	4659      	mov	r1, fp
 8004afa:	018b      	lsls	r3, r1, #6
 8004afc:	4651      	mov	r1, sl
 8004afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b02:	4651      	mov	r1, sl
 8004b04:	018a      	lsls	r2, r1, #6
 8004b06:	4651      	mov	r1, sl
 8004b08:	1a54      	subs	r4, r2, r1
 8004b0a:	4659      	mov	r1, fp
 8004b0c:	eb63 0501 	sbc.w	r5, r3, r1
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	00eb      	lsls	r3, r5, #3
 8004b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b1e:	00e2      	lsls	r2, r4, #3
 8004b20:	4614      	mov	r4, r2
 8004b22:	461d      	mov	r5, r3
 8004b24:	4643      	mov	r3, r8
 8004b26:	18e3      	adds	r3, r4, r3
 8004b28:	603b      	str	r3, [r7, #0]
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	eb45 0303 	adc.w	r3, r5, r3
 8004b30:	607b      	str	r3, [r7, #4]
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b3e:	4629      	mov	r1, r5
 8004b40:	028b      	lsls	r3, r1, #10
 8004b42:	4621      	mov	r1, r4
 8004b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b48:	4621      	mov	r1, r4
 8004b4a:	028a      	lsls	r2, r1, #10
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4619      	mov	r1, r3
 8004b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b54:	2200      	movs	r2, #0
 8004b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b58:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b5e:	f7fc f8b3 	bl	8000cc8 <__aeabi_uldivmod>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4613      	mov	r3, r2
 8004b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	0f1b      	lsrs	r3, r3, #28
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b8a:	e003      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	37b8      	adds	r7, #184	; 0xb8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	00f42400 	.word	0x00f42400

08004bac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e28d      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 8083 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bcc:	4b94      	ldr	r3, [pc, #592]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 030c 	and.w	r3, r3, #12
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d019      	beq.n	8004c0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bd8:	4b91      	ldr	r3, [pc, #580]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d106      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004be4:	4b8e      	ldr	r3, [pc, #568]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf0:	d00c      	beq.n	8004c0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf2:	4b8b      	ldr	r3, [pc, #556]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bfa:	2b0c      	cmp	r3, #12
 8004bfc:	d112      	bne.n	8004c24 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bfe:	4b88      	ldr	r3, [pc, #544]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c0a:	d10b      	bne.n	8004c24 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0c:	4b84      	ldr	r3, [pc, #528]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d05b      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x124>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d157      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e25a      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2c:	d106      	bne.n	8004c3c <HAL_RCC_OscConfig+0x90>
 8004c2e:	4b7c      	ldr	r3, [pc, #496]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a7b      	ldr	r2, [pc, #492]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	e01d      	b.n	8004c78 <HAL_RCC_OscConfig+0xcc>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c44:	d10c      	bne.n	8004c60 <HAL_RCC_OscConfig+0xb4>
 8004c46:	4b76      	ldr	r3, [pc, #472]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a75      	ldr	r2, [pc, #468]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	4b73      	ldr	r3, [pc, #460]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a72      	ldr	r2, [pc, #456]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e00b      	b.n	8004c78 <HAL_RCC_OscConfig+0xcc>
 8004c60:	4b6f      	ldr	r3, [pc, #444]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a6e      	ldr	r2, [pc, #440]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	4b6c      	ldr	r3, [pc, #432]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a6b      	ldr	r2, [pc, #428]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d013      	beq.n	8004ca8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fd f870 	bl	8001d64 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fd f86c 	bl	8001d64 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	; 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e21f      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9a:	4b61      	ldr	r3, [pc, #388]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0xdc>
 8004ca6:	e014      	b.n	8004cd2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fd f85c 	bl	8001d64 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb0:	f7fd f858 	bl	8001d64 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b64      	cmp	r3, #100	; 0x64
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e20b      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc2:	4b57      	ldr	r3, [pc, #348]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x104>
 8004cce:	e000      	b.n	8004cd2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d06f      	beq.n	8004dbe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cde:	4b50      	ldr	r3, [pc, #320]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d017      	beq.n	8004d1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cea:	4b4d      	ldr	r3, [pc, #308]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d105      	bne.n	8004d02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cf6:	4b4a      	ldr	r3, [pc, #296]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00b      	beq.n	8004d1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d02:	4b47      	ldr	r3, [pc, #284]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d0a:	2b0c      	cmp	r3, #12
 8004d0c:	d11c      	bne.n	8004d48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d0e:	4b44      	ldr	r3, [pc, #272]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d116      	bne.n	8004d48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1a:	4b41      	ldr	r3, [pc, #260]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_RCC_OscConfig+0x186>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d001      	beq.n	8004d32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e1d3      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d32:	4b3b      	ldr	r3, [pc, #236]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	4937      	ldr	r1, [pc, #220]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d46:	e03a      	b.n	8004dbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d020      	beq.n	8004d92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d50:	4b34      	ldr	r3, [pc, #208]	; (8004e24 <HAL_RCC_OscConfig+0x278>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fd f805 	bl	8001d64 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d5e:	f7fd f801 	bl	8001d64 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e1b4      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d70:	4b2b      	ldr	r3, [pc, #172]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7c:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4925      	ldr	r1, [pc, #148]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	600b      	str	r3, [r1, #0]
 8004d90:	e015      	b.n	8004dbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d92:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <HAL_RCC_OscConfig+0x278>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fc ffe4 	bl	8001d64 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da0:	f7fc ffe0 	bl	8001d64 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e193      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db2:	4b1b      	ldr	r3, [pc, #108]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f0      	bne.n	8004da0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d036      	beq.n	8004e38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d016      	beq.n	8004e00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <HAL_RCC_OscConfig+0x27c>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd8:	f7fc ffc4 	bl	8001d64 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de0:	f7fc ffc0 	bl	8001d64 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e173      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df2:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <HAL_RCC_OscConfig+0x274>)
 8004df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0x234>
 8004dfe:	e01b      	b.n	8004e38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <HAL_RCC_OscConfig+0x27c>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e06:	f7fc ffad 	bl	8001d64 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e0c:	e00e      	b.n	8004e2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e0e:	f7fc ffa9 	bl	8001d64 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d907      	bls.n	8004e2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e15c      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
 8004e20:	40023800 	.word	0x40023800
 8004e24:	42470000 	.word	0x42470000
 8004e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e2c:	4b8a      	ldr	r3, [pc, #552]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1ea      	bne.n	8004e0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8097 	beq.w	8004f74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e46:	2300      	movs	r3, #0
 8004e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e4a:	4b83      	ldr	r3, [pc, #524]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10f      	bne.n	8004e76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e56:	2300      	movs	r3, #0
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	4b7f      	ldr	r3, [pc, #508]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	4a7e      	ldr	r2, [pc, #504]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e64:	6413      	str	r3, [r2, #64]	; 0x40
 8004e66:	4b7c      	ldr	r3, [pc, #496]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e72:	2301      	movs	r3, #1
 8004e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e76:	4b79      	ldr	r3, [pc, #484]	; (800505c <HAL_RCC_OscConfig+0x4b0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d118      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e82:	4b76      	ldr	r3, [pc, #472]	; (800505c <HAL_RCC_OscConfig+0x4b0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a75      	ldr	r2, [pc, #468]	; (800505c <HAL_RCC_OscConfig+0x4b0>)
 8004e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e8e:	f7fc ff69 	bl	8001d64 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e96:	f7fc ff65 	bl	8001d64 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e118      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea8:	4b6c      	ldr	r3, [pc, #432]	; (800505c <HAL_RCC_OscConfig+0x4b0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d106      	bne.n	8004eca <HAL_RCC_OscConfig+0x31e>
 8004ebc:	4b66      	ldr	r3, [pc, #408]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec0:	4a65      	ldr	r2, [pc, #404]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec8:	e01c      	b.n	8004f04 <HAL_RCC_OscConfig+0x358>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b05      	cmp	r3, #5
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCC_OscConfig+0x340>
 8004ed2:	4b61      	ldr	r3, [pc, #388]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	4a60      	ldr	r2, [pc, #384]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004ed8:	f043 0304 	orr.w	r3, r3, #4
 8004edc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ede:	4b5e      	ldr	r3, [pc, #376]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	4a5d      	ldr	r2, [pc, #372]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eea:	e00b      	b.n	8004f04 <HAL_RCC_OscConfig+0x358>
 8004eec:	4b5a      	ldr	r3, [pc, #360]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	4a59      	ldr	r2, [pc, #356]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef8:	4b57      	ldr	r3, [pc, #348]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	4a56      	ldr	r2, [pc, #344]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004efe:	f023 0304 	bic.w	r3, r3, #4
 8004f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d015      	beq.n	8004f38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0c:	f7fc ff2a 	bl	8001d64 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f14:	f7fc ff26 	bl	8001d64 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e0d7      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2a:	4b4b      	ldr	r3, [pc, #300]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0ee      	beq.n	8004f14 <HAL_RCC_OscConfig+0x368>
 8004f36:	e014      	b.n	8004f62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fc ff14 	bl	8001d64 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f3e:	e00a      	b.n	8004f56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f40:	f7fc ff10 	bl	8001d64 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e0c1      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f56:	4b40      	ldr	r3, [pc, #256]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1ee      	bne.n	8004f40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d105      	bne.n	8004f74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f68:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	4a3a      	ldr	r2, [pc, #232]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 80ad 	beq.w	80050d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f7e:	4b36      	ldr	r3, [pc, #216]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d060      	beq.n	800504c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d145      	bne.n	800501e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f92:	4b33      	ldr	r3, [pc, #204]	; (8005060 <HAL_RCC_OscConfig+0x4b4>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fc fee4 	bl	8001d64 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa0:	f7fc fee0 	bl	8001d64 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e093      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb2:	4b29      	ldr	r3, [pc, #164]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69da      	ldr	r2, [r3, #28]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	019b      	lsls	r3, r3, #6
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	041b      	lsls	r3, r3, #16
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	061b      	lsls	r3, r3, #24
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	071b      	lsls	r3, r3, #28
 8004fea:	491b      	ldr	r1, [pc, #108]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <HAL_RCC_OscConfig+0x4b4>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff6:	f7fc feb5 	bl	8001d64 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffe:	f7fc feb1 	bl	8001d64 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e064      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005010:	4b11      	ldr	r3, [pc, #68]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x452>
 800501c:	e05c      	b.n	80050d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <HAL_RCC_OscConfig+0x4b4>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7fc fe9e 	bl	8001d64 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800502c:	f7fc fe9a 	bl	8001d64 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e04d      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503e:	4b06      	ldr	r3, [pc, #24]	; (8005058 <HAL_RCC_OscConfig+0x4ac>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x480>
 800504a:	e045      	b.n	80050d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d107      	bne.n	8005064 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e040      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
 8005058:	40023800 	.word	0x40023800
 800505c:	40007000 	.word	0x40007000
 8005060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005064:	4b1f      	ldr	r3, [pc, #124]	; (80050e4 <HAL_RCC_OscConfig+0x538>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d030      	beq.n	80050d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800507c:	429a      	cmp	r2, r3
 800507e:	d129      	bne.n	80050d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508a:	429a      	cmp	r2, r3
 800508c:	d122      	bne.n	80050d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005094:	4013      	ands	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800509a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800509c:	4293      	cmp	r3, r2
 800509e:	d119      	bne.n	80050d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	3b01      	subs	r3, #1
 80050ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d10f      	bne.n	80050d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d107      	bne.n	80050d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40023800 	.word	0x40023800

080050e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e07b      	b.n	80051f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d108      	bne.n	8005114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510a:	d009      	beq.n	8005120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	61da      	str	r2, [r3, #28]
 8005112:	e005      	b.n	8005120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fc fb4a 	bl	80017d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005156:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a4:	ea42 0103 	orr.w	r1, r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	f003 0104 	and.w	r1, r3, #4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	f003 0210 	and.w	r2, r3, #16
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69da      	ldr	r2, [r3, #28]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b088      	sub	sp, #32
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	603b      	str	r3, [r7, #0]
 8005206:	4613      	mov	r3, r2
 8005208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_SPI_Transmit+0x22>
 8005218:	2302      	movs	r3, #2
 800521a:	e12d      	b.n	8005478 <HAL_SPI_Transmit+0x27e>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005224:	f7fc fd9e 	bl	8001d64 <HAL_GetTick>
 8005228:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800522a:	88fb      	ldrh	r3, [r7, #6]
 800522c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b01      	cmp	r3, #1
 8005238:	d002      	beq.n	8005240 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800523a:	2302      	movs	r3, #2
 800523c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800523e:	e116      	b.n	800546e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_SPI_Transmit+0x52>
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005250:	e10d      	b.n	800546e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2203      	movs	r2, #3
 8005256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	88fa      	ldrh	r2, [r7, #6]
 800526a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	88fa      	ldrh	r2, [r7, #6]
 8005270:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005298:	d10f      	bne.n	80052ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d007      	beq.n	80052d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e0:	d14f      	bne.n	8005382 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <HAL_SPI_Transmit+0xf6>
 80052ea:	8afb      	ldrh	r3, [r7, #22]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d142      	bne.n	8005376 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	881a      	ldrh	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	1c9a      	adds	r2, r3, #2
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800530a:	b29b      	uxth	r3, r3
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005314:	e02f      	b.n	8005376 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b02      	cmp	r3, #2
 8005322:	d112      	bne.n	800534a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	881a      	ldrh	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	1c9a      	adds	r2, r3, #2
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	86da      	strh	r2, [r3, #54]	; 0x36
 8005348:	e015      	b.n	8005376 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800534a:	f7fc fd0b 	bl	8001d64 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d803      	bhi.n	8005362 <HAL_SPI_Transmit+0x168>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d102      	bne.n	8005368 <HAL_SPI_Transmit+0x16e>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d106      	bne.n	8005376 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005374:	e07b      	b.n	800546e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ca      	bne.n	8005316 <HAL_SPI_Transmit+0x11c>
 8005380:	e050      	b.n	8005424 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_SPI_Transmit+0x196>
 800538a:	8afb      	ldrh	r3, [r7, #22]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d144      	bne.n	800541a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	7812      	ldrb	r2, [r2, #0]
 800539c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053b6:	e030      	b.n	800541a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d113      	bne.n	80053ee <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	7812      	ldrb	r2, [r2, #0]
 80053d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80053ec:	e015      	b.n	800541a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ee:	f7fc fcb9 	bl	8001d64 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d803      	bhi.n	8005406 <HAL_SPI_Transmit+0x20c>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005404:	d102      	bne.n	800540c <HAL_SPI_Transmit+0x212>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005418:	e029      	b.n	800546e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1c9      	bne.n	80053b8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fb73 	bl	8005b14 <SPI_EndRxTxTransaction>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005442:	2300      	movs	r3, #0
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e003      	b.n	800546e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005476:	7ffb      	ldrb	r3, [r7, #31]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3720      	adds	r7, #32
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08c      	sub	sp, #48	; 0x30
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800548e:	2301      	movs	r3, #1
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_SPI_TransmitReceive+0x26>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e198      	b.n	80057d8 <HAL_SPI_TransmitReceive+0x358>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054ae:	f7fc fc59 	bl	8001d64 <HAL_GetTick>
 80054b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054c4:	887b      	ldrh	r3, [r7, #2]
 80054c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d00f      	beq.n	80054f0 <HAL_SPI_TransmitReceive+0x70>
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d6:	d107      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x68>
 80054e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d003      	beq.n	80054f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054ee:	e16d      	b.n	80057cc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <HAL_SPI_TransmitReceive+0x82>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_SPI_TransmitReceive+0x82>
 80054fc:	887b      	ldrh	r3, [r7, #2]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005508:	e160      	b.n	80057cc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b04      	cmp	r3, #4
 8005514:	d003      	beq.n	800551e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2205      	movs	r2, #5
 800551a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	887a      	ldrh	r2, [r7, #2]
 800552e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	887a      	ldrh	r2, [r7, #2]
 8005534:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	887a      	ldrh	r2, [r7, #2]
 8005540:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	887a      	ldrh	r2, [r7, #2]
 8005546:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555e:	2b40      	cmp	r3, #64	; 0x40
 8005560:	d007      	beq.n	8005572 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005570:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800557a:	d17c      	bne.n	8005676 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <HAL_SPI_TransmitReceive+0x10a>
 8005584:	8b7b      	ldrh	r3, [r7, #26]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d16a      	bne.n	8005660 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558e:	881a      	ldrh	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	1c9a      	adds	r2, r3, #2
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ae:	e057      	b.n	8005660 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d11b      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x176>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d016      	beq.n	80055f6 <HAL_SPI_TransmitReceive+0x176>
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d113      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	881a      	ldrh	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	1c9a      	adds	r2, r3, #2
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	d119      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x1b8>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d014      	beq.n	8005638 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	b292      	uxth	r2, r2
 800561a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	1c9a      	adds	r2, r3, #2
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005634:	2301      	movs	r3, #1
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005638:	f7fc fb94 	bl	8001d64 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005644:	429a      	cmp	r2, r3
 8005646:	d80b      	bhi.n	8005660 <HAL_SPI_TransmitReceive+0x1e0>
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d007      	beq.n	8005660 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800565e:	e0b5      	b.n	80057cc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1a2      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x130>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d19d      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x130>
 8005674:	e080      	b.n	8005778 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x204>
 800567e:	8b7b      	ldrh	r3, [r7, #26]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d16f      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	7812      	ldrb	r2, [r2, #0]
 8005690:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056aa:	e05b      	b.n	8005764 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d11c      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x274>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d017      	beq.n	80056f4 <HAL_SPI_TransmitReceive+0x274>
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d114      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	7812      	ldrb	r2, [r2, #0]
 80056d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d119      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x2b6>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d014      	beq.n	8005736 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005732:	2301      	movs	r3, #1
 8005734:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005736:	f7fc fb15 	bl	8001d64 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005742:	429a      	cmp	r2, r3
 8005744:	d803      	bhi.n	800574e <HAL_SPI_TransmitReceive+0x2ce>
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d102      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x2d4>
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	2b00      	cmp	r3, #0
 8005752:	d107      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005762:	e033      	b.n	80057cc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d19e      	bne.n	80056ac <HAL_SPI_TransmitReceive+0x22c>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d199      	bne.n	80056ac <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f9c9 	bl	8005b14 <SPI_EndRxTxTransaction>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d006      	beq.n	8005796 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005794:	e01a      	b.n	80057cc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c2:	e003      	b.n	80057cc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3730      	adds	r7, #48	; 0x30
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10e      	bne.n	8005820 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d004      	beq.n	8005820 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	4798      	blx	r3
    return;
 800581e:	e0ce      	b.n	80059be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <HAL_SPI_IRQHandler+0x5e>
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
    return;
 800583c:	e0bf      	b.n	80059be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10a      	bne.n	800585e <HAL_SPI_IRQHandler+0x7e>
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d105      	bne.n	800585e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80b0 	beq.w	80059be <HAL_SPI_IRQHandler+0x1de>
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80aa 	beq.w	80059be <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d023      	beq.n	80058bc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b03      	cmp	r3, #3
 800587e:	d011      	beq.n	80058a4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005884:	f043 0204 	orr.w	r2, r3, #4
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	e00b      	b.n	80058bc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058a4:	2300      	movs	r3, #0
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	693b      	ldr	r3, [r7, #16]
        return;
 80058ba:	e080      	b.n	80059be <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d014      	beq.n	80058f0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ca:	f043 0201 	orr.w	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00c      	beq.n	8005914 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fe:	f043 0208 	orr.w	r2, r3, #8
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005906:	2300      	movs	r3, #0
 8005908:	60bb      	str	r3, [r7, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	60bb      	str	r3, [r7, #8]
 8005912:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005918:	2b00      	cmp	r3, #0
 800591a:	d04f      	beq.n	80059bc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800592a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d104      	bne.n	8005948 <HAL_SPI_IRQHandler+0x168>
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d034      	beq.n	80059b2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0203 	bic.w	r2, r2, #3
 8005956:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d011      	beq.n	8005984 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005964:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <HAL_SPI_IRQHandler+0x1e4>)
 8005966:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800596c:	4618      	mov	r0, r3
 800596e:	f7fc fbe9 	bl	8002144 <HAL_DMA_Abort_IT>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005988:	2b00      	cmp	r3, #0
 800598a:	d016      	beq.n	80059ba <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005990:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <HAL_SPI_IRQHandler+0x1e4>)
 8005992:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005998:	4618      	mov	r0, r3
 800599a:	f7fc fbd3 	bl	8002144 <HAL_DMA_Abort_IT>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80059b0:	e003      	b.n	80059ba <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f808 	bl	80059c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80059b8:	e000      	b.n	80059bc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80059ba:	bf00      	nop
    return;
 80059bc:	bf00      	nop
  }
}
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	080059dd 	.word	0x080059dd

080059c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff ffe6 	bl	80059c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	4613      	mov	r3, r2
 8005a12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a14:	f7fc f9a6 	bl	8001d64 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	4413      	add	r3, r2
 8005a22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a24:	f7fc f99e 	bl	8001d64 <HAL_GetTick>
 8005a28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a2a:	4b39      	ldr	r3, [pc, #228]	; (8005b10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	015b      	lsls	r3, r3, #5
 8005a30:	0d1b      	lsrs	r3, r3, #20
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	fb02 f303 	mul.w	r3, r2, r3
 8005a38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a3a:	e054      	b.n	8005ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d050      	beq.n	8005ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a44:	f7fc f98e 	bl	8001d64 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d902      	bls.n	8005a5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d13d      	bne.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a72:	d111      	bne.n	8005a98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a7c:	d004      	beq.n	8005a88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a86:	d107      	bne.n	8005a98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa0:	d10f      	bne.n	8005ac2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ac0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e017      	b.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4013      	ands	r3, r2
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	bf0c      	ite	eq
 8005af6:	2301      	moveq	r3, #1
 8005af8:	2300      	movne	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	79fb      	ldrb	r3, [r7, #7]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d19b      	bne.n	8005a3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000000 	.word	0x20000000

08005b14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2201      	movs	r2, #1
 8005b28:	2102      	movs	r1, #2
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff ff6a 	bl	8005a04 <SPI_WaitFlagStateUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	f043 0220 	orr.w	r2, r3, #32
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e032      	b.n	8005bac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b46:	4b1b      	ldr	r3, [pc, #108]	; (8005bb4 <SPI_EndRxTxTransaction+0xa0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1b      	ldr	r2, [pc, #108]	; (8005bb8 <SPI_EndRxTxTransaction+0xa4>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	0d5b      	lsrs	r3, r3, #21
 8005b52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b56:	fb02 f303 	mul.w	r3, r2, r3
 8005b5a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b64:	d112      	bne.n	8005b8c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2180      	movs	r1, #128	; 0x80
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7ff ff47 	bl	8005a04 <SPI_WaitFlagStateUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d016      	beq.n	8005baa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b80:	f043 0220 	orr.w	r2, r3, #32
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e00f      	b.n	8005bac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba2:	2b80      	cmp	r3, #128	; 0x80
 8005ba4:	d0f2      	beq.n	8005b8c <SPI_EndRxTxTransaction+0x78>
 8005ba6:	e000      	b.n	8005baa <SPI_EndRxTxTransaction+0x96>
        break;
 8005ba8:	bf00      	nop
  }

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20000000 	.word	0x20000000
 8005bb8:	165e9f81 	.word	0x165e9f81

08005bbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e042      	b.n	8005c54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fb feac 	bl	8001940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2224      	movs	r2, #36	; 0x24
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f82b 	bl	8005c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695a      	ldr	r2, [r3, #20]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c60:	b0c0      	sub	sp, #256	; 0x100
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c78:	68d9      	ldr	r1, [r3, #12]
 8005c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	ea40 0301 	orr.w	r3, r0, r1
 8005c84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cb4:	f021 010c 	bic.w	r1, r1, #12
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cc2:	430b      	orrs	r3, r1
 8005cc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd6:	6999      	ldr	r1, [r3, #24]
 8005cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	ea40 0301 	orr.w	r3, r0, r1
 8005ce2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4b8f      	ldr	r3, [pc, #572]	; (8005f28 <UART_SetConfig+0x2cc>)
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d005      	beq.n	8005cfc <UART_SetConfig+0xa0>
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4b8d      	ldr	r3, [pc, #564]	; (8005f2c <UART_SetConfig+0x2d0>)
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d104      	bne.n	8005d06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cfc:	f7fe f9e8 	bl	80040d0 <HAL_RCC_GetPCLK2Freq>
 8005d00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d04:	e003      	b.n	8005d0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d06:	f7fe f9cf 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8005d0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d18:	f040 810c 	bne.w	8005f34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d20:	2200      	movs	r2, #0
 8005d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d2e:	4622      	mov	r2, r4
 8005d30:	462b      	mov	r3, r5
 8005d32:	1891      	adds	r1, r2, r2
 8005d34:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d36:	415b      	adcs	r3, r3
 8005d38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d3e:	4621      	mov	r1, r4
 8005d40:	eb12 0801 	adds.w	r8, r2, r1
 8005d44:	4629      	mov	r1, r5
 8005d46:	eb43 0901 	adc.w	r9, r3, r1
 8005d4a:	f04f 0200 	mov.w	r2, #0
 8005d4e:	f04f 0300 	mov.w	r3, #0
 8005d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d5e:	4690      	mov	r8, r2
 8005d60:	4699      	mov	r9, r3
 8005d62:	4623      	mov	r3, r4
 8005d64:	eb18 0303 	adds.w	r3, r8, r3
 8005d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d6c:	462b      	mov	r3, r5
 8005d6e:	eb49 0303 	adc.w	r3, r9, r3
 8005d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	18db      	adds	r3, r3, r3
 8005d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d90:	4613      	mov	r3, r2
 8005d92:	eb42 0303 	adc.w	r3, r2, r3
 8005d96:	657b      	str	r3, [r7, #84]	; 0x54
 8005d98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005da0:	f7fa ff92 	bl	8000cc8 <__aeabi_uldivmod>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4b61      	ldr	r3, [pc, #388]	; (8005f30 <UART_SetConfig+0x2d4>)
 8005daa:	fba3 2302 	umull	r2, r3, r3, r2
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	011c      	lsls	r4, r3, #4
 8005db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005dc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	1891      	adds	r1, r2, r2
 8005dca:	64b9      	str	r1, [r7, #72]	; 0x48
 8005dcc:	415b      	adcs	r3, r3
 8005dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	eb12 0a01 	adds.w	sl, r2, r1
 8005dda:	4649      	mov	r1, r9
 8005ddc:	eb43 0b01 	adc.w	fp, r3, r1
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005df0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005df4:	4692      	mov	sl, r2
 8005df6:	469b      	mov	fp, r3
 8005df8:	4643      	mov	r3, r8
 8005dfa:	eb1a 0303 	adds.w	r3, sl, r3
 8005dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e02:	464b      	mov	r3, r9
 8005e04:	eb4b 0303 	adc.w	r3, fp, r3
 8005e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e20:	460b      	mov	r3, r1
 8005e22:	18db      	adds	r3, r3, r3
 8005e24:	643b      	str	r3, [r7, #64]	; 0x40
 8005e26:	4613      	mov	r3, r2
 8005e28:	eb42 0303 	adc.w	r3, r2, r3
 8005e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e36:	f7fa ff47 	bl	8000cc8 <__aeabi_uldivmod>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4b3b      	ldr	r3, [pc, #236]	; (8005f30 <UART_SetConfig+0x2d4>)
 8005e42:	fba3 2301 	umull	r2, r3, r3, r1
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	2264      	movs	r2, #100	; 0x64
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	1acb      	subs	r3, r1, r3
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e56:	4b36      	ldr	r3, [pc, #216]	; (8005f30 <UART_SetConfig+0x2d4>)
 8005e58:	fba3 2302 	umull	r2, r3, r3, r2
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e64:	441c      	add	r4, r3
 8005e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e78:	4642      	mov	r2, r8
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	1891      	adds	r1, r2, r2
 8005e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e80:	415b      	adcs	r3, r3
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e88:	4641      	mov	r1, r8
 8005e8a:	1851      	adds	r1, r2, r1
 8005e8c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e8e:	4649      	mov	r1, r9
 8005e90:	414b      	adcs	r3, r1
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ea0:	4659      	mov	r1, fp
 8005ea2:	00cb      	lsls	r3, r1, #3
 8005ea4:	4651      	mov	r1, sl
 8005ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eaa:	4651      	mov	r1, sl
 8005eac:	00ca      	lsls	r2, r1, #3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	189b      	adds	r3, r3, r2
 8005eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ebc:	464b      	mov	r3, r9
 8005ebe:	460a      	mov	r2, r1
 8005ec0:	eb42 0303 	adc.w	r3, r2, r3
 8005ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ed4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005edc:	460b      	mov	r3, r1
 8005ede:	18db      	adds	r3, r3, r3
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	eb42 0303 	adc.w	r3, r2, r3
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ef2:	f7fa fee9 	bl	8000cc8 <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <UART_SetConfig+0x2d4>)
 8005efc:	fba3 1302 	umull	r1, r3, r3, r2
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	2164      	movs	r1, #100	; 0x64
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	3332      	adds	r3, #50	; 0x32
 8005f0e:	4a08      	ldr	r2, [pc, #32]	; (8005f30 <UART_SetConfig+0x2d4>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	f003 0207 	and.w	r2, r3, #7
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4422      	add	r2, r4
 8005f22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f24:	e106      	b.n	8006134 <UART_SetConfig+0x4d8>
 8005f26:	bf00      	nop
 8005f28:	40011000 	.word	0x40011000
 8005f2c:	40011400 	.word	0x40011400
 8005f30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f46:	4642      	mov	r2, r8
 8005f48:	464b      	mov	r3, r9
 8005f4a:	1891      	adds	r1, r2, r2
 8005f4c:	6239      	str	r1, [r7, #32]
 8005f4e:	415b      	adcs	r3, r3
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
 8005f52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f56:	4641      	mov	r1, r8
 8005f58:	1854      	adds	r4, r2, r1
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	eb43 0501 	adc.w	r5, r3, r1
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	00eb      	lsls	r3, r5, #3
 8005f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f6e:	00e2      	lsls	r2, r4, #3
 8005f70:	4614      	mov	r4, r2
 8005f72:	461d      	mov	r5, r3
 8005f74:	4643      	mov	r3, r8
 8005f76:	18e3      	adds	r3, r4, r3
 8005f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f7c:	464b      	mov	r3, r9
 8005f7e:	eb45 0303 	adc.w	r3, r5, r3
 8005f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	008b      	lsls	r3, r1, #2
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fac:	4621      	mov	r1, r4
 8005fae:	008a      	lsls	r2, r1, #2
 8005fb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005fb4:	f7fa fe88 	bl	8000cc8 <__aeabi_uldivmod>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4b60      	ldr	r3, [pc, #384]	; (8006140 <UART_SetConfig+0x4e4>)
 8005fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	011c      	lsls	r4, r3, #4
 8005fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005fd8:	4642      	mov	r2, r8
 8005fda:	464b      	mov	r3, r9
 8005fdc:	1891      	adds	r1, r2, r2
 8005fde:	61b9      	str	r1, [r7, #24]
 8005fe0:	415b      	adcs	r3, r3
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fe8:	4641      	mov	r1, r8
 8005fea:	1851      	adds	r1, r2, r1
 8005fec:	6139      	str	r1, [r7, #16]
 8005fee:	4649      	mov	r1, r9
 8005ff0:	414b      	adcs	r3, r1
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006000:	4659      	mov	r1, fp
 8006002:	00cb      	lsls	r3, r1, #3
 8006004:	4651      	mov	r1, sl
 8006006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800600a:	4651      	mov	r1, sl
 800600c:	00ca      	lsls	r2, r1, #3
 800600e:	4610      	mov	r0, r2
 8006010:	4619      	mov	r1, r3
 8006012:	4603      	mov	r3, r0
 8006014:	4642      	mov	r2, r8
 8006016:	189b      	adds	r3, r3, r2
 8006018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800601c:	464b      	mov	r3, r9
 800601e:	460a      	mov	r2, r1
 8006020:	eb42 0303 	adc.w	r3, r2, r3
 8006024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	67bb      	str	r3, [r7, #120]	; 0x78
 8006032:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006040:	4649      	mov	r1, r9
 8006042:	008b      	lsls	r3, r1, #2
 8006044:	4641      	mov	r1, r8
 8006046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800604a:	4641      	mov	r1, r8
 800604c:	008a      	lsls	r2, r1, #2
 800604e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006052:	f7fa fe39 	bl	8000cc8 <__aeabi_uldivmod>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4611      	mov	r1, r2
 800605c:	4b38      	ldr	r3, [pc, #224]	; (8006140 <UART_SetConfig+0x4e4>)
 800605e:	fba3 2301 	umull	r2, r3, r3, r1
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	2264      	movs	r2, #100	; 0x64
 8006066:	fb02 f303 	mul.w	r3, r2, r3
 800606a:	1acb      	subs	r3, r1, r3
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	3332      	adds	r3, #50	; 0x32
 8006070:	4a33      	ldr	r2, [pc, #204]	; (8006140 <UART_SetConfig+0x4e4>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800607c:	441c      	add	r4, r3
 800607e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006082:	2200      	movs	r2, #0
 8006084:	673b      	str	r3, [r7, #112]	; 0x70
 8006086:	677a      	str	r2, [r7, #116]	; 0x74
 8006088:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800608c:	4642      	mov	r2, r8
 800608e:	464b      	mov	r3, r9
 8006090:	1891      	adds	r1, r2, r2
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	415b      	adcs	r3, r3
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800609c:	4641      	mov	r1, r8
 800609e:	1851      	adds	r1, r2, r1
 80060a0:	6039      	str	r1, [r7, #0]
 80060a2:	4649      	mov	r1, r9
 80060a4:	414b      	adcs	r3, r1
 80060a6:	607b      	str	r3, [r7, #4]
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060b4:	4659      	mov	r1, fp
 80060b6:	00cb      	lsls	r3, r1, #3
 80060b8:	4651      	mov	r1, sl
 80060ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060be:	4651      	mov	r1, sl
 80060c0:	00ca      	lsls	r2, r1, #3
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	4642      	mov	r2, r8
 80060ca:	189b      	adds	r3, r3, r2
 80060cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80060ce:	464b      	mov	r3, r9
 80060d0:	460a      	mov	r2, r1
 80060d2:	eb42 0303 	adc.w	r3, r2, r3
 80060d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	663b      	str	r3, [r7, #96]	; 0x60
 80060e2:	667a      	str	r2, [r7, #100]	; 0x64
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060f0:	4649      	mov	r1, r9
 80060f2:	008b      	lsls	r3, r1, #2
 80060f4:	4641      	mov	r1, r8
 80060f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060fa:	4641      	mov	r1, r8
 80060fc:	008a      	lsls	r2, r1, #2
 80060fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006102:	f7fa fde1 	bl	8000cc8 <__aeabi_uldivmod>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <UART_SetConfig+0x4e4>)
 800610c:	fba3 1302 	umull	r1, r3, r3, r2
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	2164      	movs	r1, #100	; 0x64
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	3332      	adds	r3, #50	; 0x32
 800611e:	4a08      	ldr	r2, [pc, #32]	; (8006140 <UART_SetConfig+0x4e4>)
 8006120:	fba2 2303 	umull	r2, r3, r2, r3
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	f003 020f 	and.w	r2, r3, #15
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4422      	add	r2, r4
 8006132:	609a      	str	r2, [r3, #8]
}
 8006134:	bf00      	nop
 8006136:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800613a:	46bd      	mov	sp, r7
 800613c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006140:	51eb851f 	.word	0x51eb851f

08006144 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006144:	b084      	sub	sp, #16
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	f107 001c 	add.w	r0, r7, #28
 8006152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006156:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800615a:	2b01      	cmp	r3, #1
 800615c:	d123      	bne.n	80061a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006186:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800618a:	2b01      	cmp	r3, #1
 800618c:	d105      	bne.n	800619a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 fadc 	bl	8007758 <USB_CoreReset>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]
 80061a4:	e01b      	b.n	80061de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 fad0 	bl	8007758 <USB_CoreReset>
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d106      	bne.n	80061d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
 80061d0:	e005      	b.n	80061de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061de:	7fbb      	ldrb	r3, [r7, #30]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d10b      	bne.n	80061fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f043 0206 	orr.w	r2, r3, #6
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f043 0220 	orr.w	r2, r3, #32
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006208:	b004      	add	sp, #16
 800620a:	4770      	bx	lr

0800620c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4613      	mov	r3, r2
 8006218:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d165      	bne.n	80062ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	4a41      	ldr	r2, [pc, #260]	; (8006328 <USB_SetTurnaroundTime+0x11c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d906      	bls.n	8006236 <USB_SetTurnaroundTime+0x2a>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4a40      	ldr	r2, [pc, #256]	; (800632c <USB_SetTurnaroundTime+0x120>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d202      	bcs.n	8006236 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006230:	230f      	movs	r3, #15
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	e062      	b.n	80062fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4a3c      	ldr	r2, [pc, #240]	; (800632c <USB_SetTurnaroundTime+0x120>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d306      	bcc.n	800624c <USB_SetTurnaroundTime+0x40>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4a3b      	ldr	r2, [pc, #236]	; (8006330 <USB_SetTurnaroundTime+0x124>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d202      	bcs.n	800624c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006246:	230e      	movs	r3, #14
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	e057      	b.n	80062fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4a38      	ldr	r2, [pc, #224]	; (8006330 <USB_SetTurnaroundTime+0x124>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d306      	bcc.n	8006262 <USB_SetTurnaroundTime+0x56>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4a37      	ldr	r2, [pc, #220]	; (8006334 <USB_SetTurnaroundTime+0x128>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d202      	bcs.n	8006262 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800625c:	230d      	movs	r3, #13
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	e04c      	b.n	80062fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4a33      	ldr	r2, [pc, #204]	; (8006334 <USB_SetTurnaroundTime+0x128>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d306      	bcc.n	8006278 <USB_SetTurnaroundTime+0x6c>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4a32      	ldr	r2, [pc, #200]	; (8006338 <USB_SetTurnaroundTime+0x12c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d802      	bhi.n	8006278 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006272:	230c      	movs	r3, #12
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	e041      	b.n	80062fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4a2f      	ldr	r2, [pc, #188]	; (8006338 <USB_SetTurnaroundTime+0x12c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d906      	bls.n	800628e <USB_SetTurnaroundTime+0x82>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4a2e      	ldr	r2, [pc, #184]	; (800633c <USB_SetTurnaroundTime+0x130>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d802      	bhi.n	800628e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006288:	230b      	movs	r3, #11
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	e036      	b.n	80062fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4a2a      	ldr	r2, [pc, #168]	; (800633c <USB_SetTurnaroundTime+0x130>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d906      	bls.n	80062a4 <USB_SetTurnaroundTime+0x98>
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4a29      	ldr	r2, [pc, #164]	; (8006340 <USB_SetTurnaroundTime+0x134>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d802      	bhi.n	80062a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800629e:	230a      	movs	r3, #10
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	e02b      	b.n	80062fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4a26      	ldr	r2, [pc, #152]	; (8006340 <USB_SetTurnaroundTime+0x134>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d906      	bls.n	80062ba <USB_SetTurnaroundTime+0xae>
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4a25      	ldr	r2, [pc, #148]	; (8006344 <USB_SetTurnaroundTime+0x138>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d202      	bcs.n	80062ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062b4:	2309      	movs	r3, #9
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	e020      	b.n	80062fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4a21      	ldr	r2, [pc, #132]	; (8006344 <USB_SetTurnaroundTime+0x138>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d306      	bcc.n	80062d0 <USB_SetTurnaroundTime+0xc4>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	4a20      	ldr	r2, [pc, #128]	; (8006348 <USB_SetTurnaroundTime+0x13c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d802      	bhi.n	80062d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062ca:	2308      	movs	r3, #8
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	e015      	b.n	80062fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <USB_SetTurnaroundTime+0x13c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d906      	bls.n	80062e6 <USB_SetTurnaroundTime+0xda>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4a1c      	ldr	r2, [pc, #112]	; (800634c <USB_SetTurnaroundTime+0x140>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d202      	bcs.n	80062e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062e0:	2307      	movs	r3, #7
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e00a      	b.n	80062fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80062e6:	2306      	movs	r3, #6
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	e007      	b.n	80062fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80062ec:	79fb      	ldrb	r3, [r7, #7]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80062f2:	2309      	movs	r3, #9
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	e001      	b.n	80062fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80062f8:	2309      	movs	r3, #9
 80062fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	029b      	lsls	r3, r3, #10
 8006310:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006314:	431a      	orrs	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	371c      	adds	r7, #28
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	00d8acbf 	.word	0x00d8acbf
 800632c:	00e4e1c0 	.word	0x00e4e1c0
 8006330:	00f42400 	.word	0x00f42400
 8006334:	01067380 	.word	0x01067380
 8006338:	011a499f 	.word	0x011a499f
 800633c:	01312cff 	.word	0x01312cff
 8006340:	014ca43f 	.word	0x014ca43f
 8006344:	016e3600 	.word	0x016e3600
 8006348:	01a6ab1f 	.word	0x01a6ab1f
 800634c:	01e84800 	.word	0x01e84800

08006350 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f043 0201 	orr.w	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f023 0201 	bic.w	r2, r3, #1
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d115      	bne.n	80063e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063c2:	200a      	movs	r0, #10
 80063c4:	f7fb fcda 	bl	8001d7c <HAL_Delay>
      ms += 10U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	330a      	adds	r3, #10
 80063cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 f933 	bl	800763a <USB_GetMode>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d01e      	beq.n	8006418 <USB_SetCurrentMode+0x84>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2bc7      	cmp	r3, #199	; 0xc7
 80063de:	d9f0      	bls.n	80063c2 <USB_SetCurrentMode+0x2e>
 80063e0:	e01a      	b.n	8006418 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d115      	bne.n	8006414 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063f4:	200a      	movs	r0, #10
 80063f6:	f7fb fcc1 	bl	8001d7c <HAL_Delay>
      ms += 10U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	330a      	adds	r3, #10
 80063fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 f91a 	bl	800763a <USB_GetMode>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <USB_SetCurrentMode+0x84>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2bc7      	cmp	r3, #199	; 0xc7
 8006410:	d9f0      	bls.n	80063f4 <USB_SetCurrentMode+0x60>
 8006412:	e001      	b.n	8006418 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e005      	b.n	8006424 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2bc8      	cmp	r3, #200	; 0xc8
 800641c:	d101      	bne.n	8006422 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800642c:	b084      	sub	sp, #16
 800642e:	b580      	push	{r7, lr}
 8006430:	b086      	sub	sp, #24
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800643a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006446:	2300      	movs	r3, #0
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	e009      	b.n	8006460 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	3340      	adds	r3, #64	; 0x40
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	2200      	movs	r2, #0
 8006458:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	3301      	adds	r3, #1
 800645e:	613b      	str	r3, [r7, #16]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b0e      	cmp	r3, #14
 8006464:	d9f2      	bls.n	800644c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006466:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800646a:	2b00      	cmp	r3, #0
 800646c:	d11c      	bne.n	80064a8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800647c:	f043 0302 	orr.w	r3, r3, #2
 8006480:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	e005      	b.n	80064b4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064ba:	461a      	mov	r2, r3
 80064bc:	2300      	movs	r3, #0
 80064be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064c0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10d      	bne.n	80064e4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064d0:	2100      	movs	r1, #0
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f968 	bl	80067a8 <USB_SetDevSpeed>
 80064d8:	e008      	b.n	80064ec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064da:	2101      	movs	r1, #1
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f963 	bl	80067a8 <USB_SetDevSpeed>
 80064e2:	e003      	b.n	80064ec <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064e4:	2103      	movs	r1, #3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f95e 	bl	80067a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064ec:	2110      	movs	r1, #16
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f8fa 	bl	80066e8 <USB_FlushTxFifo>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f924 	bl	800674c <USB_FlushRxFifo>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006514:	461a      	mov	r2, r3
 8006516:	2300      	movs	r3, #0
 8006518:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006520:	461a      	mov	r2, r3
 8006522:	2300      	movs	r3, #0
 8006524:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652c:	461a      	mov	r2, r3
 800652e:	2300      	movs	r3, #0
 8006530:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006532:	2300      	movs	r3, #0
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	e043      	b.n	80065c0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800654a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800654e:	d118      	bne.n	8006582 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006562:	461a      	mov	r2, r3
 8006564:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e013      	b.n	8006594 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006578:	461a      	mov	r2, r3
 800657a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	e008      	b.n	8006594 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658e:	461a      	mov	r2, r3
 8006590:	2300      	movs	r3, #0
 8006592:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a0:	461a      	mov	r2, r3
 80065a2:	2300      	movs	r3, #0
 80065a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b2:	461a      	mov	r2, r3
 80065b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	3301      	adds	r3, #1
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065c4:	461a      	mov	r2, r3
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d3b5      	bcc.n	8006538 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	e043      	b.n	800665a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e8:	d118      	bne.n	800661c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fc:	461a      	mov	r2, r3
 80065fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	e013      	b.n	800662e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006612:	461a      	mov	r2, r3
 8006614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e008      	b.n	800662e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	461a      	mov	r2, r3
 800662a:	2300      	movs	r3, #0
 800662c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663a:	461a      	mov	r2, r3
 800663c:	2300      	movs	r3, #0
 800663e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	461a      	mov	r2, r3
 800664e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006652:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	3301      	adds	r3, #1
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800665e:	461a      	mov	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4293      	cmp	r3, r2
 8006664:	d3b5      	bcc.n	80065d2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006678:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006686:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006688:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800668c:	2b00      	cmp	r3, #0
 800668e:	d105      	bne.n	800669c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f043 0210 	orr.w	r2, r3, #16
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	699a      	ldr	r2, [r3, #24]
 80066a0:	4b10      	ldr	r3, [pc, #64]	; (80066e4 <USB_DevInit+0x2b8>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	f043 0208 	orr.w	r2, r3, #8
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d107      	bne.n	80066d4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066cc:	f043 0304 	orr.w	r3, r3, #4
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066e0:	b004      	add	sp, #16
 80066e2:	4770      	bx	lr
 80066e4:	803c3800 	.word	0x803c3800

080066e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3301      	adds	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006702:	d901      	bls.n	8006708 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e01b      	b.n	8006740 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	daf2      	bge.n	80066f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	019b      	lsls	r3, r3, #6
 8006718:	f043 0220 	orr.w	r2, r3, #32
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3301      	adds	r3, #1
 8006724:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800672c:	d901      	bls.n	8006732 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e006      	b.n	8006740 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b20      	cmp	r3, #32
 800673c:	d0f0      	beq.n	8006720 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3301      	adds	r3, #1
 800675c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006764:	d901      	bls.n	800676a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e018      	b.n	800679c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	daf2      	bge.n	8006758 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2210      	movs	r2, #16
 800677a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3301      	adds	r3, #1
 8006780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006788:	d901      	bls.n	800678e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e006      	b.n	800679c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f003 0310 	and.w	r3, r3, #16
 8006796:	2b10      	cmp	r3, #16
 8006798:	d0f0      	beq.n	800677c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	68f9      	ldr	r1, [r7, #12]
 80067c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067c8:	4313      	orrs	r3, r2
 80067ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80067da:	b480      	push	{r7}
 80067dc:	b087      	sub	sp, #28
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 0306 	and.w	r3, r3, #6
 80067f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80067fa:	2300      	movs	r3, #0
 80067fc:	75fb      	strb	r3, [r7, #23]
 80067fe:	e00a      	b.n	8006816 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b02      	cmp	r3, #2
 8006804:	d002      	beq.n	800680c <USB_GetDevSpeed+0x32>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b06      	cmp	r3, #6
 800680a:	d102      	bne.n	8006812 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800680c:	2302      	movs	r3, #2
 800680e:	75fb      	strb	r3, [r7, #23]
 8006810:	e001      	b.n	8006816 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006812:	230f      	movs	r3, #15
 8006814:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
}
 8006818:	4618      	mov	r0, r3
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d13a      	bne.n	80068b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	2101      	movs	r1, #1
 8006852:	fa01 f303 	lsl.w	r3, r1, r3
 8006856:	b29b      	uxth	r3, r3
 8006858:	68f9      	ldr	r1, [r7, #12]
 800685a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800685e:	4313      	orrs	r3, r2
 8006860:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d155      	bne.n	8006924 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	791b      	ldrb	r3, [r3, #4]
 8006892:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006894:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	059b      	lsls	r3, r3, #22
 800689a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800689c:	4313      	orrs	r3, r2
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	0151      	lsls	r1, r2, #5
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	440a      	add	r2, r1
 80068a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	e036      	b.n	8006924 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068bc:	69da      	ldr	r2, [r3, #28]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	2101      	movs	r1, #1
 80068c8:	fa01 f303 	lsl.w	r3, r1, r3
 80068cc:	041b      	lsls	r3, r3, #16
 80068ce:	68f9      	ldr	r1, [r7, #12]
 80068d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068d4:	4313      	orrs	r3, r2
 80068d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d11a      	bne.n	8006924 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	791b      	ldrb	r3, [r3, #4]
 8006908:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800690a:	430b      	orrs	r3, r1
 800690c:	4313      	orrs	r3, r2
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	440a      	add	r2, r1
 8006916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800691a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006922:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
	...

08006934 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	785b      	ldrb	r3, [r3, #1]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d161      	bne.n	8006a14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006966:	d11f      	bne.n	80069a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	0151      	lsls	r1, r2, #5
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	440a      	add	r2, r1
 800697e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006982:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006986:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	0151      	lsls	r1, r2, #5
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	440a      	add	r2, r1
 800699e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	2101      	movs	r1, #1
 80069ba:	fa01 f303 	lsl.w	r3, r1, r3
 80069be:	b29b      	uxth	r3, r3
 80069c0:	43db      	mvns	r3, r3
 80069c2:	68f9      	ldr	r1, [r7, #12]
 80069c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069c8:	4013      	ands	r3, r2
 80069ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d2:	69da      	ldr	r2, [r3, #28]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	2101      	movs	r1, #1
 80069de:	fa01 f303 	lsl.w	r3, r1, r3
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	43db      	mvns	r3, r3
 80069e6:	68f9      	ldr	r1, [r7, #12]
 80069e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069ec:	4013      	ands	r3, r2
 80069ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	0159      	lsls	r1, r3, #5
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	440b      	add	r3, r1
 8006a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4b35      	ldr	r3, [pc, #212]	; (8006ae4 <USB_DeactivateEndpoint+0x1b0>)
 8006a0e:	4013      	ands	r3, r2
 8006a10:	600b      	str	r3, [r1, #0]
 8006a12:	e060      	b.n	8006ad6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a2a:	d11f      	bne.n	8006a6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	0151      	lsls	r1, r2, #5
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	440a      	add	r2, r1
 8006a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a82:	041b      	lsls	r3, r3, #16
 8006a84:	43db      	mvns	r3, r3
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	43db      	mvns	r3, r3
 8006aaa:	68f9      	ldr	r1, [r7, #12]
 8006aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	0159      	lsls	r1, r3, #5
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	440b      	add	r3, r1
 8006aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <USB_DeactivateEndpoint+0x1b4>)
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	ec337800 	.word	0xec337800
 8006ae8:	eff37800 	.word	0xeff37800

08006aec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08a      	sub	sp, #40	; 0x28
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	f040 817a 	bne.w	8006e02 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d132      	bne.n	8006b7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	0151      	lsls	r1, r2, #5
 8006b28:	69fa      	ldr	r2, [r7, #28]
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b74:	0cdb      	lsrs	r3, r3, #19
 8006b76:	04db      	lsls	r3, r3, #19
 8006b78:	6113      	str	r3, [r2, #16]
 8006b7a:	e092      	b.n	8006ca2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	0151      	lsls	r1, r2, #5
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	440a      	add	r2, r1
 8006b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b96:	0cdb      	lsrs	r3, r3, #19
 8006b98:	04db      	lsls	r3, r3, #19
 8006b9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bbe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d11a      	bne.n	8006bfc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	691a      	ldr	r2, [r3, #16]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d903      	bls.n	8006bda <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	69fa      	ldr	r2, [r7, #28]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bf8:	6113      	str	r3, [r2, #16]
 8006bfa:	e01b      	b.n	8006c34 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	6919      	ldr	r1, [r3, #16]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	440b      	add	r3, r1
 8006c14:	1e59      	subs	r1, r3, #1
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c1e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c20:	4ba2      	ldr	r3, [pc, #648]	; (8006eac <USB_EPStartXfer+0x3c0>)
 8006c22:	400b      	ands	r3, r1
 8006c24:	69b9      	ldr	r1, [r7, #24]
 8006c26:	0148      	lsls	r0, r1, #5
 8006c28:	69f9      	ldr	r1, [r7, #28]
 8006c2a:	4401      	add	r1, r0
 8006c2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c30:	4313      	orrs	r3, r2
 8006c32:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c40:	691a      	ldr	r2, [r3, #16]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c4a:	69b9      	ldr	r1, [r7, #24]
 8006c4c:	0148      	lsls	r0, r1, #5
 8006c4e:	69f9      	ldr	r1, [r7, #28]
 8006c50:	4401      	add	r1, r0
 8006c52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c56:	4313      	orrs	r3, r2
 8006c58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	791b      	ldrb	r3, [r3, #4]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d11f      	bne.n	8006ca2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	0151      	lsls	r1, r2, #5
 8006c74:	69fa      	ldr	r2, [r7, #28]
 8006c76:	440a      	add	r2, r1
 8006c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ca0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d14b      	bne.n	8006d40 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d009      	beq.n	8006cc4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	791b      	ldrb	r3, [r3, #4]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d128      	bne.n	8006d1e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d110      	bne.n	8006cfe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	e00f      	b.n	8006d1e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	0151      	lsls	r1, r2, #5
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	440a      	add	r2, r1
 8006d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	e165      	b.n	800700c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	0151      	lsls	r1, r2, #5
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	440a      	add	r2, r1
 8006d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	791b      	ldrb	r3, [r3, #4]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d015      	beq.n	8006d94 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 814d 	beq.w	800700c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	2101      	movs	r1, #1
 8006d84:	fa01 f303 	lsl.w	r3, r1, r3
 8006d88:	69f9      	ldr	r1, [r7, #28]
 8006d8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	634b      	str	r3, [r1, #52]	; 0x34
 8006d92:	e13b      	b.n	800700c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d110      	bne.n	8006dc6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	0151      	lsls	r1, r2, #5
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	440a      	add	r2, r1
 8006dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	e00f      	b.n	8006de6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	0151      	lsls	r1, r2, #5
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	440a      	add	r2, r1
 8006ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006de4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	68d9      	ldr	r1, [r3, #12]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	781a      	ldrb	r2, [r3, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	b298      	uxth	r0, r3
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	4603      	mov	r3, r0
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f9b8 	bl	8007170 <USB_WritePacket>
 8006e00:	e104      	b.n	800700c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e1c:	0cdb      	lsrs	r3, r3, #19
 8006e1e:	04db      	lsls	r3, r3, #19
 8006e20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e44:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d131      	bne.n	8006eb0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e70:	691a      	ldr	r2, [r3, #16]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e7a:	69b9      	ldr	r1, [r7, #24]
 8006e7c:	0148      	lsls	r0, r1, #5
 8006e7e:	69f9      	ldr	r1, [r7, #28]
 8006e80:	4401      	add	r1, r0
 8006e82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e86:	4313      	orrs	r3, r2
 8006e88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	0151      	lsls	r1, r2, #5
 8006e9c:	69fa      	ldr	r2, [r7, #28]
 8006e9e:	440a      	add	r2, r1
 8006ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ea8:	6113      	str	r3, [r2, #16]
 8006eaa:	e061      	b.n	8006f70 <USB_EPStartXfer+0x484>
 8006eac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d123      	bne.n	8006f00 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ece:	69b9      	ldr	r1, [r7, #24]
 8006ed0:	0148      	lsls	r0, r1, #5
 8006ed2:	69f9      	ldr	r1, [r7, #28]
 8006ed4:	4401      	add	r1, r0
 8006ed6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006eda:	4313      	orrs	r3, r2
 8006edc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	0151      	lsls	r1, r2, #5
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006efc:	6113      	str	r3, [r2, #16]
 8006efe:	e037      	b.n	8006f70 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	4413      	add	r3, r2
 8006f0a:	1e5a      	subs	r2, r3, #1
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	8afa      	ldrh	r2, [r7, #22]
 8006f1c:	fb03 f202 	mul.w	r2, r3, r2
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f30:	691a      	ldr	r2, [r3, #16]
 8006f32:	8afb      	ldrh	r3, [r7, #22]
 8006f34:	04d9      	lsls	r1, r3, #19
 8006f36:	4b38      	ldr	r3, [pc, #224]	; (8007018 <USB_EPStartXfer+0x52c>)
 8006f38:	400b      	ands	r3, r1
 8006f3a:	69b9      	ldr	r1, [r7, #24]
 8006f3c:	0148      	lsls	r0, r1, #5
 8006f3e:	69f9      	ldr	r1, [r7, #28]
 8006f40:	4401      	add	r1, r0
 8006f42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f46:	4313      	orrs	r3, r2
 8006f48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f60:	69b9      	ldr	r1, [r7, #24]
 8006f62:	0148      	lsls	r0, r1, #5
 8006f64:	69f9      	ldr	r1, [r7, #28]
 8006f66:	4401      	add	r1, r0
 8006f68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d10d      	bne.n	8006f92 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d009      	beq.n	8006f92 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	68d9      	ldr	r1, [r3, #12]
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8e:	460a      	mov	r2, r1
 8006f90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	791b      	ldrb	r3, [r3, #4]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d128      	bne.n	8006fec <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d110      	bne.n	8006fcc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	e00f      	b.n	8006fec <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	0151      	lsls	r1, r2, #5
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	440a      	add	r2, r1
 8007002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007006:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800700a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3720      	adds	r7, #32
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	1ff80000 	.word	0x1ff80000

0800701c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	785b      	ldrb	r3, [r3, #1]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d14a      	bne.n	80070d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800704e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007052:	f040 8086 	bne.w	8007162 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	7812      	ldrb	r2, [r2, #0]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	440a      	add	r2, r1
 8007070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007074:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007078:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	7812      	ldrb	r2, [r2, #0]
 800708e:	0151      	lsls	r1, r2, #5
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	440a      	add	r2, r1
 8007094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007098:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800709c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3301      	adds	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d902      	bls.n	80070b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]
          break;
 80070b2:	e056      	b.n	8007162 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070cc:	d0e7      	beq.n	800709e <USB_EPStopXfer+0x82>
 80070ce:	e048      	b.n	8007162 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070e8:	d13b      	bne.n	8007162 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	7812      	ldrb	r2, [r2, #0]
 80070fe:	0151      	lsls	r1, r2, #5
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	440a      	add	r2, r1
 8007104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007108:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800710c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	7812      	ldrb	r2, [r2, #0]
 8007122:	0151      	lsls	r1, r2, #5
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	440a      	add	r2, r1
 8007128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800712c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007130:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f242 7210 	movw	r2, #10000	; 0x2710
 800713e:	4293      	cmp	r3, r2
 8007140:	d902      	bls.n	8007148 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	75fb      	strb	r3, [r7, #23]
          break;
 8007146:	e00c      	b.n	8007162 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800715c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007160:	d0e7      	beq.n	8007132 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
}
 8007164:	4618      	mov	r0, r3
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007170:	b480      	push	{r7}
 8007172:	b089      	sub	sp, #36	; 0x24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	4611      	mov	r1, r2
 800717c:	461a      	mov	r2, r3
 800717e:	460b      	mov	r3, r1
 8007180:	71fb      	strb	r3, [r7, #7]
 8007182:	4613      	mov	r3, r2
 8007184:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800718e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	d123      	bne.n	80071de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007196:	88bb      	ldrh	r3, [r7, #4]
 8007198:	3303      	adds	r3, #3
 800719a:	089b      	lsrs	r3, r3, #2
 800719c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800719e:	2300      	movs	r3, #0
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	e018      	b.n	80071d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	031a      	lsls	r2, r3, #12
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b0:	461a      	mov	r2, r3
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	3301      	adds	r3, #1
 80071bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	3301      	adds	r3, #1
 80071c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	3301      	adds	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3301      	adds	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	3301      	adds	r3, #1
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d3e2      	bcc.n	80071a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3724      	adds	r7, #36	; 0x24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b08b      	sub	sp, #44	; 0x2c
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007202:	88fb      	ldrh	r3, [r7, #6]
 8007204:	089b      	lsrs	r3, r3, #2
 8007206:	b29b      	uxth	r3, r3
 8007208:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007212:	2300      	movs	r3, #0
 8007214:	623b      	str	r3, [r7, #32]
 8007216:	e014      	b.n	8007242 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	601a      	str	r2, [r3, #0]
    pDest++;
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	3301      	adds	r3, #1
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	3301      	adds	r3, #1
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	3301      	adds	r3, #1
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	3301      	adds	r3, #1
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	3301      	adds	r3, #1
 8007240:	623b      	str	r3, [r7, #32]
 8007242:	6a3a      	ldr	r2, [r7, #32]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	429a      	cmp	r2, r3
 8007248:	d3e6      	bcc.n	8007218 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800724a:	8bfb      	ldrh	r3, [r7, #30]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01e      	beq.n	800728e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800725a:	461a      	mov	r2, r3
 800725c:	f107 0310 	add.w	r3, r7, #16
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
 8007270:	b2da      	uxtb	r2, r3
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	701a      	strb	r2, [r3, #0]
      i++;
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	3301      	adds	r3, #1
 800727a:	623b      	str	r3, [r7, #32]
      pDest++;
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	3301      	adds	r3, #1
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007282:	8bfb      	ldrh	r3, [r7, #30]
 8007284:	3b01      	subs	r3, #1
 8007286:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007288:	8bfb      	ldrh	r3, [r7, #30]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1ea      	bne.n	8007264 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007290:	4618      	mov	r0, r3
 8007292:	372c      	adds	r7, #44	; 0x2c
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	785b      	ldrb	r3, [r3, #1]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d12c      	bne.n	8007312 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	db12      	blt.n	80072f0 <USB_EPSetStall+0x54>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00f      	beq.n	80072f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	0151      	lsls	r1, r2, #5
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	440a      	add	r2, r1
 80072e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	e02b      	b.n	800736a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	db12      	blt.n	800734a <USB_EPSetStall+0xae>
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00f      	beq.n	800734a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	0151      	lsls	r1, r2, #5
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	440a      	add	r2, r1
 8007340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007344:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007348:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	0151      	lsls	r1, r2, #5
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	440a      	add	r2, r1
 8007360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007364:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007368:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d128      	bne.n	80073e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	791b      	ldrb	r3, [r3, #4]
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d003      	beq.n	80073c4 <USB_EPClearStall+0x4c>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	791b      	ldrb	r3, [r3, #4]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d138      	bne.n	8007436 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	e027      	b.n	8007436 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	0151      	lsls	r1, r2, #5
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	440a      	add	r2, r1
 80073fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007400:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007404:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	791b      	ldrb	r3, [r3, #4]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d003      	beq.n	8007416 <USB_EPClearStall+0x9e>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	791b      	ldrb	r3, [r3, #4]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d10f      	bne.n	8007436 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	0151      	lsls	r1, r2, #5
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	440a      	add	r2, r1
 800742c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007434:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007462:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007466:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007478:	68f9      	ldr	r1, [r7, #12]
 800747a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800747e:	4313      	orrs	r3, r2
 8007480:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074aa:	f023 0303 	bic.w	r3, r3, #3
 80074ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074be:	f023 0302 	bic.w	r3, r3, #2
 80074c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074ec:	f023 0303 	bic.w	r3, r3, #3
 80074f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007500:	f043 0302 	orr.w	r3, r3, #2
 8007504:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	4013      	ands	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800752c:	68fb      	ldr	r3, [r7, #12]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800753a:	b480      	push	{r7}
 800753c:	b085      	sub	sp, #20
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	4013      	ands	r3, r2
 800755c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	0c1b      	lsrs	r3, r3, #16
}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800756e:	b480      	push	{r7}
 8007570:	b085      	sub	sp, #20
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	4013      	ands	r3, r2
 8007590:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	b29b      	uxth	r3, r3
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b085      	sub	sp, #20
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	460b      	mov	r3, r1
 80075ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075b2:	78fb      	ldrb	r3, [r7, #3]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	4013      	ands	r3, r2
 80075ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075d0:	68bb      	ldr	r3, [r7, #8]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075de:	b480      	push	{r7}
 80075e0:	b087      	sub	sp, #28
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007600:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007602:	78fb      	ldrb	r3, [r7, #3]
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	fa22 f303 	lsr.w	r3, r2, r3
 800760e:	01db      	lsls	r3, r3, #7
 8007610:	b2db      	uxtb	r3, r3
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007618:	78fb      	ldrb	r3, [r7, #3]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4013      	ands	r3, r2
 800762a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800762c:	68bb      	ldr	r3, [r7, #8]
}
 800762e:	4618      	mov	r0, r3
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	f003 0301 	and.w	r3, r3, #1
}
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007656:	b480      	push	{r7}
 8007658:	b085      	sub	sp, #20
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007670:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007674:	f023 0307 	bic.w	r3, r3, #7
 8007678:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800768c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	460b      	mov	r3, r1
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	333c      	adds	r3, #60	; 0x3c
 80076b2:	3304      	adds	r3, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	4a26      	ldr	r2, [pc, #152]	; (8007754 <USB_EP0_OutStart+0xb8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d90a      	bls.n	80076d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076d0:	d101      	bne.n	80076d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	e037      	b.n	8007746 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076dc:	461a      	mov	r2, r3
 80076de:	2300      	movs	r3, #0
 80076e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007704:	f043 0318 	orr.w	r3, r3, #24
 8007708:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007718:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800771c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800771e:	7afb      	ldrb	r3, [r7, #11]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d10f      	bne.n	8007744 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007742:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	4f54300a 	.word	0x4f54300a

08007758 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007770:	d901      	bls.n	8007776 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e01b      	b.n	80077ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	daf2      	bge.n	8007764 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f043 0201 	orr.w	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3301      	adds	r3, #1
 8007792:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800779a:	d901      	bls.n	80077a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e006      	b.n	80077ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d0f0      	beq.n	800778e <USB_CoreReset+0x36>

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
	...

080077bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077cc:	f002 fd34 	bl	800a238 <USBD_static_malloc>
 80077d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d109      	bne.n	80077ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	32b0      	adds	r2, #176	; 0xb0
 80077e2:	2100      	movs	r1, #0
 80077e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80077e8:	2302      	movs	r3, #2
 80077ea:	e0d4      	b.n	8007996 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80077ec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80077f0:	2100      	movs	r1, #0
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f003 fcff 	bl	800b1f6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	32b0      	adds	r2, #176	; 0xb0
 8007802:	68f9      	ldr	r1, [r7, #12]
 8007804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	32b0      	adds	r2, #176	; 0xb0
 8007812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	7c1b      	ldrb	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d138      	bne.n	8007896 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007824:	4b5e      	ldr	r3, [pc, #376]	; (80079a0 <USBD_CDC_Init+0x1e4>)
 8007826:	7819      	ldrb	r1, [r3, #0]
 8007828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800782c:	2202      	movs	r2, #2
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f002 fb91 	bl	8009f56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007834:	4b5a      	ldr	r3, [pc, #360]	; (80079a0 <USBD_CDC_Init+0x1e4>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f003 020f 	and.w	r2, r3, #15
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	440b      	add	r3, r1
 8007848:	3324      	adds	r3, #36	; 0x24
 800784a:	2201      	movs	r2, #1
 800784c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800784e:	4b55      	ldr	r3, [pc, #340]	; (80079a4 <USBD_CDC_Init+0x1e8>)
 8007850:	7819      	ldrb	r1, [r3, #0]
 8007852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007856:	2202      	movs	r2, #2
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f002 fb7c 	bl	8009f56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800785e:	4b51      	ldr	r3, [pc, #324]	; (80079a4 <USBD_CDC_Init+0x1e8>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f003 020f 	and.w	r2, r3, #15
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007876:	2201      	movs	r2, #1
 8007878:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800787a:	4b4b      	ldr	r3, [pc, #300]	; (80079a8 <USBD_CDC_Init+0x1ec>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	f003 020f 	and.w	r2, r3, #15
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	440b      	add	r3, r1
 800788e:	3326      	adds	r3, #38	; 0x26
 8007890:	2210      	movs	r2, #16
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	e035      	b.n	8007902 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007896:	4b42      	ldr	r3, [pc, #264]	; (80079a0 <USBD_CDC_Init+0x1e4>)
 8007898:	7819      	ldrb	r1, [r3, #0]
 800789a:	2340      	movs	r3, #64	; 0x40
 800789c:	2202      	movs	r2, #2
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f002 fb59 	bl	8009f56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80078a4:	4b3e      	ldr	r3, [pc, #248]	; (80079a0 <USBD_CDC_Init+0x1e4>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	f003 020f 	and.w	r2, r3, #15
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	440b      	add	r3, r1
 80078b8:	3324      	adds	r3, #36	; 0x24
 80078ba:	2201      	movs	r2, #1
 80078bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80078be:	4b39      	ldr	r3, [pc, #228]	; (80079a4 <USBD_CDC_Init+0x1e8>)
 80078c0:	7819      	ldrb	r1, [r3, #0]
 80078c2:	2340      	movs	r3, #64	; 0x40
 80078c4:	2202      	movs	r2, #2
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f002 fb45 	bl	8009f56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078cc:	4b35      	ldr	r3, [pc, #212]	; (80079a4 <USBD_CDC_Init+0x1e8>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f003 020f 	and.w	r2, r3, #15
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	440b      	add	r3, r1
 80078e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078e4:	2201      	movs	r2, #1
 80078e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80078e8:	4b2f      	ldr	r3, [pc, #188]	; (80079a8 <USBD_CDC_Init+0x1ec>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	f003 020f 	and.w	r2, r3, #15
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	4613      	mov	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	440b      	add	r3, r1
 80078fc:	3326      	adds	r3, #38	; 0x26
 80078fe:	2210      	movs	r2, #16
 8007900:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007902:	4b29      	ldr	r3, [pc, #164]	; (80079a8 <USBD_CDC_Init+0x1ec>)
 8007904:	7819      	ldrb	r1, [r3, #0]
 8007906:	2308      	movs	r3, #8
 8007908:	2203      	movs	r2, #3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f002 fb23 	bl	8009f56 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007910:	4b25      	ldr	r3, [pc, #148]	; (80079a8 <USBD_CDC_Init+0x1ec>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	f003 020f 	and.w	r2, r3, #15
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	440b      	add	r3, r1
 8007924:	3324      	adds	r3, #36	; 0x24
 8007926:	2201      	movs	r2, #1
 8007928:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	33b0      	adds	r3, #176	; 0xb0
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007960:	2302      	movs	r3, #2
 8007962:	e018      	b.n	8007996 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	7c1b      	ldrb	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800796c:	4b0d      	ldr	r3, [pc, #52]	; (80079a4 <USBD_CDC_Init+0x1e8>)
 800796e:	7819      	ldrb	r1, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f002 fbda 	bl	800a134 <USBD_LL_PrepareReceive>
 8007980:	e008      	b.n	8007994 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007982:	4b08      	ldr	r3, [pc, #32]	; (80079a4 <USBD_CDC_Init+0x1e8>)
 8007984:	7819      	ldrb	r1, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800798c:	2340      	movs	r3, #64	; 0x40
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f002 fbd0 	bl	800a134 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000093 	.word	0x20000093
 80079a4:	20000094 	.word	0x20000094
 80079a8:	20000095 	.word	0x20000095

080079ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80079b8:	4b3a      	ldr	r3, [pc, #232]	; (8007aa4 <USBD_CDC_DeInit+0xf8>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f002 faef 	bl	8009fa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80079c4:	4b37      	ldr	r3, [pc, #220]	; (8007aa4 <USBD_CDC_DeInit+0xf8>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	f003 020f 	and.w	r2, r3, #15
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	440b      	add	r3, r1
 80079d8:	3324      	adds	r3, #36	; 0x24
 80079da:	2200      	movs	r2, #0
 80079dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80079de:	4b32      	ldr	r3, [pc, #200]	; (8007aa8 <USBD_CDC_DeInit+0xfc>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f002 fadc 	bl	8009fa2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80079ea:	4b2f      	ldr	r3, [pc, #188]	; (8007aa8 <USBD_CDC_DeInit+0xfc>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	f003 020f 	and.w	r2, r3, #15
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a02:	2200      	movs	r2, #0
 8007a04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a06:	4b29      	ldr	r3, [pc, #164]	; (8007aac <USBD_CDC_DeInit+0x100>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f002 fac8 	bl	8009fa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a12:	4b26      	ldr	r3, [pc, #152]	; (8007aac <USBD_CDC_DeInit+0x100>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	f003 020f 	and.w	r2, r3, #15
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	3324      	adds	r3, #36	; 0x24
 8007a28:	2200      	movs	r2, #0
 8007a2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007a2c:	4b1f      	ldr	r3, [pc, #124]	; (8007aac <USBD_CDC_DeInit+0x100>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	f003 020f 	and.w	r2, r3, #15
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	4613      	mov	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	440b      	add	r3, r1
 8007a40:	3326      	adds	r3, #38	; 0x26
 8007a42:	2200      	movs	r2, #0
 8007a44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	32b0      	adds	r2, #176	; 0xb0
 8007a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01f      	beq.n	8007a98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	33b0      	adds	r3, #176	; 0xb0
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	32b0      	adds	r2, #176	; 0xb0
 8007a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f002 fbea 	bl	800a254 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	32b0      	adds	r2, #176	; 0xb0
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000093 	.word	0x20000093
 8007aa8:	20000094 	.word	0x20000094
 8007aac:	20000095 	.word	0x20000095

08007ab0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	32b0      	adds	r2, #176	; 0xb0
 8007ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e0bf      	b.n	8007c60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d050      	beq.n	8007b8e <USBD_CDC_Setup+0xde>
 8007aec:	2b20      	cmp	r3, #32
 8007aee:	f040 80af 	bne.w	8007c50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	88db      	ldrh	r3, [r3, #6]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d03a      	beq.n	8007b70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b25b      	sxtb	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	da1b      	bge.n	8007b3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	33b0      	adds	r3, #176	; 0xb0
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007b1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	88d2      	ldrh	r2, [r2, #6]
 8007b20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	88db      	ldrh	r3, [r3, #6]
 8007b26:	2b07      	cmp	r3, #7
 8007b28:	bf28      	it	cs
 8007b2a:	2307      	movcs	r3, #7
 8007b2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	89fa      	ldrh	r2, [r7, #14]
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 fdb3 	bl	80096a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007b3a:	e090      	b.n	8007c5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	785a      	ldrb	r2, [r3, #1]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	88db      	ldrh	r3, [r3, #6]
 8007b4a:	2b3f      	cmp	r3, #63	; 0x3f
 8007b4c:	d803      	bhi.n	8007b56 <USBD_CDC_Setup+0xa6>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	88db      	ldrh	r3, [r3, #6]
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	e000      	b.n	8007b58 <USBD_CDC_Setup+0xa8>
 8007b56:	2240      	movs	r2, #64	; 0x40
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b5e:	6939      	ldr	r1, [r7, #16]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007b66:	461a      	mov	r2, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 fdc5 	bl	80096f8 <USBD_CtlPrepareRx>
      break;
 8007b6e:	e076      	b.n	8007c5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	33b0      	adds	r3, #176	; 0xb0
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	7850      	ldrb	r0, [r2, #1]
 8007b86:	2200      	movs	r2, #0
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	4798      	blx	r3
      break;
 8007b8c:	e067      	b.n	8007c5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	785b      	ldrb	r3, [r3, #1]
 8007b92:	2b0b      	cmp	r3, #11
 8007b94:	d851      	bhi.n	8007c3a <USBD_CDC_Setup+0x18a>
 8007b96:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <USBD_CDC_Setup+0xec>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bcd 	.word	0x08007bcd
 8007ba0:	08007c49 	.word	0x08007c49
 8007ba4:	08007c3b 	.word	0x08007c3b
 8007ba8:	08007c3b 	.word	0x08007c3b
 8007bac:	08007c3b 	.word	0x08007c3b
 8007bb0:	08007c3b 	.word	0x08007c3b
 8007bb4:	08007c3b 	.word	0x08007c3b
 8007bb8:	08007c3b 	.word	0x08007c3b
 8007bbc:	08007c3b 	.word	0x08007c3b
 8007bc0:	08007c3b 	.word	0x08007c3b
 8007bc4:	08007bf7 	.word	0x08007bf7
 8007bc8:	08007c21 	.word	0x08007c21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d107      	bne.n	8007be8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007bd8:	f107 030a 	add.w	r3, r7, #10
 8007bdc:	2202      	movs	r2, #2
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 fd5d 	bl	80096a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007be6:	e032      	b.n	8007c4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f001 fce7 	bl	80095be <USBD_CtlError>
            ret = USBD_FAIL;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	75fb      	strb	r3, [r7, #23]
          break;
 8007bf4:	e02b      	b.n	8007c4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d107      	bne.n	8007c12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c02:	f107 030d 	add.w	r3, r7, #13
 8007c06:	2201      	movs	r2, #1
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f001 fd48 	bl	80096a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c10:	e01d      	b.n	8007c4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f001 fcd2 	bl	80095be <USBD_CtlError>
            ret = USBD_FAIL;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c1e:	e016      	b.n	8007c4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d00f      	beq.n	8007c4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 fcc5 	bl	80095be <USBD_CtlError>
            ret = USBD_FAIL;
 8007c34:	2303      	movs	r3, #3
 8007c36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c38:	e008      	b.n	8007c4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 fcbe 	bl	80095be <USBD_CtlError>
          ret = USBD_FAIL;
 8007c42:	2303      	movs	r3, #3
 8007c44:	75fb      	strb	r3, [r7, #23]
          break;
 8007c46:	e002      	b.n	8007c4e <USBD_CDC_Setup+0x19e>
          break;
 8007c48:	bf00      	nop
 8007c4a:	e008      	b.n	8007c5e <USBD_CDC_Setup+0x1ae>
          break;
 8007c4c:	bf00      	nop
      }
      break;
 8007c4e:	e006      	b.n	8007c5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 fcb3 	bl	80095be <USBD_CtlError>
      ret = USBD_FAIL;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	32b0      	adds	r2, #176	; 0xb0
 8007c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e065      	b.n	8007d5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	32b0      	adds	r2, #176	; 0xb0
 8007c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ca2:	78fb      	ldrb	r3, [r7, #3]
 8007ca4:	f003 020f 	and.w	r2, r3, #15
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3318      	adds	r3, #24
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d02f      	beq.n	8007d1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	f003 020f 	and.w	r2, r3, #15
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	3318      	adds	r3, #24
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	f003 010f 	and.w	r1, r3, #15
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	440b      	add	r3, r1
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4403      	add	r3, r0
 8007ce4:	331c      	adds	r3, #28
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cec:	fb01 f303 	mul.w	r3, r1, r3
 8007cf0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d112      	bne.n	8007d1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	f003 020f 	and.w	r2, r3, #15
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	440b      	add	r3, r1
 8007d08:	3318      	adds	r3, #24
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d0e:	78f9      	ldrb	r1, [r7, #3]
 8007d10:	2300      	movs	r3, #0
 8007d12:	2200      	movs	r2, #0
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f002 f9ec 	bl	800a0f2 <USBD_LL_Transmit>
 8007d1a:	e01f      	b.n	8007d5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	33b0      	adds	r3, #176	; 0xb0
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d010      	beq.n	8007d5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	33b0      	adds	r3, #176	; 0xb0
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007d58:	78fa      	ldrb	r2, [r7, #3]
 8007d5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	32b0      	adds	r2, #176	; 0xb0
 8007d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	32b0      	adds	r2, #176	; 0xb0
 8007d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e01a      	b.n	8007dce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f002 f9ea 	bl	800a176 <USBD_LL_GetRxDataSize>
 8007da2:	4602      	mov	r2, r0
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	33b0      	adds	r3, #176	; 0xb0
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	32b0      	adds	r2, #176	; 0xb0
 8007de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e025      	b.n	8007e44 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	33b0      	adds	r3, #176	; 0xb0
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01a      	beq.n	8007e42 <USBD_CDC_EP0_RxReady+0x6c>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e12:	2bff      	cmp	r3, #255	; 0xff
 8007e14:	d015      	beq.n	8007e42 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	33b0      	adds	r3, #176	; 0xb0
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007e2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e36:	b292      	uxth	r2, r2
 8007e38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	22ff      	movs	r2, #255	; 0xff
 8007e3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e54:	2182      	movs	r1, #130	; 0x82
 8007e56:	4818      	ldr	r0, [pc, #96]	; (8007eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e58:	f000 fd4f 	bl	80088fa <USBD_GetEpDesc>
 8007e5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e5e:	2101      	movs	r1, #1
 8007e60:	4815      	ldr	r0, [pc, #84]	; (8007eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e62:	f000 fd4a 	bl	80088fa <USBD_GetEpDesc>
 8007e66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e68:	2181      	movs	r1, #129	; 0x81
 8007e6a:	4813      	ldr	r0, [pc, #76]	; (8007eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e6c:	f000 fd45 	bl	80088fa <USBD_GetEpDesc>
 8007e70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2210      	movs	r2, #16
 8007e7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d006      	beq.n	8007e92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e8c:	711a      	strb	r2, [r3, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d006      	beq.n	8007ea6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ea0:	711a      	strb	r2, [r3, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2243      	movs	r2, #67	; 0x43
 8007eaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007eac:	4b02      	ldr	r3, [pc, #8]	; (8007eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000050 	.word	0x20000050

08007ebc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ec4:	2182      	movs	r1, #130	; 0x82
 8007ec6:	4818      	ldr	r0, [pc, #96]	; (8007f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ec8:	f000 fd17 	bl	80088fa <USBD_GetEpDesc>
 8007ecc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ece:	2101      	movs	r1, #1
 8007ed0:	4815      	ldr	r0, [pc, #84]	; (8007f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ed2:	f000 fd12 	bl	80088fa <USBD_GetEpDesc>
 8007ed6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ed8:	2181      	movs	r1, #129	; 0x81
 8007eda:	4813      	ldr	r0, [pc, #76]	; (8007f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007edc:	f000 fd0d 	bl	80088fa <USBD_GetEpDesc>
 8007ee0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2210      	movs	r2, #16
 8007eec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d006      	beq.n	8007f02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	711a      	strb	r2, [r3, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f042 0202 	orr.w	r2, r2, #2
 8007f00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d006      	beq.n	8007f16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	711a      	strb	r2, [r3, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f042 0202 	orr.w	r2, r2, #2
 8007f14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2243      	movs	r2, #67	; 0x43
 8007f1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f1c:	4b02      	ldr	r3, [pc, #8]	; (8007f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000050 	.word	0x20000050

08007f2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f34:	2182      	movs	r1, #130	; 0x82
 8007f36:	4818      	ldr	r0, [pc, #96]	; (8007f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f38:	f000 fcdf 	bl	80088fa <USBD_GetEpDesc>
 8007f3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f3e:	2101      	movs	r1, #1
 8007f40:	4815      	ldr	r0, [pc, #84]	; (8007f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f42:	f000 fcda 	bl	80088fa <USBD_GetEpDesc>
 8007f46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f48:	2181      	movs	r1, #129	; 0x81
 8007f4a:	4813      	ldr	r0, [pc, #76]	; (8007f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f4c:	f000 fcd5 	bl	80088fa <USBD_GetEpDesc>
 8007f50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	2210      	movs	r2, #16
 8007f5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d006      	beq.n	8007f72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f6c:	711a      	strb	r2, [r3, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d006      	beq.n	8007f86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f80:	711a      	strb	r2, [r3, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2243      	movs	r2, #67	; 0x43
 8007f8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f8c:	4b02      	ldr	r3, [pc, #8]	; (8007f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000050 	.word	0x20000050

08007f9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	220a      	movs	r2, #10
 8007fa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007faa:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	2000000c 	.word	0x2000000c

08007fbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e009      	b.n	8007fe4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	33b0      	adds	r3, #176	; 0xb0
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	32b0      	adds	r2, #176	; 0xb0
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008012:	2303      	movs	r3, #3
 8008014:	e008      	b.n	8008028 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	371c      	adds	r7, #28
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	32b0      	adds	r2, #176	; 0xb0
 8008048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008054:	2303      	movs	r3, #3
 8008056:	e004      	b.n	8008062 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
	...

08008070 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	32b0      	adds	r2, #176	; 0xb0
 8008082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008086:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008088:	2301      	movs	r3, #1
 800808a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008092:	2303      	movs	r3, #3
 8008094:	e025      	b.n	80080e2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800809c:	2b00      	cmp	r3, #0
 800809e:	d11f      	bne.n	80080e0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80080a8:	4b10      	ldr	r3, [pc, #64]	; (80080ec <USBD_CDC_TransmitPacket+0x7c>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	f003 020f 	and.w	r2, r3, #15
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	4613      	mov	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4403      	add	r3, r0
 80080c2:	3318      	adds	r3, #24
 80080c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80080c6:	4b09      	ldr	r3, [pc, #36]	; (80080ec <USBD_CDC_TransmitPacket+0x7c>)
 80080c8:	7819      	ldrb	r1, [r3, #0]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f002 f80b 	bl	800a0f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	20000093 	.word	0x20000093

080080f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	32b0      	adds	r2, #176	; 0xb0
 8008102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008106:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	32b0      	adds	r2, #176	; 0xb0
 8008112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800811a:	2303      	movs	r3, #3
 800811c:	e018      	b.n	8008150 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	7c1b      	ldrb	r3, [r3, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10a      	bne.n	800813c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008126:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <USBD_CDC_ReceivePacket+0x68>)
 8008128:	7819      	ldrb	r1, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 fffd 	bl	800a134 <USBD_LL_PrepareReceive>
 800813a:	e008      	b.n	800814e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800813c:	4b06      	ldr	r3, [pc, #24]	; (8008158 <USBD_CDC_ReceivePacket+0x68>)
 800813e:	7819      	ldrb	r1, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008146:	2340      	movs	r3, #64	; 0x40
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f001 fff3 	bl	800a134 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20000094 	.word	0x20000094

0800815c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008170:	2303      	movs	r3, #3
 8008172:	e01f      	b.n	80081b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	79fa      	ldrb	r2, [r7, #7]
 80081a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f001 fe6d 	bl	8009e88 <USBD_LL_Init>
 80081ae:	4603      	mov	r3, r0
 80081b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e025      	b.n	8008220 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	32ae      	adds	r2, #174	; 0xae
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00f      	beq.n	8008210 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	32ae      	adds	r2, #174	; 0xae
 80081fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	f107 020e 	add.w	r2, r7, #14
 8008204:	4610      	mov	r0, r2
 8008206:	4798      	blx	r3
 8008208:	4602      	mov	r2, r0
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 fe75 	bl	8009f20 <USBD_LL_Start>
 8008236:	4603      	mov	r3, r0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008248:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800824a:	4618      	mov	r0, r3
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826c:	2b00      	cmp	r3, #0
 800826e:	d009      	beq.n	8008284 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	78fa      	ldrb	r2, [r7, #3]
 800827a:	4611      	mov	r1, r2
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	4798      	blx	r3
 8008280:	4603      	mov	r3, r0
 8008282:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008284:	7bfb      	ldrb	r3, [r7, #15]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	460b      	mov	r3, r1
 8008298:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	78fa      	ldrb	r2, [r7, #3]
 80082a8:	4611      	mov	r1, r2
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80082b4:	2303      	movs	r3, #3
 80082b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 f938 	bl	800954a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80082e8:	461a      	mov	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082f6:	f003 031f 	and.w	r3, r3, #31
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d01a      	beq.n	8008334 <USBD_LL_SetupStage+0x72>
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d822      	bhi.n	8008348 <USBD_LL_SetupStage+0x86>
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <USBD_LL_SetupStage+0x4a>
 8008306:	2b01      	cmp	r3, #1
 8008308:	d00a      	beq.n	8008320 <USBD_LL_SetupStage+0x5e>
 800830a:	e01d      	b.n	8008348 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fb65 	bl	80089e4 <USBD_StdDevReq>
 800831a:	4603      	mov	r3, r0
 800831c:	73fb      	strb	r3, [r7, #15]
      break;
 800831e:	e020      	b.n	8008362 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fbcd 	bl	8008ac8 <USBD_StdItfReq>
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]
      break;
 8008332:	e016      	b.n	8008362 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fc2f 	bl	8008ba0 <USBD_StdEPReq>
 8008342:	4603      	mov	r3, r0
 8008344:	73fb      	strb	r3, [r7, #15]
      break;
 8008346:	e00c      	b.n	8008362 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800834e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008352:	b2db      	uxtb	r3, r3
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 fe42 	bl	8009fe0 <USBD_LL_StallEP>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]
      break;
 8008360:	bf00      	nop
  }

  return ret;
 8008362:	7bfb      	ldrb	r3, [r7, #15]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	460b      	mov	r3, r1
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800837e:	7afb      	ldrb	r3, [r7, #11]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d16e      	bne.n	8008462 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800838a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008392:	2b03      	cmp	r3, #3
 8008394:	f040 8098 	bne.w	80084c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d913      	bls.n	80083cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	1ad2      	subs	r2, r2, r3
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	4293      	cmp	r3, r2
 80083bc:	bf28      	it	cs
 80083be:	4613      	movcs	r3, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f001 f9b4 	bl	8009732 <USBD_CtlContinueRx>
 80083ca:	e07d      	b.n	80084c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083d2:	f003 031f 	and.w	r3, r3, #31
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d014      	beq.n	8008404 <USBD_LL_DataOutStage+0x98>
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d81d      	bhi.n	800841a <USBD_LL_DataOutStage+0xae>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <USBD_LL_DataOutStage+0x7c>
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d003      	beq.n	80083ee <USBD_LL_DataOutStage+0x82>
 80083e6:	e018      	b.n	800841a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	75bb      	strb	r3, [r7, #22]
            break;
 80083ec:	e018      	b.n	8008420 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	4619      	mov	r1, r3
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 fa64 	bl	80088c6 <USBD_CoreFindIF>
 80083fe:	4603      	mov	r3, r0
 8008400:	75bb      	strb	r3, [r7, #22]
            break;
 8008402:	e00d      	b.n	8008420 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800840a:	b2db      	uxtb	r3, r3
 800840c:	4619      	mov	r1, r3
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fa66 	bl	80088e0 <USBD_CoreFindEP>
 8008414:	4603      	mov	r3, r0
 8008416:	75bb      	strb	r3, [r7, #22]
            break;
 8008418:	e002      	b.n	8008420 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	75bb      	strb	r3, [r7, #22]
            break;
 800841e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008420:	7dbb      	ldrb	r3, [r7, #22]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d119      	bne.n	800845a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b03      	cmp	r3, #3
 8008430:	d113      	bne.n	800845a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008432:	7dba      	ldrb	r2, [r7, #22]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	32ae      	adds	r2, #174	; 0xae
 8008438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008442:	7dba      	ldrb	r2, [r7, #22]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800844a:	7dba      	ldrb	r2, [r7, #22]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	32ae      	adds	r2, #174	; 0xae
 8008450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f001 f97a 	bl	8009754 <USBD_CtlSendStatus>
 8008460:	e032      	b.n	80084c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008462:	7afb      	ldrb	r3, [r7, #11]
 8008464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008468:	b2db      	uxtb	r3, r3
 800846a:	4619      	mov	r1, r3
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 fa37 	bl	80088e0 <USBD_CoreFindEP>
 8008472:	4603      	mov	r3, r0
 8008474:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008476:	7dbb      	ldrb	r3, [r7, #22]
 8008478:	2bff      	cmp	r3, #255	; 0xff
 800847a:	d025      	beq.n	80084c8 <USBD_LL_DataOutStage+0x15c>
 800847c:	7dbb      	ldrb	r3, [r7, #22]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d122      	bne.n	80084c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b03      	cmp	r3, #3
 800848c:	d117      	bne.n	80084be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800848e:	7dba      	ldrb	r2, [r7, #22]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	32ae      	adds	r2, #174	; 0xae
 8008494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00f      	beq.n	80084be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800849e:	7dba      	ldrb	r2, [r7, #22]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80084a6:	7dba      	ldrb	r2, [r7, #22]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	32ae      	adds	r2, #174	; 0xae
 80084ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	7afa      	ldrb	r2, [r7, #11]
 80084b4:	4611      	mov	r1, r2
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	4798      	blx	r3
 80084ba:	4603      	mov	r3, r0
 80084bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	e000      	b.n	80084ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b086      	sub	sp, #24
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	460b      	mov	r3, r1
 80084dc:	607a      	str	r2, [r7, #4]
 80084de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80084e0:	7afb      	ldrb	r3, [r7, #11]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d16f      	bne.n	80085c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3314      	adds	r3, #20
 80084ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d15a      	bne.n	80085ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	689a      	ldr	r2, [r3, #8]
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d914      	bls.n	800852c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	1ad2      	subs	r2, r2, r3
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	461a      	mov	r2, r3
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f001 f8dc 	bl	80096d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800851e:	2300      	movs	r3, #0
 8008520:	2200      	movs	r2, #0
 8008522:	2100      	movs	r1, #0
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f001 fe05 	bl	800a134 <USBD_LL_PrepareReceive>
 800852a:	e03f      	b.n	80085ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	429a      	cmp	r2, r3
 8008536:	d11c      	bne.n	8008572 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008540:	429a      	cmp	r2, r3
 8008542:	d316      	bcc.n	8008572 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800854e:	429a      	cmp	r2, r3
 8008550:	d20f      	bcs.n	8008572 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008552:	2200      	movs	r2, #0
 8008554:	2100      	movs	r1, #0
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f001 f8bd 	bl	80096d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008564:	2300      	movs	r3, #0
 8008566:	2200      	movs	r2, #0
 8008568:	2100      	movs	r1, #0
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f001 fde2 	bl	800a134 <USBD_LL_PrepareReceive>
 8008570:	e01c      	b.n	80085ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b03      	cmp	r3, #3
 800857c:	d10f      	bne.n	800859e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d009      	beq.n	800859e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800859e:	2180      	movs	r1, #128	; 0x80
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f001 fd1d 	bl	8009fe0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f001 f8e7 	bl	800977a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d03a      	beq.n	800862c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f7ff fe42 	bl	8008240 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085c4:	e032      	b.n	800862c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80085c6:	7afb      	ldrb	r3, [r7, #11]
 80085c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	4619      	mov	r1, r3
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 f985 	bl	80088e0 <USBD_CoreFindEP>
 80085d6:	4603      	mov	r3, r0
 80085d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	2bff      	cmp	r3, #255	; 0xff
 80085de:	d025      	beq.n	800862c <USBD_LL_DataInStage+0x15a>
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d122      	bne.n	800862c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d11c      	bne.n	800862c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80085f2:	7dfa      	ldrb	r2, [r7, #23]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	32ae      	adds	r2, #174	; 0xae
 80085f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d014      	beq.n	800862c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008602:	7dfa      	ldrb	r2, [r7, #23]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800860a:	7dfa      	ldrb	r2, [r7, #23]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	32ae      	adds	r2, #174	; 0xae
 8008610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	7afa      	ldrb	r2, [r7, #11]
 8008618:	4611      	mov	r1, r2
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	4798      	blx	r3
 800861e:	4603      	mov	r3, r0
 8008620:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008622:	7dbb      	ldrb	r3, [r7, #22]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008628:	7dbb      	ldrb	r3, [r7, #22]
 800862a:	e000      	b.n	800862e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866e:	2b00      	cmp	r3, #0
 8008670:	d014      	beq.n	800869c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00e      	beq.n	800869c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	6852      	ldr	r2, [r2, #4]
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	4611      	mov	r1, r2
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	4798      	blx	r3
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008698:	2303      	movs	r3, #3
 800869a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800869c:	2340      	movs	r3, #64	; 0x40
 800869e:	2200      	movs	r2, #0
 80086a0:	2100      	movs	r1, #0
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f001 fc57 	bl	8009f56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2240      	movs	r2, #64	; 0x40
 80086b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086b8:	2340      	movs	r3, #64	; 0x40
 80086ba:	2200      	movs	r2, #0
 80086bc:	2180      	movs	r1, #128	; 0x80
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fc49 	bl	8009f56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2240      	movs	r2, #64	; 0x40
 80086ce:	621a      	str	r2, [r3, #32]

  return ret;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	460b      	mov	r3, r1
 80086e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	78fa      	ldrb	r2, [r7, #3]
 80086ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b04      	cmp	r3, #4
 800870c:	d006      	beq.n	800871c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008714:	b2da      	uxtb	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2204      	movs	r2, #4
 8008720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b04      	cmp	r3, #4
 8008744:	d106      	bne.n	8008754 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800874c:	b2da      	uxtb	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b03      	cmp	r3, #3
 8008774:	d110      	bne.n	8008798 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00b      	beq.n	8008798 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	460b      	mov	r3, r1
 80087ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	32ae      	adds	r2, #174	; 0xae
 80087b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e01c      	b.n	80087fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	d115      	bne.n	80087fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	32ae      	adds	r2, #174	; 0xae
 80087da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00b      	beq.n	80087fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	32ae      	adds	r2, #174	; 0xae
 80087ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	78fa      	ldrb	r2, [r7, #3]
 80087f6:	4611      	mov	r1, r2
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	32ae      	adds	r2, #174	; 0xae
 800881c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008824:	2303      	movs	r3, #3
 8008826:	e01c      	b.n	8008862 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b03      	cmp	r3, #3
 8008832:	d115      	bne.n	8008860 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	32ae      	adds	r2, #174	; 0xae
 800883e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00b      	beq.n	8008860 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	32ae      	adds	r2, #174	; 0xae
 8008852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	78fa      	ldrb	r2, [r7, #3]
 800885a:	4611      	mov	r1, r2
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00e      	beq.n	80088bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	6852      	ldr	r2, [r2, #4]
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	4611      	mov	r1, r2
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	4798      	blx	r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80088b8:	2303      	movs	r3, #3
 80088ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	460b      	mov	r3, r1
 80088d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b086      	sub	sp, #24
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	885b      	ldrh	r3, [r3, #2]
 8008916:	b29a      	uxth	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	b29b      	uxth	r3, r3
 800891e:	429a      	cmp	r2, r3
 8008920:	d920      	bls.n	8008964 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	b29b      	uxth	r3, r3
 8008928:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800892a:	e013      	b.n	8008954 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800892c:	f107 030a 	add.w	r3, r7, #10
 8008930:	4619      	mov	r1, r3
 8008932:	6978      	ldr	r0, [r7, #20]
 8008934:	f000 f81b 	bl	800896e <USBD_GetNextDesc>
 8008938:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	785b      	ldrb	r3, [r3, #1]
 800893e:	2b05      	cmp	r3, #5
 8008940:	d108      	bne.n	8008954 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	789b      	ldrb	r3, [r3, #2]
 800894a:	78fa      	ldrb	r2, [r7, #3]
 800894c:	429a      	cmp	r2, r3
 800894e:	d008      	beq.n	8008962 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008950:	2300      	movs	r3, #0
 8008952:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	885b      	ldrh	r3, [r3, #2]
 8008958:	b29a      	uxth	r2, r3
 800895a:	897b      	ldrh	r3, [r7, #10]
 800895c:	429a      	cmp	r2, r3
 800895e:	d8e5      	bhi.n	800892c <USBD_GetEpDesc+0x32>
 8008960:	e000      	b.n	8008964 <USBD_GetEpDesc+0x6a>
          break;
 8008962:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008964:	693b      	ldr	r3, [r7, #16]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800896e:	b480      	push	{r7}
 8008970:	b085      	sub	sp, #20
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	881a      	ldrh	r2, [r3, #0]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	b29b      	uxth	r3, r3
 8008986:	4413      	add	r3, r2
 8008988:	b29a      	uxth	r2, r3
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4413      	add	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800899a:	68fb      	ldr	r3, [r7, #12]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	3301      	adds	r3, #1
 80089be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089c6:	8a3b      	ldrh	r3, [r7, #16]
 80089c8:	021b      	lsls	r3, r3, #8
 80089ca:	b21a      	sxth	r2, r3
 80089cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	b21b      	sxth	r3, r3
 80089d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089d6:	89fb      	ldrh	r3, [r7, #14]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	371c      	adds	r7, #28
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089fa:	2b40      	cmp	r3, #64	; 0x40
 80089fc:	d005      	beq.n	8008a0a <USBD_StdDevReq+0x26>
 80089fe:	2b40      	cmp	r3, #64	; 0x40
 8008a00:	d857      	bhi.n	8008ab2 <USBD_StdDevReq+0xce>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00f      	beq.n	8008a26 <USBD_StdDevReq+0x42>
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	d153      	bne.n	8008ab2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	32ae      	adds	r2, #174	; 0xae
 8008a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]
      break;
 8008a24:	e04a      	b.n	8008abc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	785b      	ldrb	r3, [r3, #1]
 8008a2a:	2b09      	cmp	r3, #9
 8008a2c:	d83b      	bhi.n	8008aa6 <USBD_StdDevReq+0xc2>
 8008a2e:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <USBD_StdDevReq+0x50>)
 8008a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a34:	08008a89 	.word	0x08008a89
 8008a38:	08008a9d 	.word	0x08008a9d
 8008a3c:	08008aa7 	.word	0x08008aa7
 8008a40:	08008a93 	.word	0x08008a93
 8008a44:	08008aa7 	.word	0x08008aa7
 8008a48:	08008a67 	.word	0x08008a67
 8008a4c:	08008a5d 	.word	0x08008a5d
 8008a50:	08008aa7 	.word	0x08008aa7
 8008a54:	08008a7f 	.word	0x08008a7f
 8008a58:	08008a71 	.word	0x08008a71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa3c 	bl	8008edc <USBD_GetDescriptor>
          break;
 8008a64:	e024      	b.n	8008ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fbcb 	bl	8009204 <USBD_SetAddress>
          break;
 8008a6e:	e01f      	b.n	8008ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fc0a 	bl	800928c <USBD_SetConfig>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73fb      	strb	r3, [r7, #15]
          break;
 8008a7c:	e018      	b.n	8008ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fcad 	bl	80093e0 <USBD_GetConfig>
          break;
 8008a86:	e013      	b.n	8008ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fcde 	bl	800944c <USBD_GetStatus>
          break;
 8008a90:	e00e      	b.n	8008ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fd0d 	bl	80094b4 <USBD_SetFeature>
          break;
 8008a9a:	e009      	b.n	8008ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fd31 	bl	8009506 <USBD_ClrFeature>
          break;
 8008aa4:	e004      	b.n	8008ab0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fd88 	bl	80095be <USBD_CtlError>
          break;
 8008aae:	bf00      	nop
      }
      break;
 8008ab0:	e004      	b.n	8008abc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fd82 	bl	80095be <USBD_CtlError>
      break;
 8008aba:	bf00      	nop
  }

  return ret;
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop

08008ac8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ade:	2b40      	cmp	r3, #64	; 0x40
 8008ae0:	d005      	beq.n	8008aee <USBD_StdItfReq+0x26>
 8008ae2:	2b40      	cmp	r3, #64	; 0x40
 8008ae4:	d852      	bhi.n	8008b8c <USBD_StdItfReq+0xc4>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <USBD_StdItfReq+0x26>
 8008aea:	2b20      	cmp	r3, #32
 8008aec:	d14e      	bne.n	8008b8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	3b01      	subs	r3, #1
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d840      	bhi.n	8008b7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	889b      	ldrh	r3, [r3, #4]
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d836      	bhi.n	8008b74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	889b      	ldrh	r3, [r3, #4]
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7ff fed9 	bl	80088c6 <USBD_CoreFindIF>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	2bff      	cmp	r3, #255	; 0xff
 8008b1c:	d01d      	beq.n	8008b5a <USBD_StdItfReq+0x92>
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d11a      	bne.n	8008b5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b24:	7bba      	ldrb	r2, [r7, #14]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	32ae      	adds	r2, #174	; 0xae
 8008b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00f      	beq.n	8008b54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008b34:	7bba      	ldrb	r2, [r7, #14]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b3c:	7bba      	ldrb	r2, [r7, #14]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	32ae      	adds	r2, #174	; 0xae
 8008b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b52:	e004      	b.n	8008b5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008b54:	2303      	movs	r3, #3
 8008b56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b58:	e001      	b.n	8008b5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	88db      	ldrh	r3, [r3, #6]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d110      	bne.n	8008b88 <USBD_StdItfReq+0xc0>
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10d      	bne.n	8008b88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fdf1 	bl	8009754 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b72:	e009      	b.n	8008b88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fd21 	bl	80095be <USBD_CtlError>
          break;
 8008b7c:	e004      	b.n	8008b88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fd1c 	bl	80095be <USBD_CtlError>
          break;
 8008b86:	e000      	b.n	8008b8a <USBD_StdItfReq+0xc2>
          break;
 8008b88:	bf00      	nop
      }
      break;
 8008b8a:	e004      	b.n	8008b96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fd15 	bl	80095be <USBD_CtlError>
      break;
 8008b94:	bf00      	nop
  }

  return ret;
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	889b      	ldrh	r3, [r3, #4]
 8008bb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bbc:	2b40      	cmp	r3, #64	; 0x40
 8008bbe:	d007      	beq.n	8008bd0 <USBD_StdEPReq+0x30>
 8008bc0:	2b40      	cmp	r3, #64	; 0x40
 8008bc2:	f200 817f 	bhi.w	8008ec4 <USBD_StdEPReq+0x324>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d02a      	beq.n	8008c20 <USBD_StdEPReq+0x80>
 8008bca:	2b20      	cmp	r3, #32
 8008bcc:	f040 817a 	bne.w	8008ec4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff fe83 	bl	80088e0 <USBD_CoreFindEP>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bde:	7b7b      	ldrb	r3, [r7, #13]
 8008be0:	2bff      	cmp	r3, #255	; 0xff
 8008be2:	f000 8174 	beq.w	8008ece <USBD_StdEPReq+0x32e>
 8008be6:	7b7b      	ldrb	r3, [r7, #13]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f040 8170 	bne.w	8008ece <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008bee:	7b7a      	ldrb	r2, [r7, #13]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008bf6:	7b7a      	ldrb	r2, [r7, #13]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	32ae      	adds	r2, #174	; 0xae
 8008bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 8163 	beq.w	8008ece <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c08:	7b7a      	ldrb	r2, [r7, #13]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	32ae      	adds	r2, #174	; 0xae
 8008c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	4798      	blx	r3
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c1e:	e156      	b.n	8008ece <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	785b      	ldrb	r3, [r3, #1]
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d008      	beq.n	8008c3a <USBD_StdEPReq+0x9a>
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	f300 8145 	bgt.w	8008eb8 <USBD_StdEPReq+0x318>
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 809b 	beq.w	8008d6a <USBD_StdEPReq+0x1ca>
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d03c      	beq.n	8008cb2 <USBD_StdEPReq+0x112>
 8008c38:	e13e      	b.n	8008eb8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d002      	beq.n	8008c4c <USBD_StdEPReq+0xac>
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d016      	beq.n	8008c78 <USBD_StdEPReq+0xd8>
 8008c4a:	e02c      	b.n	8008ca6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00d      	beq.n	8008c6e <USBD_StdEPReq+0xce>
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	2b80      	cmp	r3, #128	; 0x80
 8008c56:	d00a      	beq.n	8008c6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 f9bf 	bl	8009fe0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c62:	2180      	movs	r1, #128	; 0x80
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 f9bb 	bl	8009fe0 <USBD_LL_StallEP>
 8008c6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c6c:	e020      	b.n	8008cb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fca4 	bl	80095be <USBD_CtlError>
              break;
 8008c76:	e01b      	b.n	8008cb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	885b      	ldrh	r3, [r3, #2]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10e      	bne.n	8008c9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00b      	beq.n	8008c9e <USBD_StdEPReq+0xfe>
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	2b80      	cmp	r3, #128	; 0x80
 8008c8a:	d008      	beq.n	8008c9e <USBD_StdEPReq+0xfe>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	88db      	ldrh	r3, [r3, #6]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d104      	bne.n	8008c9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f9a1 	bl	8009fe0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fd58 	bl	8009754 <USBD_CtlSendStatus>

              break;
 8008ca4:	e004      	b.n	8008cb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fc88 	bl	80095be <USBD_CtlError>
              break;
 8008cae:	bf00      	nop
          }
          break;
 8008cb0:	e107      	b.n	8008ec2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d002      	beq.n	8008cc4 <USBD_StdEPReq+0x124>
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d016      	beq.n	8008cf0 <USBD_StdEPReq+0x150>
 8008cc2:	e04b      	b.n	8008d5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00d      	beq.n	8008ce6 <USBD_StdEPReq+0x146>
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	2b80      	cmp	r3, #128	; 0x80
 8008cce:	d00a      	beq.n	8008ce6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 f983 	bl	8009fe0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cda:	2180      	movs	r1, #128	; 0x80
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 f97f 	bl	8009fe0 <USBD_LL_StallEP>
 8008ce2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ce4:	e040      	b.n	8008d68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fc68 	bl	80095be <USBD_CtlError>
              break;
 8008cee:	e03b      	b.n	8008d68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	885b      	ldrh	r3, [r3, #2]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d136      	bne.n	8008d66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cf8:	7bbb      	ldrb	r3, [r7, #14]
 8008cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d004      	beq.n	8008d0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d02:	7bbb      	ldrb	r3, [r7, #14]
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 f989 	bl	800a01e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fd21 	bl	8009754 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7ff fde2 	bl	80088e0 <USBD_CoreFindEP>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d20:	7b7b      	ldrb	r3, [r7, #13]
 8008d22:	2bff      	cmp	r3, #255	; 0xff
 8008d24:	d01f      	beq.n	8008d66 <USBD_StdEPReq+0x1c6>
 8008d26:	7b7b      	ldrb	r3, [r7, #13]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d11c      	bne.n	8008d66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008d2c:	7b7a      	ldrb	r2, [r7, #13]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008d34:	7b7a      	ldrb	r2, [r7, #13]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	32ae      	adds	r2, #174	; 0xae
 8008d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d010      	beq.n	8008d66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d44:	7b7a      	ldrb	r2, [r7, #13]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	32ae      	adds	r2, #174	; 0xae
 8008d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	4798      	blx	r3
 8008d56:	4603      	mov	r3, r0
 8008d58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008d5a:	e004      	b.n	8008d66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fc2d 	bl	80095be <USBD_CtlError>
              break;
 8008d64:	e000      	b.n	8008d68 <USBD_StdEPReq+0x1c8>
              break;
 8008d66:	bf00      	nop
          }
          break;
 8008d68:	e0ab      	b.n	8008ec2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d002      	beq.n	8008d7c <USBD_StdEPReq+0x1dc>
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d032      	beq.n	8008de0 <USBD_StdEPReq+0x240>
 8008d7a:	e097      	b.n	8008eac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d007      	beq.n	8008d92 <USBD_StdEPReq+0x1f2>
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
 8008d84:	2b80      	cmp	r3, #128	; 0x80
 8008d86:	d004      	beq.n	8008d92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fc17 	bl	80095be <USBD_CtlError>
                break;
 8008d90:	e091      	b.n	8008eb6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	da0b      	bge.n	8008db2 <USBD_StdEPReq+0x212>
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	3310      	adds	r3, #16
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	4413      	add	r3, r2
 8008dae:	3304      	adds	r3, #4
 8008db0:	e00b      	b.n	8008dca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008db2:	7bbb      	ldrb	r3, [r7, #14]
 8008db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008db8:	4613      	mov	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	3304      	adds	r3, #4
 8008dca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fc61 	bl	80096a0 <USBD_CtlSendData>
              break;
 8008dde:	e06a      	b.n	8008eb6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	da11      	bge.n	8008e0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	f003 020f 	and.w	r2, r3, #15
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	3324      	adds	r3, #36	; 0x24
 8008dfc:	881b      	ldrh	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d117      	bne.n	8008e32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fbda 	bl	80095be <USBD_CtlError>
                  break;
 8008e0a:	e054      	b.n	8008eb6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	f003 020f 	and.w	r2, r3, #15
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	4613      	mov	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d104      	bne.n	8008e32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fbc7 	bl	80095be <USBD_CtlError>
                  break;
 8008e30:	e041      	b.n	8008eb6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	da0b      	bge.n	8008e52 <USBD_StdEPReq+0x2b2>
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
 8008e3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e40:	4613      	mov	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	3310      	adds	r3, #16
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	3304      	adds	r3, #4
 8008e50:	e00b      	b.n	8008e6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e58:	4613      	mov	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	4413      	add	r3, r2
 8008e68:	3304      	adds	r3, #4
 8008e6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e6c:	7bbb      	ldrb	r3, [r7, #14]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <USBD_StdEPReq+0x2d8>
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	2b80      	cmp	r3, #128	; 0x80
 8008e76:	d103      	bne.n	8008e80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	e00e      	b.n	8008e9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	4619      	mov	r1, r3
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f001 f8e9 	bl	800a05c <USBD_LL_IsStallEP>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2201      	movs	r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	e002      	b.n	8008e9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fbfb 	bl	80096a0 <USBD_CtlSendData>
              break;
 8008eaa:	e004      	b.n	8008eb6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fb85 	bl	80095be <USBD_CtlError>
              break;
 8008eb4:	bf00      	nop
          }
          break;
 8008eb6:	e004      	b.n	8008ec2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fb7f 	bl	80095be <USBD_CtlError>
          break;
 8008ec0:	bf00      	nop
      }
      break;
 8008ec2:	e005      	b.n	8008ed0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fb79 	bl	80095be <USBD_CtlError>
      break;
 8008ecc:	e000      	b.n	8008ed0 <USBD_StdEPReq+0x330>
      break;
 8008ece:	bf00      	nop
  }

  return ret;
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	885b      	ldrh	r3, [r3, #2]
 8008ef6:	0a1b      	lsrs	r3, r3, #8
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	3b01      	subs	r3, #1
 8008efc:	2b0e      	cmp	r3, #14
 8008efe:	f200 8152 	bhi.w	80091a6 <USBD_GetDescriptor+0x2ca>
 8008f02:	a201      	add	r2, pc, #4	; (adr r2, 8008f08 <USBD_GetDescriptor+0x2c>)
 8008f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f08:	08008f79 	.word	0x08008f79
 8008f0c:	08008f91 	.word	0x08008f91
 8008f10:	08008fd1 	.word	0x08008fd1
 8008f14:	080091a7 	.word	0x080091a7
 8008f18:	080091a7 	.word	0x080091a7
 8008f1c:	08009147 	.word	0x08009147
 8008f20:	08009173 	.word	0x08009173
 8008f24:	080091a7 	.word	0x080091a7
 8008f28:	080091a7 	.word	0x080091a7
 8008f2c:	080091a7 	.word	0x080091a7
 8008f30:	080091a7 	.word	0x080091a7
 8008f34:	080091a7 	.word	0x080091a7
 8008f38:	080091a7 	.word	0x080091a7
 8008f3c:	080091a7 	.word	0x080091a7
 8008f40:	08008f45 	.word	0x08008f45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f56:	69db      	ldr	r3, [r3, #28]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	7c12      	ldrb	r2, [r2, #16]
 8008f5c:	f107 0108 	add.w	r1, r7, #8
 8008f60:	4610      	mov	r0, r2
 8008f62:	4798      	blx	r3
 8008f64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f66:	e126      	b.n	80091b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fb27 	bl	80095be <USBD_CtlError>
        err++;
 8008f70:	7afb      	ldrb	r3, [r7, #11]
 8008f72:	3301      	adds	r3, #1
 8008f74:	72fb      	strb	r3, [r7, #11]
      break;
 8008f76:	e11e      	b.n	80091b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	7c12      	ldrb	r2, [r2, #16]
 8008f84:	f107 0108 	add.w	r1, r7, #8
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4798      	blx	r3
 8008f8c:	60f8      	str	r0, [r7, #12]
      break;
 8008f8e:	e112      	b.n	80091b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7c1b      	ldrb	r3, [r3, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10d      	bne.n	8008fb4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa0:	f107 0208 	add.w	r2, r7, #8
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4798      	blx	r3
 8008fa8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3301      	adds	r3, #1
 8008fae:	2202      	movs	r2, #2
 8008fb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008fb2:	e100      	b.n	80091b6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	f107 0208 	add.w	r2, r7, #8
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4798      	blx	r3
 8008fc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	2202      	movs	r2, #2
 8008fcc:	701a      	strb	r2, [r3, #0]
      break;
 8008fce:	e0f2      	b.n	80091b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	885b      	ldrh	r3, [r3, #2]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b05      	cmp	r3, #5
 8008fd8:	f200 80ac 	bhi.w	8009134 <USBD_GetDescriptor+0x258>
 8008fdc:	a201      	add	r2, pc, #4	; (adr r2, 8008fe4 <USBD_GetDescriptor+0x108>)
 8008fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe2:	bf00      	nop
 8008fe4:	08008ffd 	.word	0x08008ffd
 8008fe8:	08009031 	.word	0x08009031
 8008fec:	08009065 	.word	0x08009065
 8008ff0:	08009099 	.word	0x08009099
 8008ff4:	080090cd 	.word	0x080090cd
 8008ff8:	08009101 	.word	0x08009101
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00b      	beq.n	8009020 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	7c12      	ldrb	r2, [r2, #16]
 8009014:	f107 0108 	add.w	r1, r7, #8
 8009018:	4610      	mov	r0, r2
 800901a:	4798      	blx	r3
 800901c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901e:	e091      	b.n	8009144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 facb 	bl	80095be <USBD_CtlError>
            err++;
 8009028:	7afb      	ldrb	r3, [r7, #11]
 800902a:	3301      	adds	r3, #1
 800902c:	72fb      	strb	r3, [r7, #11]
          break;
 800902e:	e089      	b.n	8009144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	7c12      	ldrb	r2, [r2, #16]
 8009048:	f107 0108 	add.w	r1, r7, #8
 800904c:	4610      	mov	r0, r2
 800904e:	4798      	blx	r3
 8009050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009052:	e077      	b.n	8009144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fab1 	bl	80095be <USBD_CtlError>
            err++;
 800905c:	7afb      	ldrb	r3, [r7, #11]
 800905e:	3301      	adds	r3, #1
 8009060:	72fb      	strb	r3, [r7, #11]
          break;
 8009062:	e06f      	b.n	8009144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00b      	beq.n	8009088 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	7c12      	ldrb	r2, [r2, #16]
 800907c:	f107 0108 	add.w	r1, r7, #8
 8009080:	4610      	mov	r0, r2
 8009082:	4798      	blx	r3
 8009084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009086:	e05d      	b.n	8009144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa97 	bl	80095be <USBD_CtlError>
            err++;
 8009090:	7afb      	ldrb	r3, [r7, #11]
 8009092:	3301      	adds	r3, #1
 8009094:	72fb      	strb	r3, [r7, #11]
          break;
 8009096:	e055      	b.n	8009144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	7c12      	ldrb	r2, [r2, #16]
 80090b0:	f107 0108 	add.w	r1, r7, #8
 80090b4:	4610      	mov	r0, r2
 80090b6:	4798      	blx	r3
 80090b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ba:	e043      	b.n	8009144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fa7d 	bl	80095be <USBD_CtlError>
            err++;
 80090c4:	7afb      	ldrb	r3, [r7, #11]
 80090c6:	3301      	adds	r3, #1
 80090c8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ca:	e03b      	b.n	8009144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00b      	beq.n	80090f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	7c12      	ldrb	r2, [r2, #16]
 80090e4:	f107 0108 	add.w	r1, r7, #8
 80090e8:	4610      	mov	r0, r2
 80090ea:	4798      	blx	r3
 80090ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ee:	e029      	b.n	8009144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa63 	bl	80095be <USBD_CtlError>
            err++;
 80090f8:	7afb      	ldrb	r3, [r7, #11]
 80090fa:	3301      	adds	r3, #1
 80090fc:	72fb      	strb	r3, [r7, #11]
          break;
 80090fe:	e021      	b.n	8009144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00b      	beq.n	8009124 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	7c12      	ldrb	r2, [r2, #16]
 8009118:	f107 0108 	add.w	r1, r7, #8
 800911c:	4610      	mov	r0, r2
 800911e:	4798      	blx	r3
 8009120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009122:	e00f      	b.n	8009144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fa49 	bl	80095be <USBD_CtlError>
            err++;
 800912c:	7afb      	ldrb	r3, [r7, #11]
 800912e:	3301      	adds	r3, #1
 8009130:	72fb      	strb	r3, [r7, #11]
          break;
 8009132:	e007      	b.n	8009144 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fa41 	bl	80095be <USBD_CtlError>
          err++;
 800913c:	7afb      	ldrb	r3, [r7, #11]
 800913e:	3301      	adds	r3, #1
 8009140:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009142:	bf00      	nop
      }
      break;
 8009144:	e037      	b.n	80091b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	7c1b      	ldrb	r3, [r3, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d109      	bne.n	8009162 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009156:	f107 0208 	add.w	r2, r7, #8
 800915a:	4610      	mov	r0, r2
 800915c:	4798      	blx	r3
 800915e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009160:	e029      	b.n	80091b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fa2a 	bl	80095be <USBD_CtlError>
        err++;
 800916a:	7afb      	ldrb	r3, [r7, #11]
 800916c:	3301      	adds	r3, #1
 800916e:	72fb      	strb	r3, [r7, #11]
      break;
 8009170:	e021      	b.n	80091b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	7c1b      	ldrb	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10d      	bne.n	8009196 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009182:	f107 0208 	add.w	r2, r7, #8
 8009186:	4610      	mov	r0, r2
 8009188:	4798      	blx	r3
 800918a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3301      	adds	r3, #1
 8009190:	2207      	movs	r2, #7
 8009192:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009194:	e00f      	b.n	80091b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fa10 	bl	80095be <USBD_CtlError>
        err++;
 800919e:	7afb      	ldrb	r3, [r7, #11]
 80091a0:	3301      	adds	r3, #1
 80091a2:	72fb      	strb	r3, [r7, #11]
      break;
 80091a4:	e007      	b.n	80091b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fa08 	bl	80095be <USBD_CtlError>
      err++;
 80091ae:	7afb      	ldrb	r3, [r7, #11]
 80091b0:	3301      	adds	r3, #1
 80091b2:	72fb      	strb	r3, [r7, #11]
      break;
 80091b4:	bf00      	nop
  }

  if (err != 0U)
 80091b6:	7afb      	ldrb	r3, [r7, #11]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d11e      	bne.n	80091fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	88db      	ldrh	r3, [r3, #6]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d016      	beq.n	80091f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80091c4:	893b      	ldrh	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00e      	beq.n	80091e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	88da      	ldrh	r2, [r3, #6]
 80091ce:	893b      	ldrh	r3, [r7, #8]
 80091d0:	4293      	cmp	r3, r2
 80091d2:	bf28      	it	cs
 80091d4:	4613      	movcs	r3, r2
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091da:	893b      	ldrh	r3, [r7, #8]
 80091dc:	461a      	mov	r2, r3
 80091de:	68f9      	ldr	r1, [r7, #12]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fa5d 	bl	80096a0 <USBD_CtlSendData>
 80091e6:	e009      	b.n	80091fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f9e7 	bl	80095be <USBD_CtlError>
 80091f0:	e004      	b.n	80091fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 faae 	bl	8009754 <USBD_CtlSendStatus>
 80091f8:	e000      	b.n	80091fc <USBD_GetDescriptor+0x320>
    return;
 80091fa:	bf00      	nop
  }
}
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop

08009204 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	889b      	ldrh	r3, [r3, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d131      	bne.n	800927a <USBD_SetAddress+0x76>
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	88db      	ldrh	r3, [r3, #6]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d12d      	bne.n	800927a <USBD_SetAddress+0x76>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	885b      	ldrh	r3, [r3, #2]
 8009222:	2b7f      	cmp	r3, #127	; 0x7f
 8009224:	d829      	bhi.n	800927a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	885b      	ldrh	r3, [r3, #2]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009230:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b03      	cmp	r3, #3
 800923c:	d104      	bne.n	8009248 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f9bc 	bl	80095be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009246:	e01d      	b.n	8009284 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	7bfa      	ldrb	r2, [r7, #15]
 800924c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 ff2d 	bl	800a0b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fa7a 	bl	8009754 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d004      	beq.n	8009270 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2202      	movs	r2, #2
 800926a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926e:	e009      	b.n	8009284 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009278:	e004      	b.n	8009284 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f99e 	bl	80095be <USBD_CtlError>
  }
}
 8009282:	bf00      	nop
 8009284:	bf00      	nop
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	885b      	ldrh	r3, [r3, #2]
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	4b4e      	ldr	r3, [pc, #312]	; (80093dc <USBD_SetConfig+0x150>)
 80092a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092a4:	4b4d      	ldr	r3, [pc, #308]	; (80093dc <USBD_SetConfig+0x150>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d905      	bls.n	80092b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f985 	bl	80095be <USBD_CtlError>
    return USBD_FAIL;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e08c      	b.n	80093d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d002      	beq.n	80092ca <USBD_SetConfig+0x3e>
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d029      	beq.n	800931c <USBD_SetConfig+0x90>
 80092c8:	e075      	b.n	80093b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80092ca:	4b44      	ldr	r3, [pc, #272]	; (80093dc <USBD_SetConfig+0x150>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d020      	beq.n	8009314 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80092d2:	4b42      	ldr	r3, [pc, #264]	; (80093dc <USBD_SetConfig+0x150>)
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092dc:	4b3f      	ldr	r3, [pc, #252]	; (80093dc <USBD_SetConfig+0x150>)
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7fe ffb7 	bl	8008256 <USBD_SetClassConfig>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d008      	beq.n	8009304 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f962 	bl	80095be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2202      	movs	r2, #2
 80092fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009302:	e065      	b.n	80093d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fa25 	bl	8009754 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2203      	movs	r2, #3
 800930e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009312:	e05d      	b.n	80093d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fa1d 	bl	8009754 <USBD_CtlSendStatus>
      break;
 800931a:	e059      	b.n	80093d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800931c:	4b2f      	ldr	r3, [pc, #188]	; (80093dc <USBD_SetConfig+0x150>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d112      	bne.n	800934a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2202      	movs	r2, #2
 8009328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800932c:	4b2b      	ldr	r3, [pc, #172]	; (80093dc <USBD_SetConfig+0x150>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	461a      	mov	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009336:	4b29      	ldr	r3, [pc, #164]	; (80093dc <USBD_SetConfig+0x150>)
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7fe ffa6 	bl	800828e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fa06 	bl	8009754 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009348:	e042      	b.n	80093d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800934a:	4b24      	ldr	r3, [pc, #144]	; (80093dc <USBD_SetConfig+0x150>)
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d02a      	beq.n	80093ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	b2db      	uxtb	r3, r3
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7fe ff94 	bl	800828e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009366:	4b1d      	ldr	r3, [pc, #116]	; (80093dc <USBD_SetConfig+0x150>)
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009370:	4b1a      	ldr	r3, [pc, #104]	; (80093dc <USBD_SetConfig+0x150>)
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7fe ff6d 	bl	8008256 <USBD_SetClassConfig>
 800937c:	4603      	mov	r3, r0
 800937e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00f      	beq.n	80093a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f918 	bl	80095be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	b2db      	uxtb	r3, r3
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7fe ff79 	bl	800828e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2202      	movs	r2, #2
 80093a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80093a4:	e014      	b.n	80093d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f9d4 	bl	8009754 <USBD_CtlSendStatus>
      break;
 80093ac:	e010      	b.n	80093d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f9d0 	bl	8009754 <USBD_CtlSendStatus>
      break;
 80093b4:	e00c      	b.n	80093d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f900 	bl	80095be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093be:	4b07      	ldr	r3, [pc, #28]	; (80093dc <USBD_SetConfig+0x150>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7fe ff62 	bl	800828e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80093ca:	2303      	movs	r3, #3
 80093cc:	73fb      	strb	r3, [r7, #15]
      break;
 80093ce:	bf00      	nop
  }

  return ret;
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	200004a4 	.word	0x200004a4

080093e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	88db      	ldrh	r3, [r3, #6]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d004      	beq.n	80093fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f8e2 	bl	80095be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093fa:	e023      	b.n	8009444 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b02      	cmp	r3, #2
 8009406:	dc02      	bgt.n	800940e <USBD_GetConfig+0x2e>
 8009408:	2b00      	cmp	r3, #0
 800940a:	dc03      	bgt.n	8009414 <USBD_GetConfig+0x34>
 800940c:	e015      	b.n	800943a <USBD_GetConfig+0x5a>
 800940e:	2b03      	cmp	r3, #3
 8009410:	d00b      	beq.n	800942a <USBD_GetConfig+0x4a>
 8009412:	e012      	b.n	800943a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3308      	adds	r3, #8
 800941e:	2201      	movs	r2, #1
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f93c 	bl	80096a0 <USBD_CtlSendData>
        break;
 8009428:	e00c      	b.n	8009444 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	3304      	adds	r3, #4
 800942e:	2201      	movs	r2, #1
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f934 	bl	80096a0 <USBD_CtlSendData>
        break;
 8009438:	e004      	b.n	8009444 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f8be 	bl	80095be <USBD_CtlError>
        break;
 8009442:	bf00      	nop
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945c:	b2db      	uxtb	r3, r3
 800945e:	3b01      	subs	r3, #1
 8009460:	2b02      	cmp	r3, #2
 8009462:	d81e      	bhi.n	80094a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	88db      	ldrh	r3, [r3, #6]
 8009468:	2b02      	cmp	r3, #2
 800946a:	d004      	beq.n	8009476 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f8a5 	bl	80095be <USBD_CtlError>
        break;
 8009474:	e01a      	b.n	80094ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009482:	2b00      	cmp	r3, #0
 8009484:	d005      	beq.n	8009492 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f043 0202 	orr.w	r2, r3, #2
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	330c      	adds	r3, #12
 8009496:	2202      	movs	r2, #2
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f900 	bl	80096a0 <USBD_CtlSendData>
      break;
 80094a0:	e004      	b.n	80094ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f88a 	bl	80095be <USBD_CtlError>
      break;
 80094aa:	bf00      	nop
  }
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	885b      	ldrh	r3, [r3, #2]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d107      	bne.n	80094d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f940 	bl	8009754 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80094d4:	e013      	b.n	80094fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	885b      	ldrh	r3, [r3, #2]
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d10b      	bne.n	80094f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	889b      	ldrh	r3, [r3, #4]
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f930 	bl	8009754 <USBD_CtlSendStatus>
}
 80094f4:	e003      	b.n	80094fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f860 	bl	80095be <USBD_CtlError>
}
 80094fe:	bf00      	nop
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009516:	b2db      	uxtb	r3, r3
 8009518:	3b01      	subs	r3, #1
 800951a:	2b02      	cmp	r3, #2
 800951c:	d80b      	bhi.n	8009536 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	885b      	ldrh	r3, [r3, #2]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d10c      	bne.n	8009540 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f910 	bl	8009754 <USBD_CtlSendStatus>
      }
      break;
 8009534:	e004      	b.n	8009540 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f840 	bl	80095be <USBD_CtlError>
      break;
 800953e:	e000      	b.n	8009542 <USBD_ClrFeature+0x3c>
      break;
 8009540:	bf00      	nop
  }
}
 8009542:	bf00      	nop
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	781a      	ldrb	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3301      	adds	r3, #1
 8009564:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	781a      	ldrb	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3301      	adds	r3, #1
 8009572:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f7ff fa17 	bl	80089a8 <SWAPBYTE>
 800957a:	4603      	mov	r3, r0
 800957c:	461a      	mov	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3301      	adds	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	3301      	adds	r3, #1
 800958c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7ff fa0a 	bl	80089a8 <SWAPBYTE>
 8009594:	4603      	mov	r3, r0
 8009596:	461a      	mov	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3301      	adds	r3, #1
 80095a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3301      	adds	r3, #1
 80095a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f7ff f9fd 	bl	80089a8 <SWAPBYTE>
 80095ae:	4603      	mov	r3, r0
 80095b0:	461a      	mov	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	80da      	strh	r2, [r3, #6]
}
 80095b6:	bf00      	nop
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095c8:	2180      	movs	r1, #128	; 0x80
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fd08 	bl	8009fe0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095d0:	2100      	movs	r1, #0
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fd04 	bl	8009fe0 <USBD_LL_StallEP>
}
 80095d8:	bf00      	nop
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d036      	beq.n	8009664 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80095fa:	6938      	ldr	r0, [r7, #16]
 80095fc:	f000 f836 	bl	800966c <USBD_GetLen>
 8009600:	4603      	mov	r3, r0
 8009602:	3301      	adds	r3, #1
 8009604:	b29b      	uxth	r3, r3
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	b29a      	uxth	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	4413      	add	r3, r2
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	7812      	ldrb	r2, [r2, #0]
 8009618:	701a      	strb	r2, [r3, #0]
  idx++;
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	3301      	adds	r3, #1
 800961e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009620:	7dfb      	ldrb	r3, [r7, #23]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	4413      	add	r3, r2
 8009626:	2203      	movs	r2, #3
 8009628:	701a      	strb	r2, [r3, #0]
  idx++;
 800962a:	7dfb      	ldrb	r3, [r7, #23]
 800962c:	3301      	adds	r3, #1
 800962e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009630:	e013      	b.n	800965a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009632:	7dfb      	ldrb	r3, [r7, #23]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	4413      	add	r3, r2
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	7812      	ldrb	r2, [r2, #0]
 800963c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	3301      	adds	r3, #1
 8009642:	613b      	str	r3, [r7, #16]
    idx++;
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	3301      	adds	r3, #1
 8009648:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800964a:	7dfb      	ldrb	r3, [r7, #23]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	4413      	add	r3, r2
 8009650:	2200      	movs	r2, #0
 8009652:	701a      	strb	r2, [r3, #0]
    idx++;
 8009654:	7dfb      	ldrb	r3, [r7, #23]
 8009656:	3301      	adds	r3, #1
 8009658:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e7      	bne.n	8009632 <USBD_GetString+0x52>
 8009662:	e000      	b.n	8009666 <USBD_GetString+0x86>
    return;
 8009664:	bf00      	nop
  }
}
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009674:	2300      	movs	r3, #0
 8009676:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800967c:	e005      	b.n	800968a <USBD_GetLen+0x1e>
  {
    len++;
 800967e:	7bfb      	ldrb	r3, [r7, #15]
 8009680:	3301      	adds	r3, #1
 8009682:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	3301      	adds	r3, #1
 8009688:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1f5      	bne.n	800967e <USBD_GetLen+0x12>
  }

  return len;
 8009692:	7bfb      	ldrb	r3, [r7, #15]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2202      	movs	r2, #2
 80096b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	2100      	movs	r1, #0
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 fd13 	bl	800a0f2 <USBD_LL_Transmit>

  return USBD_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b084      	sub	sp, #16
 80096da:	af00      	add	r7, sp, #0
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	2100      	movs	r1, #0
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 fd02 	bl	800a0f2 <USBD_LL_Transmit>

  return USBD_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2203      	movs	r2, #3
 8009708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	2100      	movs	r1, #0
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 fd06 	bl	800a134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	2100      	movs	r1, #0
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 fcf5 	bl	800a134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2204      	movs	r2, #4
 8009760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009764:	2300      	movs	r3, #0
 8009766:	2200      	movs	r2, #0
 8009768:	2100      	movs	r1, #0
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fcc1 	bl	800a0f2 <USBD_LL_Transmit>

  return USBD_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b082      	sub	sp, #8
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2205      	movs	r2, #5
 8009786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800978a:	2300      	movs	r3, #0
 800978c:	2200      	movs	r2, #0
 800978e:	2100      	movs	r1, #0
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fccf 	bl	800a134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80097a4:	2200      	movs	r2, #0
 80097a6:	4912      	ldr	r1, [pc, #72]	; (80097f0 <MX_USB_DEVICE_Init+0x50>)
 80097a8:	4812      	ldr	r0, [pc, #72]	; (80097f4 <MX_USB_DEVICE_Init+0x54>)
 80097aa:	f7fe fcd7 	bl	800815c <USBD_Init>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80097b4:	f7f7 ffe0 	bl	8001778 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80097b8:	490f      	ldr	r1, [pc, #60]	; (80097f8 <MX_USB_DEVICE_Init+0x58>)
 80097ba:	480e      	ldr	r0, [pc, #56]	; (80097f4 <MX_USB_DEVICE_Init+0x54>)
 80097bc:	f7fe fcfe 	bl	80081bc <USBD_RegisterClass>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80097c6:	f7f7 ffd7 	bl	8001778 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80097ca:	490c      	ldr	r1, [pc, #48]	; (80097fc <MX_USB_DEVICE_Init+0x5c>)
 80097cc:	4809      	ldr	r0, [pc, #36]	; (80097f4 <MX_USB_DEVICE_Init+0x54>)
 80097ce:	f7fe fbf5 	bl	8007fbc <USBD_CDC_RegisterInterface>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80097d8:	f7f7 ffce 	bl	8001778 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80097dc:	4805      	ldr	r0, [pc, #20]	; (80097f4 <MX_USB_DEVICE_Init+0x54>)
 80097de:	f7fe fd23 	bl	8008228 <USBD_Start>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80097e8:	f7f7 ffc6 	bl	8001778 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80097ec:	bf00      	nop
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	200000ac 	.word	0x200000ac
 80097f4:	200004a8 	.word	0x200004a8
 80097f8:	20000018 	.word	0x20000018
 80097fc:	20000098 	.word	0x20000098

08009800 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009804:	2200      	movs	r2, #0
 8009806:	4905      	ldr	r1, [pc, #20]	; (800981c <CDC_Init_FS+0x1c>)
 8009808:	4805      	ldr	r0, [pc, #20]	; (8009820 <CDC_Init_FS+0x20>)
 800980a:	f7fe fbf1 	bl	8007ff0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800980e:	4905      	ldr	r1, [pc, #20]	; (8009824 <CDC_Init_FS+0x24>)
 8009810:	4803      	ldr	r0, [pc, #12]	; (8009820 <CDC_Init_FS+0x20>)
 8009812:	f7fe fc0f 	bl	8008034 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009816:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009818:	4618      	mov	r0, r3
 800981a:	bd80      	pop	{r7, pc}
 800981c:	20000f84 	.word	0x20000f84
 8009820:	200004a8 	.word	0x200004a8
 8009824:	20000784 	.word	0x20000784

08009828 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009828:	b480      	push	{r7}
 800982a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800982c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800982e:	4618      	mov	r0, r3
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	4603      	mov	r3, r0
 8009840:	6039      	str	r1, [r7, #0]
 8009842:	71fb      	strb	r3, [r7, #7]
 8009844:	4613      	mov	r3, r2
 8009846:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	2b23      	cmp	r3, #35	; 0x23
 800984c:	d84a      	bhi.n	80098e4 <CDC_Control_FS+0xac>
 800984e:	a201      	add	r2, pc, #4	; (adr r2, 8009854 <CDC_Control_FS+0x1c>)
 8009850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009854:	080098e5 	.word	0x080098e5
 8009858:	080098e5 	.word	0x080098e5
 800985c:	080098e5 	.word	0x080098e5
 8009860:	080098e5 	.word	0x080098e5
 8009864:	080098e5 	.word	0x080098e5
 8009868:	080098e5 	.word	0x080098e5
 800986c:	080098e5 	.word	0x080098e5
 8009870:	080098e5 	.word	0x080098e5
 8009874:	080098e5 	.word	0x080098e5
 8009878:	080098e5 	.word	0x080098e5
 800987c:	080098e5 	.word	0x080098e5
 8009880:	080098e5 	.word	0x080098e5
 8009884:	080098e5 	.word	0x080098e5
 8009888:	080098e5 	.word	0x080098e5
 800988c:	080098e5 	.word	0x080098e5
 8009890:	080098e5 	.word	0x080098e5
 8009894:	080098e5 	.word	0x080098e5
 8009898:	080098e5 	.word	0x080098e5
 800989c:	080098e5 	.word	0x080098e5
 80098a0:	080098e5 	.word	0x080098e5
 80098a4:	080098e5 	.word	0x080098e5
 80098a8:	080098e5 	.word	0x080098e5
 80098ac:	080098e5 	.word	0x080098e5
 80098b0:	080098e5 	.word	0x080098e5
 80098b4:	080098e5 	.word	0x080098e5
 80098b8:	080098e5 	.word	0x080098e5
 80098bc:	080098e5 	.word	0x080098e5
 80098c0:	080098e5 	.word	0x080098e5
 80098c4:	080098e5 	.word	0x080098e5
 80098c8:	080098e5 	.word	0x080098e5
 80098cc:	080098e5 	.word	0x080098e5
 80098d0:	080098e5 	.word	0x080098e5
 80098d4:	080098e5 	.word	0x080098e5
 80098d8:	080098e5 	.word	0x080098e5
 80098dc:	080098e5 	.word	0x080098e5
 80098e0:	080098e5 	.word	0x080098e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80098e4:	bf00      	nop
  }

  return (USBD_OK);
 80098e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	4805      	ldr	r0, [pc, #20]	; (8009918 <CDC_Receive_FS+0x24>)
 8009902:	f7fe fb97 	bl	8008034 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009906:	4804      	ldr	r0, [pc, #16]	; (8009918 <CDC_Receive_FS+0x24>)
 8009908:	f7fe fbf2 	bl	80080f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800990c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	200004a8 	.word	0x200004a8

0800991c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800992c:	4b0d      	ldr	r3, [pc, #52]	; (8009964 <CDC_Transmit_FS+0x48>)
 800992e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009932:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800993e:	2301      	movs	r3, #1
 8009940:	e00b      	b.n	800995a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009942:	887b      	ldrh	r3, [r7, #2]
 8009944:	461a      	mov	r2, r3
 8009946:	6879      	ldr	r1, [r7, #4]
 8009948:	4806      	ldr	r0, [pc, #24]	; (8009964 <CDC_Transmit_FS+0x48>)
 800994a:	f7fe fb51 	bl	8007ff0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800994e:	4805      	ldr	r0, [pc, #20]	; (8009964 <CDC_Transmit_FS+0x48>)
 8009950:	f7fe fb8e 	bl	8008070 <USBD_CDC_TransmitPacket>
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009958:	7bfb      	ldrb	r3, [r7, #15]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	200004a8 	.word	0x200004a8

08009968 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	4613      	mov	r3, r2
 8009974:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800997a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800997e:	4618      	mov	r0, r3
 8009980:	371c      	adds	r7, #28
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
	...

0800998c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	6039      	str	r1, [r7, #0]
 8009996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2212      	movs	r2, #18
 800999c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800999e:	4b03      	ldr	r3, [pc, #12]	; (80099ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	200000cc 	.word	0x200000cc

080099b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	4603      	mov	r3, r0
 80099b8:	6039      	str	r1, [r7, #0]
 80099ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2204      	movs	r2, #4
 80099c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099c2:	4b03      	ldr	r3, [pc, #12]	; (80099d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	200000ec 	.word	0x200000ec

080099d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	4603      	mov	r3, r0
 80099dc:	6039      	str	r1, [r7, #0]
 80099de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099e0:	79fb      	ldrb	r3, [r7, #7]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d105      	bne.n	80099f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	4907      	ldr	r1, [pc, #28]	; (8009a08 <USBD_FS_ProductStrDescriptor+0x34>)
 80099ea:	4808      	ldr	r0, [pc, #32]	; (8009a0c <USBD_FS_ProductStrDescriptor+0x38>)
 80099ec:	f7ff fdf8 	bl	80095e0 <USBD_GetString>
 80099f0:	e004      	b.n	80099fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	4904      	ldr	r1, [pc, #16]	; (8009a08 <USBD_FS_ProductStrDescriptor+0x34>)
 80099f6:	4805      	ldr	r0, [pc, #20]	; (8009a0c <USBD_FS_ProductStrDescriptor+0x38>)
 80099f8:	f7ff fdf2 	bl	80095e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099fc:	4b02      	ldr	r3, [pc, #8]	; (8009a08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20001784 	.word	0x20001784
 8009a0c:	0800eaac 	.word	0x0800eaac

08009a10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	6039      	str	r1, [r7, #0]
 8009a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	4904      	ldr	r1, [pc, #16]	; (8009a30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a20:	4804      	ldr	r0, [pc, #16]	; (8009a34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a22:	f7ff fddd 	bl	80095e0 <USBD_GetString>
  return USBD_StrDesc;
 8009a26:	4b02      	ldr	r3, [pc, #8]	; (8009a30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	20001784 	.word	0x20001784
 8009a34:	0800eac4 	.word	0x0800eac4

08009a38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	6039      	str	r1, [r7, #0]
 8009a42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	221a      	movs	r2, #26
 8009a48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a4a:	f000 f855 	bl	8009af8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a4e:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	200000f0 	.word	0x200000f0

08009a5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	6039      	str	r1, [r7, #0]
 8009a66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a68:	79fb      	ldrb	r3, [r7, #7]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d105      	bne.n	8009a7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	4907      	ldr	r1, [pc, #28]	; (8009a90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a72:	4808      	ldr	r0, [pc, #32]	; (8009a94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a74:	f7ff fdb4 	bl	80095e0 <USBD_GetString>
 8009a78:	e004      	b.n	8009a84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	4904      	ldr	r1, [pc, #16]	; (8009a90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a7e:	4805      	ldr	r0, [pc, #20]	; (8009a94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a80:	f7ff fdae 	bl	80095e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a84:	4b02      	ldr	r3, [pc, #8]	; (8009a90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20001784 	.word	0x20001784
 8009a94:	0800ead8 	.word	0x0800ead8

08009a98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	6039      	str	r1, [r7, #0]
 8009aa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009aa4:	79fb      	ldrb	r3, [r7, #7]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d105      	bne.n	8009ab6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	4907      	ldr	r1, [pc, #28]	; (8009acc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009aae:	4808      	ldr	r0, [pc, #32]	; (8009ad0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ab0:	f7ff fd96 	bl	80095e0 <USBD_GetString>
 8009ab4:	e004      	b.n	8009ac0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	4904      	ldr	r1, [pc, #16]	; (8009acc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009aba:	4805      	ldr	r0, [pc, #20]	; (8009ad0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009abc:	f7ff fd90 	bl	80095e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ac0:	4b02      	ldr	r3, [pc, #8]	; (8009acc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20001784 	.word	0x20001784
 8009ad0:	0800eae4 	.word	0x0800eae4

08009ad4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	4603      	mov	r3, r0
 8009adc:	6039      	str	r1, [r7, #0]
 8009ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	220c      	movs	r2, #12
 8009ae4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009ae6:	4b03      	ldr	r3, [pc, #12]	; (8009af4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	200000e0 	.word	0x200000e0

08009af8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009afe:	4b0f      	ldr	r3, [pc, #60]	; (8009b3c <Get_SerialNum+0x44>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b04:	4b0e      	ldr	r3, [pc, #56]	; (8009b40 <Get_SerialNum+0x48>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b0a:	4b0e      	ldr	r3, [pc, #56]	; (8009b44 <Get_SerialNum+0x4c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4413      	add	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d009      	beq.n	8009b32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b1e:	2208      	movs	r2, #8
 8009b20:	4909      	ldr	r1, [pc, #36]	; (8009b48 <Get_SerialNum+0x50>)
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 f814 	bl	8009b50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b28:	2204      	movs	r2, #4
 8009b2a:	4908      	ldr	r1, [pc, #32]	; (8009b4c <Get_SerialNum+0x54>)
 8009b2c:	68b8      	ldr	r0, [r7, #8]
 8009b2e:	f000 f80f 	bl	8009b50 <IntToUnicode>
  }
}
 8009b32:	bf00      	nop
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	1fff7a10 	.word	0x1fff7a10
 8009b40:	1fff7a14 	.word	0x1fff7a14
 8009b44:	1fff7a18 	.word	0x1fff7a18
 8009b48:	200000f2 	.word	0x200000f2
 8009b4c:	20000102 	.word	0x20000102

08009b50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b62:	2300      	movs	r3, #0
 8009b64:	75fb      	strb	r3, [r7, #23]
 8009b66:	e027      	b.n	8009bb8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	0f1b      	lsrs	r3, r3, #28
 8009b6c:	2b09      	cmp	r3, #9
 8009b6e:	d80b      	bhi.n	8009b88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	0f1b      	lsrs	r3, r3, #28
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
 8009b78:	005b      	lsls	r3, r3, #1
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	440b      	add	r3, r1
 8009b80:	3230      	adds	r2, #48	; 0x30
 8009b82:	b2d2      	uxtb	r2, r2
 8009b84:	701a      	strb	r2, [r3, #0]
 8009b86:	e00a      	b.n	8009b9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	0f1b      	lsrs	r3, r3, #28
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	4619      	mov	r1, r3
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	440b      	add	r3, r1
 8009b98:	3237      	adds	r2, #55	; 0x37
 8009b9a:	b2d2      	uxtb	r2, r2
 8009b9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	011b      	lsls	r3, r3, #4
 8009ba2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
 8009ba6:	005b      	lsls	r3, r3, #1
 8009ba8:	3301      	adds	r3, #1
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	4413      	add	r3, r2
 8009bae:	2200      	movs	r2, #0
 8009bb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	75fb      	strb	r3, [r7, #23]
 8009bb8:	7dfa      	ldrb	r2, [r7, #23]
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d3d3      	bcc.n	8009b68 <IntToUnicode+0x18>
  }
}
 8009bc0:	bf00      	nop
 8009bc2:	bf00      	nop
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
	...

08009bd0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b0a0      	sub	sp, #128	; 0x80
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009bdc:	2200      	movs	r2, #0
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	605a      	str	r2, [r3, #4]
 8009be2:	609a      	str	r2, [r3, #8]
 8009be4:	60da      	str	r2, [r3, #12]
 8009be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009be8:	f107 0310 	add.w	r3, r7, #16
 8009bec:	225c      	movs	r2, #92	; 0x5c
 8009bee:	2100      	movs	r1, #0
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f001 fb00 	bl	800b1f6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bfe:	d149      	bne.n	8009c94 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c04:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009c06:	2300      	movs	r3, #0
 8009c08:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009c0a:	f107 0310 	add.w	r3, r7, #16
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fa fa72 	bl	80040f8 <HAL_RCCEx_PeriphCLKConfig>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009c1a:	f7f7 fdad 	bl	8001778 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	4b1e      	ldr	r3, [pc, #120]	; (8009c9c <HAL_PCD_MspInit+0xcc>)
 8009c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c26:	4a1d      	ldr	r2, [pc, #116]	; (8009c9c <HAL_PCD_MspInit+0xcc>)
 8009c28:	f043 0301 	orr.w	r3, r3, #1
 8009c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8009c2e:	4b1b      	ldr	r3, [pc, #108]	; (8009c9c <HAL_PCD_MspInit+0xcc>)
 8009c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c40:	2302      	movs	r3, #2
 8009c42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c44:	2300      	movs	r3, #0
 8009c46:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c4c:	230a      	movs	r3, #10
 8009c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009c54:	4619      	mov	r1, r3
 8009c56:	4812      	ldr	r0, [pc, #72]	; (8009ca0 <HAL_PCD_MspInit+0xd0>)
 8009c58:	f7f8 fcd2 	bl	8002600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c5c:	4b0f      	ldr	r3, [pc, #60]	; (8009c9c <HAL_PCD_MspInit+0xcc>)
 8009c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c60:	4a0e      	ldr	r2, [pc, #56]	; (8009c9c <HAL_PCD_MspInit+0xcc>)
 8009c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c66:	6353      	str	r3, [r2, #52]	; 0x34
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60bb      	str	r3, [r7, #8]
 8009c6c:	4b0b      	ldr	r3, [pc, #44]	; (8009c9c <HAL_PCD_MspInit+0xcc>)
 8009c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c70:	4a0a      	ldr	r2, [pc, #40]	; (8009c9c <HAL_PCD_MspInit+0xcc>)
 8009c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c76:	6453      	str	r3, [r2, #68]	; 0x44
 8009c78:	4b08      	ldr	r3, [pc, #32]	; (8009c9c <HAL_PCD_MspInit+0xcc>)
 8009c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c80:	60bb      	str	r3, [r7, #8]
 8009c82:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c84:	2200      	movs	r2, #0
 8009c86:	2100      	movs	r1, #0
 8009c88:	2043      	movs	r0, #67	; 0x43
 8009c8a:	f7f8 f976 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c8e:	2043      	movs	r0, #67	; 0x43
 8009c90:	f7f8 f98f 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c94:	bf00      	nop
 8009c96:	3780      	adds	r7, #128	; 0x80
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	40023800 	.word	0x40023800
 8009ca0:	40020000 	.word	0x40020000

08009ca4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f7fe fb01 	bl	80082c2 <USBD_LL_SetupStage>
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009cda:	78fa      	ldrb	r2, [r7, #3]
 8009cdc:	6879      	ldr	r1, [r7, #4]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	00db      	lsls	r3, r3, #3
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	440b      	add	r3, r1
 8009ce8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	78fb      	ldrb	r3, [r7, #3]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	f7fe fb3b 	bl	800836c <USBD_LL_DataOutStage>
}
 8009cf6:	bf00      	nop
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	460b      	mov	r3, r1
 8009d08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009d10:	78fa      	ldrb	r2, [r7, #3]
 8009d12:	6879      	ldr	r1, [r7, #4]
 8009d14:	4613      	mov	r3, r2
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	4413      	add	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	440b      	add	r3, r1
 8009d1e:	3320      	adds	r3, #32
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	4619      	mov	r1, r3
 8009d26:	f7fe fbd4 	bl	80084d2 <USBD_LL_DataInStage>
}
 8009d2a:	bf00      	nop
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b082      	sub	sp, #8
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fe fd0e 	bl	8008762 <USBD_LL_SOF>
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d56:	2301      	movs	r3, #1
 8009d58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	79db      	ldrb	r3, [r3, #7]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d102      	bne.n	8009d68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]
 8009d66:	e008      	b.n	8009d7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	79db      	ldrb	r3, [r3, #7]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d102      	bne.n	8009d76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009d70:	2301      	movs	r3, #1
 8009d72:	73fb      	strb	r3, [r7, #15]
 8009d74:	e001      	b.n	8009d7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009d76:	f7f7 fcff 	bl	8001778 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009d80:	7bfa      	ldrb	r2, [r7, #15]
 8009d82:	4611      	mov	r1, r2
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fe fca8 	bl	80086da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fe fc50 	bl	8008636 <USBD_LL_Reset>
}
 8009d96:	bf00      	nop
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe fca3 	bl	80086fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	6812      	ldr	r2, [r2, #0]
 8009dc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	7adb      	ldrb	r3, [r3, #11]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d005      	beq.n	8009de0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dd4:	4b04      	ldr	r3, [pc, #16]	; (8009de8 <HAL_PCD_SuspendCallback+0x48>)
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	4a03      	ldr	r2, [pc, #12]	; (8009de8 <HAL_PCD_SuspendCallback+0x48>)
 8009dda:	f043 0306 	orr.w	r3, r3, #6
 8009dde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	e000ed00 	.word	0xe000ed00

08009dec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fe fc99 	bl	8008732 <USBD_LL_Resume>
}
 8009e00:	bf00      	nop
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009e1a:	78fa      	ldrb	r2, [r7, #3]
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe fcf1 	bl	8008806 <USBD_LL_IsoOUTIncomplete>
}
 8009e24:	bf00      	nop
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009e3e:	78fa      	ldrb	r2, [r7, #3]
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe fcad 	bl	80087a2 <USBD_LL_IsoINIncomplete>
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fd03 	bl	800886a <USBD_LL_DevConnected>
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe fd00 	bl	8008880 <USBD_LL_DevDisconnected>
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d13c      	bne.n	8009f12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e98:	4a20      	ldr	r2, [pc, #128]	; (8009f1c <USBD_LL_Init+0x94>)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a1e      	ldr	r2, [pc, #120]	; (8009f1c <USBD_LL_Init+0x94>)
 8009ea4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ea8:	4b1c      	ldr	r3, [pc, #112]	; (8009f1c <USBD_LL_Init+0x94>)
 8009eaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009eae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009eb0:	4b1a      	ldr	r3, [pc, #104]	; (8009f1c <USBD_LL_Init+0x94>)
 8009eb2:	2206      	movs	r2, #6
 8009eb4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009eb6:	4b19      	ldr	r3, [pc, #100]	; (8009f1c <USBD_LL_Init+0x94>)
 8009eb8:	2202      	movs	r2, #2
 8009eba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ebc:	4b17      	ldr	r3, [pc, #92]	; (8009f1c <USBD_LL_Init+0x94>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ec2:	4b16      	ldr	r3, [pc, #88]	; (8009f1c <USBD_LL_Init+0x94>)
 8009ec4:	2202      	movs	r2, #2
 8009ec6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ec8:	4b14      	ldr	r3, [pc, #80]	; (8009f1c <USBD_LL_Init+0x94>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ece:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <USBD_LL_Init+0x94>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ed4:	4b11      	ldr	r3, [pc, #68]	; (8009f1c <USBD_LL_Init+0x94>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009eda:	4b10      	ldr	r3, [pc, #64]	; (8009f1c <USBD_LL_Init+0x94>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ee0:	4b0e      	ldr	r3, [pc, #56]	; (8009f1c <USBD_LL_Init+0x94>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ee6:	480d      	ldr	r0, [pc, #52]	; (8009f1c <USBD_LL_Init+0x94>)
 8009ee8:	f7f8 fd50 	bl	800298c <HAL_PCD_Init>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ef2:	f7f7 fc41 	bl	8001778 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ef6:	2180      	movs	r1, #128	; 0x80
 8009ef8:	4808      	ldr	r0, [pc, #32]	; (8009f1c <USBD_LL_Init+0x94>)
 8009efa:	f7f9 ffae 	bl	8003e5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009efe:	2240      	movs	r2, #64	; 0x40
 8009f00:	2100      	movs	r1, #0
 8009f02:	4806      	ldr	r0, [pc, #24]	; (8009f1c <USBD_LL_Init+0x94>)
 8009f04:	f7f9 ff62 	bl	8003dcc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f08:	2280      	movs	r2, #128	; 0x80
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	4803      	ldr	r0, [pc, #12]	; (8009f1c <USBD_LL_Init+0x94>)
 8009f0e:	f7f9 ff5d 	bl	8003dcc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	20001984 	.word	0x20001984

08009f20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7f8 fe3e 	bl	8002bb8 <HAL_PCD_Start>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 f990 	bl	800a268 <USBD_Get_USB_Status>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	4608      	mov	r0, r1
 8009f60:	4611      	mov	r1, r2
 8009f62:	461a      	mov	r2, r3
 8009f64:	4603      	mov	r3, r0
 8009f66:	70fb      	strb	r3, [r7, #3]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70bb      	strb	r3, [r7, #2]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f7e:	78bb      	ldrb	r3, [r7, #2]
 8009f80:	883a      	ldrh	r2, [r7, #0]
 8009f82:	78f9      	ldrb	r1, [r7, #3]
 8009f84:	f7f9 fb3f 	bl	8003606 <HAL_PCD_EP_Open>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f000 f96a 	bl	800a268 <USBD_Get_USB_Status>
 8009f94:	4603      	mov	r3, r0
 8009f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	460b      	mov	r3, r1
 8009fac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fbc:	78fa      	ldrb	r2, [r7, #3]
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7f9 fb88 	bl	80036d6 <HAL_PCD_EP_Close>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f000 f94b 	bl	800a268 <USBD_Get_USB_Status>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ffa:	78fa      	ldrb	r2, [r7, #3]
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7f9 fc40 	bl	8003884 <HAL_PCD_EP_SetStall>
 800a004:	4603      	mov	r3, r0
 800a006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 f92c 	bl	800a268 <USBD_Get_USB_Status>
 800a010:	4603      	mov	r3, r0
 800a012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a014:	7bbb      	ldrb	r3, [r7, #14]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	460b      	mov	r3, r1
 800a028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a038:	78fa      	ldrb	r2, [r7, #3]
 800a03a:	4611      	mov	r1, r2
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7f9 fc84 	bl	800394a <HAL_PCD_EP_ClrStall>
 800a042:	4603      	mov	r3, r0
 800a044:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 f90d 	bl	800a268 <USBD_Get_USB_Status>
 800a04e:	4603      	mov	r3, r0
 800a050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a052:	7bbb      	ldrb	r3, [r7, #14]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a06e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a074:	2b00      	cmp	r3, #0
 800a076:	da0b      	bge.n	800a090 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a078:	78fb      	ldrb	r3, [r7, #3]
 800a07a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a07e:	68f9      	ldr	r1, [r7, #12]
 800a080:	4613      	mov	r3, r2
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	4413      	add	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	440b      	add	r3, r1
 800a08a:	3316      	adds	r3, #22
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	e00b      	b.n	800a0a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a096:	68f9      	ldr	r1, [r7, #12]
 800a098:	4613      	mov	r3, r2
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	4413      	add	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	440b      	add	r3, r1
 800a0a2:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a0a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0ce:	78fa      	ldrb	r2, [r7, #3]
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7f9 fa73 	bl	80035be <HAL_PCD_SetAddress>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 f8c2 	bl	800a268 <USBD_Get_USB_Status>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b086      	sub	sp, #24
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	60f8      	str	r0, [r7, #12]
 800a0fa:	607a      	str	r2, [r7, #4]
 800a0fc:	603b      	str	r3, [r7, #0]
 800a0fe:	460b      	mov	r3, r1
 800a100:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a110:	7af9      	ldrb	r1, [r7, #11]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	f7f9 fb7b 	bl	8003810 <HAL_PCD_EP_Transmit>
 800a11a:	4603      	mov	r3, r0
 800a11c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a11e:	7dfb      	ldrb	r3, [r7, #23]
 800a120:	4618      	mov	r0, r3
 800a122:	f000 f8a1 	bl	800a268 <USBD_Get_USB_Status>
 800a126:	4603      	mov	r3, r0
 800a128:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a12a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	607a      	str	r2, [r7, #4]
 800a13e:	603b      	str	r3, [r7, #0]
 800a140:	460b      	mov	r3, r1
 800a142:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a152:	7af9      	ldrb	r1, [r7, #11]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	f7f9 fb07 	bl	800376a <HAL_PCD_EP_Receive>
 800a15c:	4603      	mov	r3, r0
 800a15e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	4618      	mov	r0, r3
 800a164:	f000 f880 	bl	800a268 <USBD_Get_USB_Status>
 800a168:	4603      	mov	r3, r0
 800a16a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a16c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b082      	sub	sp, #8
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	460b      	mov	r3, r1
 800a180:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a188:	78fa      	ldrb	r2, [r7, #3]
 800a18a:	4611      	mov	r1, r2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7f9 fb27 	bl	80037e0 <HAL_PCD_EP_GetRxCount>
 800a192:	4603      	mov	r3, r0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a1a8:	78fb      	ldrb	r3, [r7, #3]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <HAL_PCDEx_LPM_Callback+0x18>
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d01f      	beq.n	800a1f2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a1b2:	e03b      	b.n	800a22c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	7adb      	ldrb	r3, [r3, #11]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d007      	beq.n	800a1cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a1bc:	f7f7 f95c 	bl	8001478 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1c0:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <HAL_PCDEx_LPM_Callback+0x98>)
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	4a1b      	ldr	r2, [pc, #108]	; (800a234 <HAL_PCDEx_LPM_Callback+0x98>)
 800a1c6:	f023 0306 	bic.w	r3, r3, #6
 800a1ca:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	6812      	ldr	r2, [r2, #0]
 800a1da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1de:	f023 0301 	bic.w	r3, r3, #1
 800a1e2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe faa1 	bl	8008732 <USBD_LL_Resume>
    break;
 800a1f0:	e01c      	b.n	800a22c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	6812      	ldr	r2, [r2, #0]
 800a200:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a204:	f043 0301 	orr.w	r3, r3, #1
 800a208:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a210:	4618      	mov	r0, r3
 800a212:	f7fe fa72 	bl	80086fa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	7adb      	ldrb	r3, [r3, #11]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a21e:	4b05      	ldr	r3, [pc, #20]	; (800a234 <HAL_PCDEx_LPM_Callback+0x98>)
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	4a04      	ldr	r2, [pc, #16]	; (800a234 <HAL_PCDEx_LPM_Callback+0x98>)
 800a224:	f043 0306 	orr.w	r3, r3, #6
 800a228:	6113      	str	r3, [r2, #16]
    break;
 800a22a:	bf00      	nop
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	e000ed00 	.word	0xe000ed00

0800a238 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a240:	4b03      	ldr	r3, [pc, #12]	; (800a250 <USBD_static_malloc+0x18>)
}
 800a242:	4618      	mov	r0, r3
 800a244:	370c      	adds	r7, #12
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	20001e68 	.word	0x20001e68

0800a254 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]

}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a276:	79fb      	ldrb	r3, [r7, #7]
 800a278:	2b03      	cmp	r3, #3
 800a27a:	d817      	bhi.n	800a2ac <USBD_Get_USB_Status+0x44>
 800a27c:	a201      	add	r2, pc, #4	; (adr r2, 800a284 <USBD_Get_USB_Status+0x1c>)
 800a27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a282:	bf00      	nop
 800a284:	0800a295 	.word	0x0800a295
 800a288:	0800a29b 	.word	0x0800a29b
 800a28c:	0800a2a1 	.word	0x0800a2a1
 800a290:	0800a2a7 	.word	0x0800a2a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a294:	2300      	movs	r3, #0
 800a296:	73fb      	strb	r3, [r7, #15]
    break;
 800a298:	e00b      	b.n	800a2b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a29a:	2303      	movs	r3, #3
 800a29c:	73fb      	strb	r3, [r7, #15]
    break;
 800a29e:	e008      	b.n	800a2b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a4:	e005      	b.n	800a2b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2aa:	e002      	b.n	800a2b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b0:	bf00      	nop
  }
  return usb_status;
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <__cvt>:
 800a2c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c4:	ec55 4b10 	vmov	r4, r5, d0
 800a2c8:	2d00      	cmp	r5, #0
 800a2ca:	460e      	mov	r6, r1
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	462b      	mov	r3, r5
 800a2d0:	bfbb      	ittet	lt
 800a2d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a2d6:	461d      	movlt	r5, r3
 800a2d8:	2300      	movge	r3, #0
 800a2da:	232d      	movlt	r3, #45	; 0x2d
 800a2dc:	700b      	strb	r3, [r1, #0]
 800a2de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a2e4:	4691      	mov	r9, r2
 800a2e6:	f023 0820 	bic.w	r8, r3, #32
 800a2ea:	bfbc      	itt	lt
 800a2ec:	4622      	movlt	r2, r4
 800a2ee:	4614      	movlt	r4, r2
 800a2f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a2f4:	d005      	beq.n	800a302 <__cvt+0x42>
 800a2f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a2fa:	d100      	bne.n	800a2fe <__cvt+0x3e>
 800a2fc:	3601      	adds	r6, #1
 800a2fe:	2102      	movs	r1, #2
 800a300:	e000      	b.n	800a304 <__cvt+0x44>
 800a302:	2103      	movs	r1, #3
 800a304:	ab03      	add	r3, sp, #12
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	ab02      	add	r3, sp, #8
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	ec45 4b10 	vmov	d0, r4, r5
 800a310:	4653      	mov	r3, sl
 800a312:	4632      	mov	r2, r6
 800a314:	f001 f880 	bl	800b418 <_dtoa_r>
 800a318:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a31c:	4607      	mov	r7, r0
 800a31e:	d102      	bne.n	800a326 <__cvt+0x66>
 800a320:	f019 0f01 	tst.w	r9, #1
 800a324:	d022      	beq.n	800a36c <__cvt+0xac>
 800a326:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a32a:	eb07 0906 	add.w	r9, r7, r6
 800a32e:	d110      	bne.n	800a352 <__cvt+0x92>
 800a330:	783b      	ldrb	r3, [r7, #0]
 800a332:	2b30      	cmp	r3, #48	; 0x30
 800a334:	d10a      	bne.n	800a34c <__cvt+0x8c>
 800a336:	2200      	movs	r2, #0
 800a338:	2300      	movs	r3, #0
 800a33a:	4620      	mov	r0, r4
 800a33c:	4629      	mov	r1, r5
 800a33e:	f7f6 fbe3 	bl	8000b08 <__aeabi_dcmpeq>
 800a342:	b918      	cbnz	r0, 800a34c <__cvt+0x8c>
 800a344:	f1c6 0601 	rsb	r6, r6, #1
 800a348:	f8ca 6000 	str.w	r6, [sl]
 800a34c:	f8da 3000 	ldr.w	r3, [sl]
 800a350:	4499      	add	r9, r3
 800a352:	2200      	movs	r2, #0
 800a354:	2300      	movs	r3, #0
 800a356:	4620      	mov	r0, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	f7f6 fbd5 	bl	8000b08 <__aeabi_dcmpeq>
 800a35e:	b108      	cbz	r0, 800a364 <__cvt+0xa4>
 800a360:	f8cd 900c 	str.w	r9, [sp, #12]
 800a364:	2230      	movs	r2, #48	; 0x30
 800a366:	9b03      	ldr	r3, [sp, #12]
 800a368:	454b      	cmp	r3, r9
 800a36a:	d307      	bcc.n	800a37c <__cvt+0xbc>
 800a36c:	9b03      	ldr	r3, [sp, #12]
 800a36e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a370:	1bdb      	subs	r3, r3, r7
 800a372:	4638      	mov	r0, r7
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	b004      	add	sp, #16
 800a378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a37c:	1c59      	adds	r1, r3, #1
 800a37e:	9103      	str	r1, [sp, #12]
 800a380:	701a      	strb	r2, [r3, #0]
 800a382:	e7f0      	b.n	800a366 <__cvt+0xa6>

0800a384 <__exponent>:
 800a384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a386:	4603      	mov	r3, r0
 800a388:	2900      	cmp	r1, #0
 800a38a:	bfb8      	it	lt
 800a38c:	4249      	neglt	r1, r1
 800a38e:	f803 2b02 	strb.w	r2, [r3], #2
 800a392:	bfb4      	ite	lt
 800a394:	222d      	movlt	r2, #45	; 0x2d
 800a396:	222b      	movge	r2, #43	; 0x2b
 800a398:	2909      	cmp	r1, #9
 800a39a:	7042      	strb	r2, [r0, #1]
 800a39c:	dd2a      	ble.n	800a3f4 <__exponent+0x70>
 800a39e:	f10d 0207 	add.w	r2, sp, #7
 800a3a2:	4617      	mov	r7, r2
 800a3a4:	260a      	movs	r6, #10
 800a3a6:	4694      	mov	ip, r2
 800a3a8:	fb91 f5f6 	sdiv	r5, r1, r6
 800a3ac:	fb06 1415 	mls	r4, r6, r5, r1
 800a3b0:	3430      	adds	r4, #48	; 0x30
 800a3b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	2c63      	cmp	r4, #99	; 0x63
 800a3ba:	f102 32ff 	add.w	r2, r2, #4294967295
 800a3be:	4629      	mov	r1, r5
 800a3c0:	dcf1      	bgt.n	800a3a6 <__exponent+0x22>
 800a3c2:	3130      	adds	r1, #48	; 0x30
 800a3c4:	f1ac 0402 	sub.w	r4, ip, #2
 800a3c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a3cc:	1c41      	adds	r1, r0, #1
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	42ba      	cmp	r2, r7
 800a3d2:	d30a      	bcc.n	800a3ea <__exponent+0x66>
 800a3d4:	f10d 0209 	add.w	r2, sp, #9
 800a3d8:	eba2 020c 	sub.w	r2, r2, ip
 800a3dc:	42bc      	cmp	r4, r7
 800a3de:	bf88      	it	hi
 800a3e0:	2200      	movhi	r2, #0
 800a3e2:	4413      	add	r3, r2
 800a3e4:	1a18      	subs	r0, r3, r0
 800a3e6:	b003      	add	sp, #12
 800a3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a3ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a3f2:	e7ed      	b.n	800a3d0 <__exponent+0x4c>
 800a3f4:	2330      	movs	r3, #48	; 0x30
 800a3f6:	3130      	adds	r1, #48	; 0x30
 800a3f8:	7083      	strb	r3, [r0, #2]
 800a3fa:	70c1      	strb	r1, [r0, #3]
 800a3fc:	1d03      	adds	r3, r0, #4
 800a3fe:	e7f1      	b.n	800a3e4 <__exponent+0x60>

0800a400 <_printf_float>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	ed2d 8b02 	vpush	{d8}
 800a408:	b08d      	sub	sp, #52	; 0x34
 800a40a:	460c      	mov	r4, r1
 800a40c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a410:	4616      	mov	r6, r2
 800a412:	461f      	mov	r7, r3
 800a414:	4605      	mov	r5, r0
 800a416:	f000 fef7 	bl	800b208 <_localeconv_r>
 800a41a:	f8d0 a000 	ldr.w	sl, [r0]
 800a41e:	4650      	mov	r0, sl
 800a420:	f7f5 ff46 	bl	80002b0 <strlen>
 800a424:	2300      	movs	r3, #0
 800a426:	930a      	str	r3, [sp, #40]	; 0x28
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	9305      	str	r3, [sp, #20]
 800a42c:	f8d8 3000 	ldr.w	r3, [r8]
 800a430:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a434:	3307      	adds	r3, #7
 800a436:	f023 0307 	bic.w	r3, r3, #7
 800a43a:	f103 0208 	add.w	r2, r3, #8
 800a43e:	f8c8 2000 	str.w	r2, [r8]
 800a442:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a446:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a44a:	9307      	str	r3, [sp, #28]
 800a44c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a450:	ee08 0a10 	vmov	s16, r0
 800a454:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a458:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a45c:	4b9e      	ldr	r3, [pc, #632]	; (800a6d8 <_printf_float+0x2d8>)
 800a45e:	f04f 32ff 	mov.w	r2, #4294967295
 800a462:	f7f6 fb83 	bl	8000b6c <__aeabi_dcmpun>
 800a466:	bb88      	cbnz	r0, 800a4cc <_printf_float+0xcc>
 800a468:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a46c:	4b9a      	ldr	r3, [pc, #616]	; (800a6d8 <_printf_float+0x2d8>)
 800a46e:	f04f 32ff 	mov.w	r2, #4294967295
 800a472:	f7f6 fb5d 	bl	8000b30 <__aeabi_dcmple>
 800a476:	bb48      	cbnz	r0, 800a4cc <_printf_float+0xcc>
 800a478:	2200      	movs	r2, #0
 800a47a:	2300      	movs	r3, #0
 800a47c:	4640      	mov	r0, r8
 800a47e:	4649      	mov	r1, r9
 800a480:	f7f6 fb4c 	bl	8000b1c <__aeabi_dcmplt>
 800a484:	b110      	cbz	r0, 800a48c <_printf_float+0x8c>
 800a486:	232d      	movs	r3, #45	; 0x2d
 800a488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a48c:	4a93      	ldr	r2, [pc, #588]	; (800a6dc <_printf_float+0x2dc>)
 800a48e:	4b94      	ldr	r3, [pc, #592]	; (800a6e0 <_printf_float+0x2e0>)
 800a490:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a494:	bf94      	ite	ls
 800a496:	4690      	movls	r8, r2
 800a498:	4698      	movhi	r8, r3
 800a49a:	2303      	movs	r3, #3
 800a49c:	6123      	str	r3, [r4, #16]
 800a49e:	9b05      	ldr	r3, [sp, #20]
 800a4a0:	f023 0304 	bic.w	r3, r3, #4
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	f04f 0900 	mov.w	r9, #0
 800a4aa:	9700      	str	r7, [sp, #0]
 800a4ac:	4633      	mov	r3, r6
 800a4ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f000 f9da 	bl	800a86c <_printf_common>
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	f040 8090 	bne.w	800a5de <_printf_float+0x1de>
 800a4be:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c2:	b00d      	add	sp, #52	; 0x34
 800a4c4:	ecbd 8b02 	vpop	{d8}
 800a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4cc:	4642      	mov	r2, r8
 800a4ce:	464b      	mov	r3, r9
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	f7f6 fb4a 	bl	8000b6c <__aeabi_dcmpun>
 800a4d8:	b140      	cbz	r0, 800a4ec <_printf_float+0xec>
 800a4da:	464b      	mov	r3, r9
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	bfbc      	itt	lt
 800a4e0:	232d      	movlt	r3, #45	; 0x2d
 800a4e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a4e6:	4a7f      	ldr	r2, [pc, #508]	; (800a6e4 <_printf_float+0x2e4>)
 800a4e8:	4b7f      	ldr	r3, [pc, #508]	; (800a6e8 <_printf_float+0x2e8>)
 800a4ea:	e7d1      	b.n	800a490 <_printf_float+0x90>
 800a4ec:	6863      	ldr	r3, [r4, #4]
 800a4ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a4f2:	9206      	str	r2, [sp, #24]
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	d13f      	bne.n	800a578 <_printf_float+0x178>
 800a4f8:	2306      	movs	r3, #6
 800a4fa:	6063      	str	r3, [r4, #4]
 800a4fc:	9b05      	ldr	r3, [sp, #20]
 800a4fe:	6861      	ldr	r1, [r4, #4]
 800a500:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a504:	2300      	movs	r3, #0
 800a506:	9303      	str	r3, [sp, #12]
 800a508:	ab0a      	add	r3, sp, #40	; 0x28
 800a50a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a50e:	ab09      	add	r3, sp, #36	; 0x24
 800a510:	ec49 8b10 	vmov	d0, r8, r9
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	6022      	str	r2, [r4, #0]
 800a518:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a51c:	4628      	mov	r0, r5
 800a51e:	f7ff fecf 	bl	800a2c0 <__cvt>
 800a522:	9b06      	ldr	r3, [sp, #24]
 800a524:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a526:	2b47      	cmp	r3, #71	; 0x47
 800a528:	4680      	mov	r8, r0
 800a52a:	d108      	bne.n	800a53e <_printf_float+0x13e>
 800a52c:	1cc8      	adds	r0, r1, #3
 800a52e:	db02      	blt.n	800a536 <_printf_float+0x136>
 800a530:	6863      	ldr	r3, [r4, #4]
 800a532:	4299      	cmp	r1, r3
 800a534:	dd41      	ble.n	800a5ba <_printf_float+0x1ba>
 800a536:	f1ab 0302 	sub.w	r3, fp, #2
 800a53a:	fa5f fb83 	uxtb.w	fp, r3
 800a53e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a542:	d820      	bhi.n	800a586 <_printf_float+0x186>
 800a544:	3901      	subs	r1, #1
 800a546:	465a      	mov	r2, fp
 800a548:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a54c:	9109      	str	r1, [sp, #36]	; 0x24
 800a54e:	f7ff ff19 	bl	800a384 <__exponent>
 800a552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a554:	1813      	adds	r3, r2, r0
 800a556:	2a01      	cmp	r2, #1
 800a558:	4681      	mov	r9, r0
 800a55a:	6123      	str	r3, [r4, #16]
 800a55c:	dc02      	bgt.n	800a564 <_printf_float+0x164>
 800a55e:	6822      	ldr	r2, [r4, #0]
 800a560:	07d2      	lsls	r2, r2, #31
 800a562:	d501      	bpl.n	800a568 <_printf_float+0x168>
 800a564:	3301      	adds	r3, #1
 800a566:	6123      	str	r3, [r4, #16]
 800a568:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d09c      	beq.n	800a4aa <_printf_float+0xaa>
 800a570:	232d      	movs	r3, #45	; 0x2d
 800a572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a576:	e798      	b.n	800a4aa <_printf_float+0xaa>
 800a578:	9a06      	ldr	r2, [sp, #24]
 800a57a:	2a47      	cmp	r2, #71	; 0x47
 800a57c:	d1be      	bne.n	800a4fc <_printf_float+0xfc>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1bc      	bne.n	800a4fc <_printf_float+0xfc>
 800a582:	2301      	movs	r3, #1
 800a584:	e7b9      	b.n	800a4fa <_printf_float+0xfa>
 800a586:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a58a:	d118      	bne.n	800a5be <_printf_float+0x1be>
 800a58c:	2900      	cmp	r1, #0
 800a58e:	6863      	ldr	r3, [r4, #4]
 800a590:	dd0b      	ble.n	800a5aa <_printf_float+0x1aa>
 800a592:	6121      	str	r1, [r4, #16]
 800a594:	b913      	cbnz	r3, 800a59c <_printf_float+0x19c>
 800a596:	6822      	ldr	r2, [r4, #0]
 800a598:	07d0      	lsls	r0, r2, #31
 800a59a:	d502      	bpl.n	800a5a2 <_printf_float+0x1a2>
 800a59c:	3301      	adds	r3, #1
 800a59e:	440b      	add	r3, r1
 800a5a0:	6123      	str	r3, [r4, #16]
 800a5a2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a5a4:	f04f 0900 	mov.w	r9, #0
 800a5a8:	e7de      	b.n	800a568 <_printf_float+0x168>
 800a5aa:	b913      	cbnz	r3, 800a5b2 <_printf_float+0x1b2>
 800a5ac:	6822      	ldr	r2, [r4, #0]
 800a5ae:	07d2      	lsls	r2, r2, #31
 800a5b0:	d501      	bpl.n	800a5b6 <_printf_float+0x1b6>
 800a5b2:	3302      	adds	r3, #2
 800a5b4:	e7f4      	b.n	800a5a0 <_printf_float+0x1a0>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e7f2      	b.n	800a5a0 <_printf_float+0x1a0>
 800a5ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5c0:	4299      	cmp	r1, r3
 800a5c2:	db05      	blt.n	800a5d0 <_printf_float+0x1d0>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	6121      	str	r1, [r4, #16]
 800a5c8:	07d8      	lsls	r0, r3, #31
 800a5ca:	d5ea      	bpl.n	800a5a2 <_printf_float+0x1a2>
 800a5cc:	1c4b      	adds	r3, r1, #1
 800a5ce:	e7e7      	b.n	800a5a0 <_printf_float+0x1a0>
 800a5d0:	2900      	cmp	r1, #0
 800a5d2:	bfd4      	ite	le
 800a5d4:	f1c1 0202 	rsble	r2, r1, #2
 800a5d8:	2201      	movgt	r2, #1
 800a5da:	4413      	add	r3, r2
 800a5dc:	e7e0      	b.n	800a5a0 <_printf_float+0x1a0>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	055a      	lsls	r2, r3, #21
 800a5e2:	d407      	bmi.n	800a5f4 <_printf_float+0x1f4>
 800a5e4:	6923      	ldr	r3, [r4, #16]
 800a5e6:	4642      	mov	r2, r8
 800a5e8:	4631      	mov	r1, r6
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	47b8      	blx	r7
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	d12c      	bne.n	800a64c <_printf_float+0x24c>
 800a5f2:	e764      	b.n	800a4be <_printf_float+0xbe>
 800a5f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a5f8:	f240 80e0 	bls.w	800a7bc <_printf_float+0x3bc>
 800a5fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a600:	2200      	movs	r2, #0
 800a602:	2300      	movs	r3, #0
 800a604:	f7f6 fa80 	bl	8000b08 <__aeabi_dcmpeq>
 800a608:	2800      	cmp	r0, #0
 800a60a:	d034      	beq.n	800a676 <_printf_float+0x276>
 800a60c:	4a37      	ldr	r2, [pc, #220]	; (800a6ec <_printf_float+0x2ec>)
 800a60e:	2301      	movs	r3, #1
 800a610:	4631      	mov	r1, r6
 800a612:	4628      	mov	r0, r5
 800a614:	47b8      	blx	r7
 800a616:	3001      	adds	r0, #1
 800a618:	f43f af51 	beq.w	800a4be <_printf_float+0xbe>
 800a61c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a620:	429a      	cmp	r2, r3
 800a622:	db02      	blt.n	800a62a <_printf_float+0x22a>
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	07d8      	lsls	r0, r3, #31
 800a628:	d510      	bpl.n	800a64c <_printf_float+0x24c>
 800a62a:	ee18 3a10 	vmov	r3, s16
 800a62e:	4652      	mov	r2, sl
 800a630:	4631      	mov	r1, r6
 800a632:	4628      	mov	r0, r5
 800a634:	47b8      	blx	r7
 800a636:	3001      	adds	r0, #1
 800a638:	f43f af41 	beq.w	800a4be <_printf_float+0xbe>
 800a63c:	f04f 0800 	mov.w	r8, #0
 800a640:	f104 091a 	add.w	r9, r4, #26
 800a644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a646:	3b01      	subs	r3, #1
 800a648:	4543      	cmp	r3, r8
 800a64a:	dc09      	bgt.n	800a660 <_printf_float+0x260>
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	079b      	lsls	r3, r3, #30
 800a650:	f100 8107 	bmi.w	800a862 <_printf_float+0x462>
 800a654:	68e0      	ldr	r0, [r4, #12]
 800a656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a658:	4298      	cmp	r0, r3
 800a65a:	bfb8      	it	lt
 800a65c:	4618      	movlt	r0, r3
 800a65e:	e730      	b.n	800a4c2 <_printf_float+0xc2>
 800a660:	2301      	movs	r3, #1
 800a662:	464a      	mov	r2, r9
 800a664:	4631      	mov	r1, r6
 800a666:	4628      	mov	r0, r5
 800a668:	47b8      	blx	r7
 800a66a:	3001      	adds	r0, #1
 800a66c:	f43f af27 	beq.w	800a4be <_printf_float+0xbe>
 800a670:	f108 0801 	add.w	r8, r8, #1
 800a674:	e7e6      	b.n	800a644 <_printf_float+0x244>
 800a676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a678:	2b00      	cmp	r3, #0
 800a67a:	dc39      	bgt.n	800a6f0 <_printf_float+0x2f0>
 800a67c:	4a1b      	ldr	r2, [pc, #108]	; (800a6ec <_printf_float+0x2ec>)
 800a67e:	2301      	movs	r3, #1
 800a680:	4631      	mov	r1, r6
 800a682:	4628      	mov	r0, r5
 800a684:	47b8      	blx	r7
 800a686:	3001      	adds	r0, #1
 800a688:	f43f af19 	beq.w	800a4be <_printf_float+0xbe>
 800a68c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a690:	4313      	orrs	r3, r2
 800a692:	d102      	bne.n	800a69a <_printf_float+0x29a>
 800a694:	6823      	ldr	r3, [r4, #0]
 800a696:	07d9      	lsls	r1, r3, #31
 800a698:	d5d8      	bpl.n	800a64c <_printf_float+0x24c>
 800a69a:	ee18 3a10 	vmov	r3, s16
 800a69e:	4652      	mov	r2, sl
 800a6a0:	4631      	mov	r1, r6
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	47b8      	blx	r7
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	f43f af09 	beq.w	800a4be <_printf_float+0xbe>
 800a6ac:	f04f 0900 	mov.w	r9, #0
 800a6b0:	f104 0a1a 	add.w	sl, r4, #26
 800a6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b6:	425b      	negs	r3, r3
 800a6b8:	454b      	cmp	r3, r9
 800a6ba:	dc01      	bgt.n	800a6c0 <_printf_float+0x2c0>
 800a6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6be:	e792      	b.n	800a5e6 <_printf_float+0x1e6>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	4652      	mov	r2, sl
 800a6c4:	4631      	mov	r1, r6
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	47b8      	blx	r7
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	f43f aef7 	beq.w	800a4be <_printf_float+0xbe>
 800a6d0:	f109 0901 	add.w	r9, r9, #1
 800a6d4:	e7ee      	b.n	800a6b4 <_printf_float+0x2b4>
 800a6d6:	bf00      	nop
 800a6d8:	7fefffff 	.word	0x7fefffff
 800a6dc:	0800eb14 	.word	0x0800eb14
 800a6e0:	0800eb18 	.word	0x0800eb18
 800a6e4:	0800eb1c 	.word	0x0800eb1c
 800a6e8:	0800eb20 	.word	0x0800eb20
 800a6ec:	0800eb24 	.word	0x0800eb24
 800a6f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	bfa8      	it	ge
 800a6f8:	461a      	movge	r2, r3
 800a6fa:	2a00      	cmp	r2, #0
 800a6fc:	4691      	mov	r9, r2
 800a6fe:	dc37      	bgt.n	800a770 <_printf_float+0x370>
 800a700:	f04f 0b00 	mov.w	fp, #0
 800a704:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a708:	f104 021a 	add.w	r2, r4, #26
 800a70c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a70e:	9305      	str	r3, [sp, #20]
 800a710:	eba3 0309 	sub.w	r3, r3, r9
 800a714:	455b      	cmp	r3, fp
 800a716:	dc33      	bgt.n	800a780 <_printf_float+0x380>
 800a718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a71c:	429a      	cmp	r2, r3
 800a71e:	db3b      	blt.n	800a798 <_printf_float+0x398>
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	07da      	lsls	r2, r3, #31
 800a724:	d438      	bmi.n	800a798 <_printf_float+0x398>
 800a726:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a72a:	eba2 0903 	sub.w	r9, r2, r3
 800a72e:	9b05      	ldr	r3, [sp, #20]
 800a730:	1ad2      	subs	r2, r2, r3
 800a732:	4591      	cmp	r9, r2
 800a734:	bfa8      	it	ge
 800a736:	4691      	movge	r9, r2
 800a738:	f1b9 0f00 	cmp.w	r9, #0
 800a73c:	dc35      	bgt.n	800a7aa <_printf_float+0x3aa>
 800a73e:	f04f 0800 	mov.w	r8, #0
 800a742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a746:	f104 0a1a 	add.w	sl, r4, #26
 800a74a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a74e:	1a9b      	subs	r3, r3, r2
 800a750:	eba3 0309 	sub.w	r3, r3, r9
 800a754:	4543      	cmp	r3, r8
 800a756:	f77f af79 	ble.w	800a64c <_printf_float+0x24c>
 800a75a:	2301      	movs	r3, #1
 800a75c:	4652      	mov	r2, sl
 800a75e:	4631      	mov	r1, r6
 800a760:	4628      	mov	r0, r5
 800a762:	47b8      	blx	r7
 800a764:	3001      	adds	r0, #1
 800a766:	f43f aeaa 	beq.w	800a4be <_printf_float+0xbe>
 800a76a:	f108 0801 	add.w	r8, r8, #1
 800a76e:	e7ec      	b.n	800a74a <_printf_float+0x34a>
 800a770:	4613      	mov	r3, r2
 800a772:	4631      	mov	r1, r6
 800a774:	4642      	mov	r2, r8
 800a776:	4628      	mov	r0, r5
 800a778:	47b8      	blx	r7
 800a77a:	3001      	adds	r0, #1
 800a77c:	d1c0      	bne.n	800a700 <_printf_float+0x300>
 800a77e:	e69e      	b.n	800a4be <_printf_float+0xbe>
 800a780:	2301      	movs	r3, #1
 800a782:	4631      	mov	r1, r6
 800a784:	4628      	mov	r0, r5
 800a786:	9205      	str	r2, [sp, #20]
 800a788:	47b8      	blx	r7
 800a78a:	3001      	adds	r0, #1
 800a78c:	f43f ae97 	beq.w	800a4be <_printf_float+0xbe>
 800a790:	9a05      	ldr	r2, [sp, #20]
 800a792:	f10b 0b01 	add.w	fp, fp, #1
 800a796:	e7b9      	b.n	800a70c <_printf_float+0x30c>
 800a798:	ee18 3a10 	vmov	r3, s16
 800a79c:	4652      	mov	r2, sl
 800a79e:	4631      	mov	r1, r6
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	47b8      	blx	r7
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	d1be      	bne.n	800a726 <_printf_float+0x326>
 800a7a8:	e689      	b.n	800a4be <_printf_float+0xbe>
 800a7aa:	9a05      	ldr	r2, [sp, #20]
 800a7ac:	464b      	mov	r3, r9
 800a7ae:	4442      	add	r2, r8
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	47b8      	blx	r7
 800a7b6:	3001      	adds	r0, #1
 800a7b8:	d1c1      	bne.n	800a73e <_printf_float+0x33e>
 800a7ba:	e680      	b.n	800a4be <_printf_float+0xbe>
 800a7bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7be:	2a01      	cmp	r2, #1
 800a7c0:	dc01      	bgt.n	800a7c6 <_printf_float+0x3c6>
 800a7c2:	07db      	lsls	r3, r3, #31
 800a7c4:	d53a      	bpl.n	800a83c <_printf_float+0x43c>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	4642      	mov	r2, r8
 800a7ca:	4631      	mov	r1, r6
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	47b8      	blx	r7
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	f43f ae74 	beq.w	800a4be <_printf_float+0xbe>
 800a7d6:	ee18 3a10 	vmov	r3, s16
 800a7da:	4652      	mov	r2, sl
 800a7dc:	4631      	mov	r1, r6
 800a7de:	4628      	mov	r0, r5
 800a7e0:	47b8      	blx	r7
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	f43f ae6b 	beq.w	800a4be <_printf_float+0xbe>
 800a7e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a7f4:	f7f6 f988 	bl	8000b08 <__aeabi_dcmpeq>
 800a7f8:	b9d8      	cbnz	r0, 800a832 <_printf_float+0x432>
 800a7fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a7fe:	f108 0201 	add.w	r2, r8, #1
 800a802:	4631      	mov	r1, r6
 800a804:	4628      	mov	r0, r5
 800a806:	47b8      	blx	r7
 800a808:	3001      	adds	r0, #1
 800a80a:	d10e      	bne.n	800a82a <_printf_float+0x42a>
 800a80c:	e657      	b.n	800a4be <_printf_float+0xbe>
 800a80e:	2301      	movs	r3, #1
 800a810:	4652      	mov	r2, sl
 800a812:	4631      	mov	r1, r6
 800a814:	4628      	mov	r0, r5
 800a816:	47b8      	blx	r7
 800a818:	3001      	adds	r0, #1
 800a81a:	f43f ae50 	beq.w	800a4be <_printf_float+0xbe>
 800a81e:	f108 0801 	add.w	r8, r8, #1
 800a822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a824:	3b01      	subs	r3, #1
 800a826:	4543      	cmp	r3, r8
 800a828:	dcf1      	bgt.n	800a80e <_printf_float+0x40e>
 800a82a:	464b      	mov	r3, r9
 800a82c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a830:	e6da      	b.n	800a5e8 <_printf_float+0x1e8>
 800a832:	f04f 0800 	mov.w	r8, #0
 800a836:	f104 0a1a 	add.w	sl, r4, #26
 800a83a:	e7f2      	b.n	800a822 <_printf_float+0x422>
 800a83c:	2301      	movs	r3, #1
 800a83e:	4642      	mov	r2, r8
 800a840:	e7df      	b.n	800a802 <_printf_float+0x402>
 800a842:	2301      	movs	r3, #1
 800a844:	464a      	mov	r2, r9
 800a846:	4631      	mov	r1, r6
 800a848:	4628      	mov	r0, r5
 800a84a:	47b8      	blx	r7
 800a84c:	3001      	adds	r0, #1
 800a84e:	f43f ae36 	beq.w	800a4be <_printf_float+0xbe>
 800a852:	f108 0801 	add.w	r8, r8, #1
 800a856:	68e3      	ldr	r3, [r4, #12]
 800a858:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a85a:	1a5b      	subs	r3, r3, r1
 800a85c:	4543      	cmp	r3, r8
 800a85e:	dcf0      	bgt.n	800a842 <_printf_float+0x442>
 800a860:	e6f8      	b.n	800a654 <_printf_float+0x254>
 800a862:	f04f 0800 	mov.w	r8, #0
 800a866:	f104 0919 	add.w	r9, r4, #25
 800a86a:	e7f4      	b.n	800a856 <_printf_float+0x456>

0800a86c <_printf_common>:
 800a86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a870:	4616      	mov	r6, r2
 800a872:	4699      	mov	r9, r3
 800a874:	688a      	ldr	r2, [r1, #8]
 800a876:	690b      	ldr	r3, [r1, #16]
 800a878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a87c:	4293      	cmp	r3, r2
 800a87e:	bfb8      	it	lt
 800a880:	4613      	movlt	r3, r2
 800a882:	6033      	str	r3, [r6, #0]
 800a884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a888:	4607      	mov	r7, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	b10a      	cbz	r2, 800a892 <_printf_common+0x26>
 800a88e:	3301      	adds	r3, #1
 800a890:	6033      	str	r3, [r6, #0]
 800a892:	6823      	ldr	r3, [r4, #0]
 800a894:	0699      	lsls	r1, r3, #26
 800a896:	bf42      	ittt	mi
 800a898:	6833      	ldrmi	r3, [r6, #0]
 800a89a:	3302      	addmi	r3, #2
 800a89c:	6033      	strmi	r3, [r6, #0]
 800a89e:	6825      	ldr	r5, [r4, #0]
 800a8a0:	f015 0506 	ands.w	r5, r5, #6
 800a8a4:	d106      	bne.n	800a8b4 <_printf_common+0x48>
 800a8a6:	f104 0a19 	add.w	sl, r4, #25
 800a8aa:	68e3      	ldr	r3, [r4, #12]
 800a8ac:	6832      	ldr	r2, [r6, #0]
 800a8ae:	1a9b      	subs	r3, r3, r2
 800a8b0:	42ab      	cmp	r3, r5
 800a8b2:	dc26      	bgt.n	800a902 <_printf_common+0x96>
 800a8b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8b8:	1e13      	subs	r3, r2, #0
 800a8ba:	6822      	ldr	r2, [r4, #0]
 800a8bc:	bf18      	it	ne
 800a8be:	2301      	movne	r3, #1
 800a8c0:	0692      	lsls	r2, r2, #26
 800a8c2:	d42b      	bmi.n	800a91c <_printf_common+0xb0>
 800a8c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8c8:	4649      	mov	r1, r9
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	47c0      	blx	r8
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	d01e      	beq.n	800a910 <_printf_common+0xa4>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	6922      	ldr	r2, [r4, #16]
 800a8d6:	f003 0306 	and.w	r3, r3, #6
 800a8da:	2b04      	cmp	r3, #4
 800a8dc:	bf02      	ittt	eq
 800a8de:	68e5      	ldreq	r5, [r4, #12]
 800a8e0:	6833      	ldreq	r3, [r6, #0]
 800a8e2:	1aed      	subeq	r5, r5, r3
 800a8e4:	68a3      	ldr	r3, [r4, #8]
 800a8e6:	bf0c      	ite	eq
 800a8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8ec:	2500      	movne	r5, #0
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	bfc4      	itt	gt
 800a8f2:	1a9b      	subgt	r3, r3, r2
 800a8f4:	18ed      	addgt	r5, r5, r3
 800a8f6:	2600      	movs	r6, #0
 800a8f8:	341a      	adds	r4, #26
 800a8fa:	42b5      	cmp	r5, r6
 800a8fc:	d11a      	bne.n	800a934 <_printf_common+0xc8>
 800a8fe:	2000      	movs	r0, #0
 800a900:	e008      	b.n	800a914 <_printf_common+0xa8>
 800a902:	2301      	movs	r3, #1
 800a904:	4652      	mov	r2, sl
 800a906:	4649      	mov	r1, r9
 800a908:	4638      	mov	r0, r7
 800a90a:	47c0      	blx	r8
 800a90c:	3001      	adds	r0, #1
 800a90e:	d103      	bne.n	800a918 <_printf_common+0xac>
 800a910:	f04f 30ff 	mov.w	r0, #4294967295
 800a914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a918:	3501      	adds	r5, #1
 800a91a:	e7c6      	b.n	800a8aa <_printf_common+0x3e>
 800a91c:	18e1      	adds	r1, r4, r3
 800a91e:	1c5a      	adds	r2, r3, #1
 800a920:	2030      	movs	r0, #48	; 0x30
 800a922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a926:	4422      	add	r2, r4
 800a928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a92c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a930:	3302      	adds	r3, #2
 800a932:	e7c7      	b.n	800a8c4 <_printf_common+0x58>
 800a934:	2301      	movs	r3, #1
 800a936:	4622      	mov	r2, r4
 800a938:	4649      	mov	r1, r9
 800a93a:	4638      	mov	r0, r7
 800a93c:	47c0      	blx	r8
 800a93e:	3001      	adds	r0, #1
 800a940:	d0e6      	beq.n	800a910 <_printf_common+0xa4>
 800a942:	3601      	adds	r6, #1
 800a944:	e7d9      	b.n	800a8fa <_printf_common+0x8e>
	...

0800a948 <_printf_i>:
 800a948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a94c:	7e0f      	ldrb	r7, [r1, #24]
 800a94e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a950:	2f78      	cmp	r7, #120	; 0x78
 800a952:	4691      	mov	r9, r2
 800a954:	4680      	mov	r8, r0
 800a956:	460c      	mov	r4, r1
 800a958:	469a      	mov	sl, r3
 800a95a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a95e:	d807      	bhi.n	800a970 <_printf_i+0x28>
 800a960:	2f62      	cmp	r7, #98	; 0x62
 800a962:	d80a      	bhi.n	800a97a <_printf_i+0x32>
 800a964:	2f00      	cmp	r7, #0
 800a966:	f000 80d4 	beq.w	800ab12 <_printf_i+0x1ca>
 800a96a:	2f58      	cmp	r7, #88	; 0x58
 800a96c:	f000 80c0 	beq.w	800aaf0 <_printf_i+0x1a8>
 800a970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a978:	e03a      	b.n	800a9f0 <_printf_i+0xa8>
 800a97a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a97e:	2b15      	cmp	r3, #21
 800a980:	d8f6      	bhi.n	800a970 <_printf_i+0x28>
 800a982:	a101      	add	r1, pc, #4	; (adr r1, 800a988 <_printf_i+0x40>)
 800a984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a988:	0800a9e1 	.word	0x0800a9e1
 800a98c:	0800a9f5 	.word	0x0800a9f5
 800a990:	0800a971 	.word	0x0800a971
 800a994:	0800a971 	.word	0x0800a971
 800a998:	0800a971 	.word	0x0800a971
 800a99c:	0800a971 	.word	0x0800a971
 800a9a0:	0800a9f5 	.word	0x0800a9f5
 800a9a4:	0800a971 	.word	0x0800a971
 800a9a8:	0800a971 	.word	0x0800a971
 800a9ac:	0800a971 	.word	0x0800a971
 800a9b0:	0800a971 	.word	0x0800a971
 800a9b4:	0800aaf9 	.word	0x0800aaf9
 800a9b8:	0800aa21 	.word	0x0800aa21
 800a9bc:	0800aab3 	.word	0x0800aab3
 800a9c0:	0800a971 	.word	0x0800a971
 800a9c4:	0800a971 	.word	0x0800a971
 800a9c8:	0800ab1b 	.word	0x0800ab1b
 800a9cc:	0800a971 	.word	0x0800a971
 800a9d0:	0800aa21 	.word	0x0800aa21
 800a9d4:	0800a971 	.word	0x0800a971
 800a9d8:	0800a971 	.word	0x0800a971
 800a9dc:	0800aabb 	.word	0x0800aabb
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	1d1a      	adds	r2, r3, #4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	602a      	str	r2, [r5, #0]
 800a9e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e09f      	b.n	800ab34 <_printf_i+0x1ec>
 800a9f4:	6820      	ldr	r0, [r4, #0]
 800a9f6:	682b      	ldr	r3, [r5, #0]
 800a9f8:	0607      	lsls	r7, r0, #24
 800a9fa:	f103 0104 	add.w	r1, r3, #4
 800a9fe:	6029      	str	r1, [r5, #0]
 800aa00:	d501      	bpl.n	800aa06 <_printf_i+0xbe>
 800aa02:	681e      	ldr	r6, [r3, #0]
 800aa04:	e003      	b.n	800aa0e <_printf_i+0xc6>
 800aa06:	0646      	lsls	r6, r0, #25
 800aa08:	d5fb      	bpl.n	800aa02 <_printf_i+0xba>
 800aa0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aa0e:	2e00      	cmp	r6, #0
 800aa10:	da03      	bge.n	800aa1a <_printf_i+0xd2>
 800aa12:	232d      	movs	r3, #45	; 0x2d
 800aa14:	4276      	negs	r6, r6
 800aa16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa1a:	485a      	ldr	r0, [pc, #360]	; (800ab84 <_printf_i+0x23c>)
 800aa1c:	230a      	movs	r3, #10
 800aa1e:	e012      	b.n	800aa46 <_printf_i+0xfe>
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	6820      	ldr	r0, [r4, #0]
 800aa24:	1d19      	adds	r1, r3, #4
 800aa26:	6029      	str	r1, [r5, #0]
 800aa28:	0605      	lsls	r5, r0, #24
 800aa2a:	d501      	bpl.n	800aa30 <_printf_i+0xe8>
 800aa2c:	681e      	ldr	r6, [r3, #0]
 800aa2e:	e002      	b.n	800aa36 <_printf_i+0xee>
 800aa30:	0641      	lsls	r1, r0, #25
 800aa32:	d5fb      	bpl.n	800aa2c <_printf_i+0xe4>
 800aa34:	881e      	ldrh	r6, [r3, #0]
 800aa36:	4853      	ldr	r0, [pc, #332]	; (800ab84 <_printf_i+0x23c>)
 800aa38:	2f6f      	cmp	r7, #111	; 0x6f
 800aa3a:	bf0c      	ite	eq
 800aa3c:	2308      	moveq	r3, #8
 800aa3e:	230a      	movne	r3, #10
 800aa40:	2100      	movs	r1, #0
 800aa42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa46:	6865      	ldr	r5, [r4, #4]
 800aa48:	60a5      	str	r5, [r4, #8]
 800aa4a:	2d00      	cmp	r5, #0
 800aa4c:	bfa2      	ittt	ge
 800aa4e:	6821      	ldrge	r1, [r4, #0]
 800aa50:	f021 0104 	bicge.w	r1, r1, #4
 800aa54:	6021      	strge	r1, [r4, #0]
 800aa56:	b90e      	cbnz	r6, 800aa5c <_printf_i+0x114>
 800aa58:	2d00      	cmp	r5, #0
 800aa5a:	d04b      	beq.n	800aaf4 <_printf_i+0x1ac>
 800aa5c:	4615      	mov	r5, r2
 800aa5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa62:	fb03 6711 	mls	r7, r3, r1, r6
 800aa66:	5dc7      	ldrb	r7, [r0, r7]
 800aa68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa6c:	4637      	mov	r7, r6
 800aa6e:	42bb      	cmp	r3, r7
 800aa70:	460e      	mov	r6, r1
 800aa72:	d9f4      	bls.n	800aa5e <_printf_i+0x116>
 800aa74:	2b08      	cmp	r3, #8
 800aa76:	d10b      	bne.n	800aa90 <_printf_i+0x148>
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	07de      	lsls	r6, r3, #31
 800aa7c:	d508      	bpl.n	800aa90 <_printf_i+0x148>
 800aa7e:	6923      	ldr	r3, [r4, #16]
 800aa80:	6861      	ldr	r1, [r4, #4]
 800aa82:	4299      	cmp	r1, r3
 800aa84:	bfde      	ittt	le
 800aa86:	2330      	movle	r3, #48	; 0x30
 800aa88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa90:	1b52      	subs	r2, r2, r5
 800aa92:	6122      	str	r2, [r4, #16]
 800aa94:	f8cd a000 	str.w	sl, [sp]
 800aa98:	464b      	mov	r3, r9
 800aa9a:	aa03      	add	r2, sp, #12
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	4640      	mov	r0, r8
 800aaa0:	f7ff fee4 	bl	800a86c <_printf_common>
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	d14a      	bne.n	800ab3e <_printf_i+0x1f6>
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaac:	b004      	add	sp, #16
 800aaae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	f043 0320 	orr.w	r3, r3, #32
 800aab8:	6023      	str	r3, [r4, #0]
 800aaba:	4833      	ldr	r0, [pc, #204]	; (800ab88 <_printf_i+0x240>)
 800aabc:	2778      	movs	r7, #120	; 0x78
 800aabe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	6829      	ldr	r1, [r5, #0]
 800aac6:	061f      	lsls	r7, r3, #24
 800aac8:	f851 6b04 	ldr.w	r6, [r1], #4
 800aacc:	d402      	bmi.n	800aad4 <_printf_i+0x18c>
 800aace:	065f      	lsls	r7, r3, #25
 800aad0:	bf48      	it	mi
 800aad2:	b2b6      	uxthmi	r6, r6
 800aad4:	07df      	lsls	r7, r3, #31
 800aad6:	bf48      	it	mi
 800aad8:	f043 0320 	orrmi.w	r3, r3, #32
 800aadc:	6029      	str	r1, [r5, #0]
 800aade:	bf48      	it	mi
 800aae0:	6023      	strmi	r3, [r4, #0]
 800aae2:	b91e      	cbnz	r6, 800aaec <_printf_i+0x1a4>
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	f023 0320 	bic.w	r3, r3, #32
 800aaea:	6023      	str	r3, [r4, #0]
 800aaec:	2310      	movs	r3, #16
 800aaee:	e7a7      	b.n	800aa40 <_printf_i+0xf8>
 800aaf0:	4824      	ldr	r0, [pc, #144]	; (800ab84 <_printf_i+0x23c>)
 800aaf2:	e7e4      	b.n	800aabe <_printf_i+0x176>
 800aaf4:	4615      	mov	r5, r2
 800aaf6:	e7bd      	b.n	800aa74 <_printf_i+0x12c>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	6826      	ldr	r6, [r4, #0]
 800aafc:	6961      	ldr	r1, [r4, #20]
 800aafe:	1d18      	adds	r0, r3, #4
 800ab00:	6028      	str	r0, [r5, #0]
 800ab02:	0635      	lsls	r5, r6, #24
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	d501      	bpl.n	800ab0c <_printf_i+0x1c4>
 800ab08:	6019      	str	r1, [r3, #0]
 800ab0a:	e002      	b.n	800ab12 <_printf_i+0x1ca>
 800ab0c:	0670      	lsls	r0, r6, #25
 800ab0e:	d5fb      	bpl.n	800ab08 <_printf_i+0x1c0>
 800ab10:	8019      	strh	r1, [r3, #0]
 800ab12:	2300      	movs	r3, #0
 800ab14:	6123      	str	r3, [r4, #16]
 800ab16:	4615      	mov	r5, r2
 800ab18:	e7bc      	b.n	800aa94 <_printf_i+0x14c>
 800ab1a:	682b      	ldr	r3, [r5, #0]
 800ab1c:	1d1a      	adds	r2, r3, #4
 800ab1e:	602a      	str	r2, [r5, #0]
 800ab20:	681d      	ldr	r5, [r3, #0]
 800ab22:	6862      	ldr	r2, [r4, #4]
 800ab24:	2100      	movs	r1, #0
 800ab26:	4628      	mov	r0, r5
 800ab28:	f7f5 fb72 	bl	8000210 <memchr>
 800ab2c:	b108      	cbz	r0, 800ab32 <_printf_i+0x1ea>
 800ab2e:	1b40      	subs	r0, r0, r5
 800ab30:	6060      	str	r0, [r4, #4]
 800ab32:	6863      	ldr	r3, [r4, #4]
 800ab34:	6123      	str	r3, [r4, #16]
 800ab36:	2300      	movs	r3, #0
 800ab38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab3c:	e7aa      	b.n	800aa94 <_printf_i+0x14c>
 800ab3e:	6923      	ldr	r3, [r4, #16]
 800ab40:	462a      	mov	r2, r5
 800ab42:	4649      	mov	r1, r9
 800ab44:	4640      	mov	r0, r8
 800ab46:	47d0      	blx	sl
 800ab48:	3001      	adds	r0, #1
 800ab4a:	d0ad      	beq.n	800aaa8 <_printf_i+0x160>
 800ab4c:	6823      	ldr	r3, [r4, #0]
 800ab4e:	079b      	lsls	r3, r3, #30
 800ab50:	d413      	bmi.n	800ab7a <_printf_i+0x232>
 800ab52:	68e0      	ldr	r0, [r4, #12]
 800ab54:	9b03      	ldr	r3, [sp, #12]
 800ab56:	4298      	cmp	r0, r3
 800ab58:	bfb8      	it	lt
 800ab5a:	4618      	movlt	r0, r3
 800ab5c:	e7a6      	b.n	800aaac <_printf_i+0x164>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	4632      	mov	r2, r6
 800ab62:	4649      	mov	r1, r9
 800ab64:	4640      	mov	r0, r8
 800ab66:	47d0      	blx	sl
 800ab68:	3001      	adds	r0, #1
 800ab6a:	d09d      	beq.n	800aaa8 <_printf_i+0x160>
 800ab6c:	3501      	adds	r5, #1
 800ab6e:	68e3      	ldr	r3, [r4, #12]
 800ab70:	9903      	ldr	r1, [sp, #12]
 800ab72:	1a5b      	subs	r3, r3, r1
 800ab74:	42ab      	cmp	r3, r5
 800ab76:	dcf2      	bgt.n	800ab5e <_printf_i+0x216>
 800ab78:	e7eb      	b.n	800ab52 <_printf_i+0x20a>
 800ab7a:	2500      	movs	r5, #0
 800ab7c:	f104 0619 	add.w	r6, r4, #25
 800ab80:	e7f5      	b.n	800ab6e <_printf_i+0x226>
 800ab82:	bf00      	nop
 800ab84:	0800eb26 	.word	0x0800eb26
 800ab88:	0800eb37 	.word	0x0800eb37

0800ab8c <_scanf_float>:
 800ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab90:	b087      	sub	sp, #28
 800ab92:	4617      	mov	r7, r2
 800ab94:	9303      	str	r3, [sp, #12]
 800ab96:	688b      	ldr	r3, [r1, #8]
 800ab98:	1e5a      	subs	r2, r3, #1
 800ab9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ab9e:	bf83      	ittte	hi
 800aba0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aba4:	195b      	addhi	r3, r3, r5
 800aba6:	9302      	strhi	r3, [sp, #8]
 800aba8:	2300      	movls	r3, #0
 800abaa:	bf86      	itte	hi
 800abac:	f240 135d 	movwhi	r3, #349	; 0x15d
 800abb0:	608b      	strhi	r3, [r1, #8]
 800abb2:	9302      	strls	r3, [sp, #8]
 800abb4:	680b      	ldr	r3, [r1, #0]
 800abb6:	468b      	mov	fp, r1
 800abb8:	2500      	movs	r5, #0
 800abba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800abbe:	f84b 3b1c 	str.w	r3, [fp], #28
 800abc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800abc6:	4680      	mov	r8, r0
 800abc8:	460c      	mov	r4, r1
 800abca:	465e      	mov	r6, fp
 800abcc:	46aa      	mov	sl, r5
 800abce:	46a9      	mov	r9, r5
 800abd0:	9501      	str	r5, [sp, #4]
 800abd2:	68a2      	ldr	r2, [r4, #8]
 800abd4:	b152      	cbz	r2, 800abec <_scanf_float+0x60>
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	2b4e      	cmp	r3, #78	; 0x4e
 800abdc:	d864      	bhi.n	800aca8 <_scanf_float+0x11c>
 800abde:	2b40      	cmp	r3, #64	; 0x40
 800abe0:	d83c      	bhi.n	800ac5c <_scanf_float+0xd0>
 800abe2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800abe6:	b2c8      	uxtb	r0, r1
 800abe8:	280e      	cmp	r0, #14
 800abea:	d93a      	bls.n	800ac62 <_scanf_float+0xd6>
 800abec:	f1b9 0f00 	cmp.w	r9, #0
 800abf0:	d003      	beq.n	800abfa <_scanf_float+0x6e>
 800abf2:	6823      	ldr	r3, [r4, #0]
 800abf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abf8:	6023      	str	r3, [r4, #0]
 800abfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abfe:	f1ba 0f01 	cmp.w	sl, #1
 800ac02:	f200 8113 	bhi.w	800ae2c <_scanf_float+0x2a0>
 800ac06:	455e      	cmp	r6, fp
 800ac08:	f200 8105 	bhi.w	800ae16 <_scanf_float+0x28a>
 800ac0c:	2501      	movs	r5, #1
 800ac0e:	4628      	mov	r0, r5
 800ac10:	b007      	add	sp, #28
 800ac12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ac1a:	2a0d      	cmp	r2, #13
 800ac1c:	d8e6      	bhi.n	800abec <_scanf_float+0x60>
 800ac1e:	a101      	add	r1, pc, #4	; (adr r1, 800ac24 <_scanf_float+0x98>)
 800ac20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ac24:	0800ad63 	.word	0x0800ad63
 800ac28:	0800abed 	.word	0x0800abed
 800ac2c:	0800abed 	.word	0x0800abed
 800ac30:	0800abed 	.word	0x0800abed
 800ac34:	0800adc3 	.word	0x0800adc3
 800ac38:	0800ad9b 	.word	0x0800ad9b
 800ac3c:	0800abed 	.word	0x0800abed
 800ac40:	0800abed 	.word	0x0800abed
 800ac44:	0800ad71 	.word	0x0800ad71
 800ac48:	0800abed 	.word	0x0800abed
 800ac4c:	0800abed 	.word	0x0800abed
 800ac50:	0800abed 	.word	0x0800abed
 800ac54:	0800abed 	.word	0x0800abed
 800ac58:	0800ad29 	.word	0x0800ad29
 800ac5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ac60:	e7db      	b.n	800ac1a <_scanf_float+0x8e>
 800ac62:	290e      	cmp	r1, #14
 800ac64:	d8c2      	bhi.n	800abec <_scanf_float+0x60>
 800ac66:	a001      	add	r0, pc, #4	; (adr r0, 800ac6c <_scanf_float+0xe0>)
 800ac68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ac6c:	0800ad1b 	.word	0x0800ad1b
 800ac70:	0800abed 	.word	0x0800abed
 800ac74:	0800ad1b 	.word	0x0800ad1b
 800ac78:	0800adaf 	.word	0x0800adaf
 800ac7c:	0800abed 	.word	0x0800abed
 800ac80:	0800acc9 	.word	0x0800acc9
 800ac84:	0800ad05 	.word	0x0800ad05
 800ac88:	0800ad05 	.word	0x0800ad05
 800ac8c:	0800ad05 	.word	0x0800ad05
 800ac90:	0800ad05 	.word	0x0800ad05
 800ac94:	0800ad05 	.word	0x0800ad05
 800ac98:	0800ad05 	.word	0x0800ad05
 800ac9c:	0800ad05 	.word	0x0800ad05
 800aca0:	0800ad05 	.word	0x0800ad05
 800aca4:	0800ad05 	.word	0x0800ad05
 800aca8:	2b6e      	cmp	r3, #110	; 0x6e
 800acaa:	d809      	bhi.n	800acc0 <_scanf_float+0x134>
 800acac:	2b60      	cmp	r3, #96	; 0x60
 800acae:	d8b2      	bhi.n	800ac16 <_scanf_float+0x8a>
 800acb0:	2b54      	cmp	r3, #84	; 0x54
 800acb2:	d077      	beq.n	800ada4 <_scanf_float+0x218>
 800acb4:	2b59      	cmp	r3, #89	; 0x59
 800acb6:	d199      	bne.n	800abec <_scanf_float+0x60>
 800acb8:	2d07      	cmp	r5, #7
 800acba:	d197      	bne.n	800abec <_scanf_float+0x60>
 800acbc:	2508      	movs	r5, #8
 800acbe:	e029      	b.n	800ad14 <_scanf_float+0x188>
 800acc0:	2b74      	cmp	r3, #116	; 0x74
 800acc2:	d06f      	beq.n	800ada4 <_scanf_float+0x218>
 800acc4:	2b79      	cmp	r3, #121	; 0x79
 800acc6:	e7f6      	b.n	800acb6 <_scanf_float+0x12a>
 800acc8:	6821      	ldr	r1, [r4, #0]
 800acca:	05c8      	lsls	r0, r1, #23
 800accc:	d51a      	bpl.n	800ad04 <_scanf_float+0x178>
 800acce:	9b02      	ldr	r3, [sp, #8]
 800acd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800acd4:	6021      	str	r1, [r4, #0]
 800acd6:	f109 0901 	add.w	r9, r9, #1
 800acda:	b11b      	cbz	r3, 800ace4 <_scanf_float+0x158>
 800acdc:	3b01      	subs	r3, #1
 800acde:	3201      	adds	r2, #1
 800ace0:	9302      	str	r3, [sp, #8]
 800ace2:	60a2      	str	r2, [r4, #8]
 800ace4:	68a3      	ldr	r3, [r4, #8]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	60a3      	str	r3, [r4, #8]
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	3301      	adds	r3, #1
 800acee:	6123      	str	r3, [r4, #16]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3b01      	subs	r3, #1
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	607b      	str	r3, [r7, #4]
 800acf8:	f340 8084 	ble.w	800ae04 <_scanf_float+0x278>
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	3301      	adds	r3, #1
 800ad00:	603b      	str	r3, [r7, #0]
 800ad02:	e766      	b.n	800abd2 <_scanf_float+0x46>
 800ad04:	eb1a 0f05 	cmn.w	sl, r5
 800ad08:	f47f af70 	bne.w	800abec <_scanf_float+0x60>
 800ad0c:	6822      	ldr	r2, [r4, #0]
 800ad0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ad12:	6022      	str	r2, [r4, #0]
 800ad14:	f806 3b01 	strb.w	r3, [r6], #1
 800ad18:	e7e4      	b.n	800ace4 <_scanf_float+0x158>
 800ad1a:	6822      	ldr	r2, [r4, #0]
 800ad1c:	0610      	lsls	r0, r2, #24
 800ad1e:	f57f af65 	bpl.w	800abec <_scanf_float+0x60>
 800ad22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad26:	e7f4      	b.n	800ad12 <_scanf_float+0x186>
 800ad28:	f1ba 0f00 	cmp.w	sl, #0
 800ad2c:	d10e      	bne.n	800ad4c <_scanf_float+0x1c0>
 800ad2e:	f1b9 0f00 	cmp.w	r9, #0
 800ad32:	d10e      	bne.n	800ad52 <_scanf_float+0x1c6>
 800ad34:	6822      	ldr	r2, [r4, #0]
 800ad36:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ad3a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ad3e:	d108      	bne.n	800ad52 <_scanf_float+0x1c6>
 800ad40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad44:	6022      	str	r2, [r4, #0]
 800ad46:	f04f 0a01 	mov.w	sl, #1
 800ad4a:	e7e3      	b.n	800ad14 <_scanf_float+0x188>
 800ad4c:	f1ba 0f02 	cmp.w	sl, #2
 800ad50:	d055      	beq.n	800adfe <_scanf_float+0x272>
 800ad52:	2d01      	cmp	r5, #1
 800ad54:	d002      	beq.n	800ad5c <_scanf_float+0x1d0>
 800ad56:	2d04      	cmp	r5, #4
 800ad58:	f47f af48 	bne.w	800abec <_scanf_float+0x60>
 800ad5c:	3501      	adds	r5, #1
 800ad5e:	b2ed      	uxtb	r5, r5
 800ad60:	e7d8      	b.n	800ad14 <_scanf_float+0x188>
 800ad62:	f1ba 0f01 	cmp.w	sl, #1
 800ad66:	f47f af41 	bne.w	800abec <_scanf_float+0x60>
 800ad6a:	f04f 0a02 	mov.w	sl, #2
 800ad6e:	e7d1      	b.n	800ad14 <_scanf_float+0x188>
 800ad70:	b97d      	cbnz	r5, 800ad92 <_scanf_float+0x206>
 800ad72:	f1b9 0f00 	cmp.w	r9, #0
 800ad76:	f47f af3c 	bne.w	800abf2 <_scanf_float+0x66>
 800ad7a:	6822      	ldr	r2, [r4, #0]
 800ad7c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ad80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ad84:	f47f af39 	bne.w	800abfa <_scanf_float+0x6e>
 800ad88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad8c:	6022      	str	r2, [r4, #0]
 800ad8e:	2501      	movs	r5, #1
 800ad90:	e7c0      	b.n	800ad14 <_scanf_float+0x188>
 800ad92:	2d03      	cmp	r5, #3
 800ad94:	d0e2      	beq.n	800ad5c <_scanf_float+0x1d0>
 800ad96:	2d05      	cmp	r5, #5
 800ad98:	e7de      	b.n	800ad58 <_scanf_float+0x1cc>
 800ad9a:	2d02      	cmp	r5, #2
 800ad9c:	f47f af26 	bne.w	800abec <_scanf_float+0x60>
 800ada0:	2503      	movs	r5, #3
 800ada2:	e7b7      	b.n	800ad14 <_scanf_float+0x188>
 800ada4:	2d06      	cmp	r5, #6
 800ada6:	f47f af21 	bne.w	800abec <_scanf_float+0x60>
 800adaa:	2507      	movs	r5, #7
 800adac:	e7b2      	b.n	800ad14 <_scanf_float+0x188>
 800adae:	6822      	ldr	r2, [r4, #0]
 800adb0:	0591      	lsls	r1, r2, #22
 800adb2:	f57f af1b 	bpl.w	800abec <_scanf_float+0x60>
 800adb6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800adba:	6022      	str	r2, [r4, #0]
 800adbc:	f8cd 9004 	str.w	r9, [sp, #4]
 800adc0:	e7a8      	b.n	800ad14 <_scanf_float+0x188>
 800adc2:	6822      	ldr	r2, [r4, #0]
 800adc4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800adc8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800adcc:	d006      	beq.n	800addc <_scanf_float+0x250>
 800adce:	0550      	lsls	r0, r2, #21
 800add0:	f57f af0c 	bpl.w	800abec <_scanf_float+0x60>
 800add4:	f1b9 0f00 	cmp.w	r9, #0
 800add8:	f43f af0f 	beq.w	800abfa <_scanf_float+0x6e>
 800addc:	0591      	lsls	r1, r2, #22
 800adde:	bf58      	it	pl
 800ade0:	9901      	ldrpl	r1, [sp, #4]
 800ade2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ade6:	bf58      	it	pl
 800ade8:	eba9 0101 	subpl.w	r1, r9, r1
 800adec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800adf0:	bf58      	it	pl
 800adf2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800adf6:	6022      	str	r2, [r4, #0]
 800adf8:	f04f 0900 	mov.w	r9, #0
 800adfc:	e78a      	b.n	800ad14 <_scanf_float+0x188>
 800adfe:	f04f 0a03 	mov.w	sl, #3
 800ae02:	e787      	b.n	800ad14 <_scanf_float+0x188>
 800ae04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ae08:	4639      	mov	r1, r7
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	4798      	blx	r3
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f43f aedf 	beq.w	800abd2 <_scanf_float+0x46>
 800ae14:	e6ea      	b.n	800abec <_scanf_float+0x60>
 800ae16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae1e:	463a      	mov	r2, r7
 800ae20:	4640      	mov	r0, r8
 800ae22:	4798      	blx	r3
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	3b01      	subs	r3, #1
 800ae28:	6123      	str	r3, [r4, #16]
 800ae2a:	e6ec      	b.n	800ac06 <_scanf_float+0x7a>
 800ae2c:	1e6b      	subs	r3, r5, #1
 800ae2e:	2b06      	cmp	r3, #6
 800ae30:	d825      	bhi.n	800ae7e <_scanf_float+0x2f2>
 800ae32:	2d02      	cmp	r5, #2
 800ae34:	d836      	bhi.n	800aea4 <_scanf_float+0x318>
 800ae36:	455e      	cmp	r6, fp
 800ae38:	f67f aee8 	bls.w	800ac0c <_scanf_float+0x80>
 800ae3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae44:	463a      	mov	r2, r7
 800ae46:	4640      	mov	r0, r8
 800ae48:	4798      	blx	r3
 800ae4a:	6923      	ldr	r3, [r4, #16]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	6123      	str	r3, [r4, #16]
 800ae50:	e7f1      	b.n	800ae36 <_scanf_float+0x2aa>
 800ae52:	9802      	ldr	r0, [sp, #8]
 800ae54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae58:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ae5c:	9002      	str	r0, [sp, #8]
 800ae5e:	463a      	mov	r2, r7
 800ae60:	4640      	mov	r0, r8
 800ae62:	4798      	blx	r3
 800ae64:	6923      	ldr	r3, [r4, #16]
 800ae66:	3b01      	subs	r3, #1
 800ae68:	6123      	str	r3, [r4, #16]
 800ae6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae6e:	fa5f fa8a 	uxtb.w	sl, sl
 800ae72:	f1ba 0f02 	cmp.w	sl, #2
 800ae76:	d1ec      	bne.n	800ae52 <_scanf_float+0x2c6>
 800ae78:	3d03      	subs	r5, #3
 800ae7a:	b2ed      	uxtb	r5, r5
 800ae7c:	1b76      	subs	r6, r6, r5
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	05da      	lsls	r2, r3, #23
 800ae82:	d52f      	bpl.n	800aee4 <_scanf_float+0x358>
 800ae84:	055b      	lsls	r3, r3, #21
 800ae86:	d510      	bpl.n	800aeaa <_scanf_float+0x31e>
 800ae88:	455e      	cmp	r6, fp
 800ae8a:	f67f aebf 	bls.w	800ac0c <_scanf_float+0x80>
 800ae8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae96:	463a      	mov	r2, r7
 800ae98:	4640      	mov	r0, r8
 800ae9a:	4798      	blx	r3
 800ae9c:	6923      	ldr	r3, [r4, #16]
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	6123      	str	r3, [r4, #16]
 800aea2:	e7f1      	b.n	800ae88 <_scanf_float+0x2fc>
 800aea4:	46aa      	mov	sl, r5
 800aea6:	9602      	str	r6, [sp, #8]
 800aea8:	e7df      	b.n	800ae6a <_scanf_float+0x2de>
 800aeaa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aeae:	6923      	ldr	r3, [r4, #16]
 800aeb0:	2965      	cmp	r1, #101	; 0x65
 800aeb2:	f103 33ff 	add.w	r3, r3, #4294967295
 800aeb6:	f106 35ff 	add.w	r5, r6, #4294967295
 800aeba:	6123      	str	r3, [r4, #16]
 800aebc:	d00c      	beq.n	800aed8 <_scanf_float+0x34c>
 800aebe:	2945      	cmp	r1, #69	; 0x45
 800aec0:	d00a      	beq.n	800aed8 <_scanf_float+0x34c>
 800aec2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aec6:	463a      	mov	r2, r7
 800aec8:	4640      	mov	r0, r8
 800aeca:	4798      	blx	r3
 800aecc:	6923      	ldr	r3, [r4, #16]
 800aece:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aed2:	3b01      	subs	r3, #1
 800aed4:	1eb5      	subs	r5, r6, #2
 800aed6:	6123      	str	r3, [r4, #16]
 800aed8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aedc:	463a      	mov	r2, r7
 800aede:	4640      	mov	r0, r8
 800aee0:	4798      	blx	r3
 800aee2:	462e      	mov	r6, r5
 800aee4:	6825      	ldr	r5, [r4, #0]
 800aee6:	f015 0510 	ands.w	r5, r5, #16
 800aeea:	d158      	bne.n	800af9e <_scanf_float+0x412>
 800aeec:	7035      	strb	r5, [r6, #0]
 800aeee:	6823      	ldr	r3, [r4, #0]
 800aef0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aef8:	d11c      	bne.n	800af34 <_scanf_float+0x3a8>
 800aefa:	9b01      	ldr	r3, [sp, #4]
 800aefc:	454b      	cmp	r3, r9
 800aefe:	eba3 0209 	sub.w	r2, r3, r9
 800af02:	d124      	bne.n	800af4e <_scanf_float+0x3c2>
 800af04:	2200      	movs	r2, #0
 800af06:	4659      	mov	r1, fp
 800af08:	4640      	mov	r0, r8
 800af0a:	f002 fc31 	bl	800d770 <_strtod_r>
 800af0e:	9b03      	ldr	r3, [sp, #12]
 800af10:	6821      	ldr	r1, [r4, #0]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f011 0f02 	tst.w	r1, #2
 800af18:	ec57 6b10 	vmov	r6, r7, d0
 800af1c:	f103 0204 	add.w	r2, r3, #4
 800af20:	d020      	beq.n	800af64 <_scanf_float+0x3d8>
 800af22:	9903      	ldr	r1, [sp, #12]
 800af24:	600a      	str	r2, [r1, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	e9c3 6700 	strd	r6, r7, [r3]
 800af2c:	68e3      	ldr	r3, [r4, #12]
 800af2e:	3301      	adds	r3, #1
 800af30:	60e3      	str	r3, [r4, #12]
 800af32:	e66c      	b.n	800ac0e <_scanf_float+0x82>
 800af34:	9b04      	ldr	r3, [sp, #16]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0e4      	beq.n	800af04 <_scanf_float+0x378>
 800af3a:	9905      	ldr	r1, [sp, #20]
 800af3c:	230a      	movs	r3, #10
 800af3e:	462a      	mov	r2, r5
 800af40:	3101      	adds	r1, #1
 800af42:	4640      	mov	r0, r8
 800af44:	f002 fc9c 	bl	800d880 <_strtol_r>
 800af48:	9b04      	ldr	r3, [sp, #16]
 800af4a:	9e05      	ldr	r6, [sp, #20]
 800af4c:	1ac2      	subs	r2, r0, r3
 800af4e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800af52:	429e      	cmp	r6, r3
 800af54:	bf28      	it	cs
 800af56:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800af5a:	4912      	ldr	r1, [pc, #72]	; (800afa4 <_scanf_float+0x418>)
 800af5c:	4630      	mov	r0, r6
 800af5e:	f000 f8e7 	bl	800b130 <siprintf>
 800af62:	e7cf      	b.n	800af04 <_scanf_float+0x378>
 800af64:	f011 0f04 	tst.w	r1, #4
 800af68:	9903      	ldr	r1, [sp, #12]
 800af6a:	600a      	str	r2, [r1, #0]
 800af6c:	d1db      	bne.n	800af26 <_scanf_float+0x39a>
 800af6e:	f8d3 8000 	ldr.w	r8, [r3]
 800af72:	ee10 2a10 	vmov	r2, s0
 800af76:	ee10 0a10 	vmov	r0, s0
 800af7a:	463b      	mov	r3, r7
 800af7c:	4639      	mov	r1, r7
 800af7e:	f7f5 fdf5 	bl	8000b6c <__aeabi_dcmpun>
 800af82:	b128      	cbz	r0, 800af90 <_scanf_float+0x404>
 800af84:	4808      	ldr	r0, [pc, #32]	; (800afa8 <_scanf_float+0x41c>)
 800af86:	f000 f9b7 	bl	800b2f8 <nanf>
 800af8a:	ed88 0a00 	vstr	s0, [r8]
 800af8e:	e7cd      	b.n	800af2c <_scanf_float+0x3a0>
 800af90:	4630      	mov	r0, r6
 800af92:	4639      	mov	r1, r7
 800af94:	f7f5 fe48 	bl	8000c28 <__aeabi_d2f>
 800af98:	f8c8 0000 	str.w	r0, [r8]
 800af9c:	e7c6      	b.n	800af2c <_scanf_float+0x3a0>
 800af9e:	2500      	movs	r5, #0
 800afa0:	e635      	b.n	800ac0e <_scanf_float+0x82>
 800afa2:	bf00      	nop
 800afa4:	0800eb48 	.word	0x0800eb48
 800afa8:	0800eedd 	.word	0x0800eedd

0800afac <std>:
 800afac:	2300      	movs	r3, #0
 800afae:	b510      	push	{r4, lr}
 800afb0:	4604      	mov	r4, r0
 800afb2:	e9c0 3300 	strd	r3, r3, [r0]
 800afb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afba:	6083      	str	r3, [r0, #8]
 800afbc:	8181      	strh	r1, [r0, #12]
 800afbe:	6643      	str	r3, [r0, #100]	; 0x64
 800afc0:	81c2      	strh	r2, [r0, #14]
 800afc2:	6183      	str	r3, [r0, #24]
 800afc4:	4619      	mov	r1, r3
 800afc6:	2208      	movs	r2, #8
 800afc8:	305c      	adds	r0, #92	; 0x5c
 800afca:	f000 f914 	bl	800b1f6 <memset>
 800afce:	4b0d      	ldr	r3, [pc, #52]	; (800b004 <std+0x58>)
 800afd0:	6263      	str	r3, [r4, #36]	; 0x24
 800afd2:	4b0d      	ldr	r3, [pc, #52]	; (800b008 <std+0x5c>)
 800afd4:	62a3      	str	r3, [r4, #40]	; 0x28
 800afd6:	4b0d      	ldr	r3, [pc, #52]	; (800b00c <std+0x60>)
 800afd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afda:	4b0d      	ldr	r3, [pc, #52]	; (800b010 <std+0x64>)
 800afdc:	6323      	str	r3, [r4, #48]	; 0x30
 800afde:	4b0d      	ldr	r3, [pc, #52]	; (800b014 <std+0x68>)
 800afe0:	6224      	str	r4, [r4, #32]
 800afe2:	429c      	cmp	r4, r3
 800afe4:	d006      	beq.n	800aff4 <std+0x48>
 800afe6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800afea:	4294      	cmp	r4, r2
 800afec:	d002      	beq.n	800aff4 <std+0x48>
 800afee:	33d0      	adds	r3, #208	; 0xd0
 800aff0:	429c      	cmp	r4, r3
 800aff2:	d105      	bne.n	800b000 <std+0x54>
 800aff4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800affc:	f000 b978 	b.w	800b2f0 <__retarget_lock_init_recursive>
 800b000:	bd10      	pop	{r4, pc}
 800b002:	bf00      	nop
 800b004:	0800b171 	.word	0x0800b171
 800b008:	0800b193 	.word	0x0800b193
 800b00c:	0800b1cb 	.word	0x0800b1cb
 800b010:	0800b1ef 	.word	0x0800b1ef
 800b014:	20002088 	.word	0x20002088

0800b018 <stdio_exit_handler>:
 800b018:	4a02      	ldr	r2, [pc, #8]	; (800b024 <stdio_exit_handler+0xc>)
 800b01a:	4903      	ldr	r1, [pc, #12]	; (800b028 <stdio_exit_handler+0x10>)
 800b01c:	4803      	ldr	r0, [pc, #12]	; (800b02c <stdio_exit_handler+0x14>)
 800b01e:	f000 b869 	b.w	800b0f4 <_fwalk_sglue>
 800b022:	bf00      	nop
 800b024:	2000010c 	.word	0x2000010c
 800b028:	0800dc41 	.word	0x0800dc41
 800b02c:	20000118 	.word	0x20000118

0800b030 <cleanup_stdio>:
 800b030:	6841      	ldr	r1, [r0, #4]
 800b032:	4b0c      	ldr	r3, [pc, #48]	; (800b064 <cleanup_stdio+0x34>)
 800b034:	4299      	cmp	r1, r3
 800b036:	b510      	push	{r4, lr}
 800b038:	4604      	mov	r4, r0
 800b03a:	d001      	beq.n	800b040 <cleanup_stdio+0x10>
 800b03c:	f002 fe00 	bl	800dc40 <_fflush_r>
 800b040:	68a1      	ldr	r1, [r4, #8]
 800b042:	4b09      	ldr	r3, [pc, #36]	; (800b068 <cleanup_stdio+0x38>)
 800b044:	4299      	cmp	r1, r3
 800b046:	d002      	beq.n	800b04e <cleanup_stdio+0x1e>
 800b048:	4620      	mov	r0, r4
 800b04a:	f002 fdf9 	bl	800dc40 <_fflush_r>
 800b04e:	68e1      	ldr	r1, [r4, #12]
 800b050:	4b06      	ldr	r3, [pc, #24]	; (800b06c <cleanup_stdio+0x3c>)
 800b052:	4299      	cmp	r1, r3
 800b054:	d004      	beq.n	800b060 <cleanup_stdio+0x30>
 800b056:	4620      	mov	r0, r4
 800b058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b05c:	f002 bdf0 	b.w	800dc40 <_fflush_r>
 800b060:	bd10      	pop	{r4, pc}
 800b062:	bf00      	nop
 800b064:	20002088 	.word	0x20002088
 800b068:	200020f0 	.word	0x200020f0
 800b06c:	20002158 	.word	0x20002158

0800b070 <global_stdio_init.part.0>:
 800b070:	b510      	push	{r4, lr}
 800b072:	4b0b      	ldr	r3, [pc, #44]	; (800b0a0 <global_stdio_init.part.0+0x30>)
 800b074:	4c0b      	ldr	r4, [pc, #44]	; (800b0a4 <global_stdio_init.part.0+0x34>)
 800b076:	4a0c      	ldr	r2, [pc, #48]	; (800b0a8 <global_stdio_init.part.0+0x38>)
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	4620      	mov	r0, r4
 800b07c:	2200      	movs	r2, #0
 800b07e:	2104      	movs	r1, #4
 800b080:	f7ff ff94 	bl	800afac <std>
 800b084:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b088:	2201      	movs	r2, #1
 800b08a:	2109      	movs	r1, #9
 800b08c:	f7ff ff8e 	bl	800afac <std>
 800b090:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b094:	2202      	movs	r2, #2
 800b096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b09a:	2112      	movs	r1, #18
 800b09c:	f7ff bf86 	b.w	800afac <std>
 800b0a0:	200021c0 	.word	0x200021c0
 800b0a4:	20002088 	.word	0x20002088
 800b0a8:	0800b019 	.word	0x0800b019

0800b0ac <__sfp_lock_acquire>:
 800b0ac:	4801      	ldr	r0, [pc, #4]	; (800b0b4 <__sfp_lock_acquire+0x8>)
 800b0ae:	f000 b920 	b.w	800b2f2 <__retarget_lock_acquire_recursive>
 800b0b2:	bf00      	nop
 800b0b4:	200021c9 	.word	0x200021c9

0800b0b8 <__sfp_lock_release>:
 800b0b8:	4801      	ldr	r0, [pc, #4]	; (800b0c0 <__sfp_lock_release+0x8>)
 800b0ba:	f000 b91b 	b.w	800b2f4 <__retarget_lock_release_recursive>
 800b0be:	bf00      	nop
 800b0c0:	200021c9 	.word	0x200021c9

0800b0c4 <__sinit>:
 800b0c4:	b510      	push	{r4, lr}
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	f7ff fff0 	bl	800b0ac <__sfp_lock_acquire>
 800b0cc:	6a23      	ldr	r3, [r4, #32]
 800b0ce:	b11b      	cbz	r3, 800b0d8 <__sinit+0x14>
 800b0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0d4:	f7ff bff0 	b.w	800b0b8 <__sfp_lock_release>
 800b0d8:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <__sinit+0x28>)
 800b0da:	6223      	str	r3, [r4, #32]
 800b0dc:	4b04      	ldr	r3, [pc, #16]	; (800b0f0 <__sinit+0x2c>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1f5      	bne.n	800b0d0 <__sinit+0xc>
 800b0e4:	f7ff ffc4 	bl	800b070 <global_stdio_init.part.0>
 800b0e8:	e7f2      	b.n	800b0d0 <__sinit+0xc>
 800b0ea:	bf00      	nop
 800b0ec:	0800b031 	.word	0x0800b031
 800b0f0:	200021c0 	.word	0x200021c0

0800b0f4 <_fwalk_sglue>:
 800b0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f8:	4607      	mov	r7, r0
 800b0fa:	4688      	mov	r8, r1
 800b0fc:	4614      	mov	r4, r2
 800b0fe:	2600      	movs	r6, #0
 800b100:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b104:	f1b9 0901 	subs.w	r9, r9, #1
 800b108:	d505      	bpl.n	800b116 <_fwalk_sglue+0x22>
 800b10a:	6824      	ldr	r4, [r4, #0]
 800b10c:	2c00      	cmp	r4, #0
 800b10e:	d1f7      	bne.n	800b100 <_fwalk_sglue+0xc>
 800b110:	4630      	mov	r0, r6
 800b112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b116:	89ab      	ldrh	r3, [r5, #12]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d907      	bls.n	800b12c <_fwalk_sglue+0x38>
 800b11c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b120:	3301      	adds	r3, #1
 800b122:	d003      	beq.n	800b12c <_fwalk_sglue+0x38>
 800b124:	4629      	mov	r1, r5
 800b126:	4638      	mov	r0, r7
 800b128:	47c0      	blx	r8
 800b12a:	4306      	orrs	r6, r0
 800b12c:	3568      	adds	r5, #104	; 0x68
 800b12e:	e7e9      	b.n	800b104 <_fwalk_sglue+0x10>

0800b130 <siprintf>:
 800b130:	b40e      	push	{r1, r2, r3}
 800b132:	b500      	push	{lr}
 800b134:	b09c      	sub	sp, #112	; 0x70
 800b136:	ab1d      	add	r3, sp, #116	; 0x74
 800b138:	9002      	str	r0, [sp, #8]
 800b13a:	9006      	str	r0, [sp, #24]
 800b13c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b140:	4809      	ldr	r0, [pc, #36]	; (800b168 <siprintf+0x38>)
 800b142:	9107      	str	r1, [sp, #28]
 800b144:	9104      	str	r1, [sp, #16]
 800b146:	4909      	ldr	r1, [pc, #36]	; (800b16c <siprintf+0x3c>)
 800b148:	f853 2b04 	ldr.w	r2, [r3], #4
 800b14c:	9105      	str	r1, [sp, #20]
 800b14e:	6800      	ldr	r0, [r0, #0]
 800b150:	9301      	str	r3, [sp, #4]
 800b152:	a902      	add	r1, sp, #8
 800b154:	f002 fbf0 	bl	800d938 <_svfiprintf_r>
 800b158:	9b02      	ldr	r3, [sp, #8]
 800b15a:	2200      	movs	r2, #0
 800b15c:	701a      	strb	r2, [r3, #0]
 800b15e:	b01c      	add	sp, #112	; 0x70
 800b160:	f85d eb04 	ldr.w	lr, [sp], #4
 800b164:	b003      	add	sp, #12
 800b166:	4770      	bx	lr
 800b168:	20000164 	.word	0x20000164
 800b16c:	ffff0208 	.word	0xffff0208

0800b170 <__sread>:
 800b170:	b510      	push	{r4, lr}
 800b172:	460c      	mov	r4, r1
 800b174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b178:	f000 f86c 	bl	800b254 <_read_r>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	bfab      	itete	ge
 800b180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b182:	89a3      	ldrhlt	r3, [r4, #12]
 800b184:	181b      	addge	r3, r3, r0
 800b186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b18a:	bfac      	ite	ge
 800b18c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b18e:	81a3      	strhlt	r3, [r4, #12]
 800b190:	bd10      	pop	{r4, pc}

0800b192 <__swrite>:
 800b192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b196:	461f      	mov	r7, r3
 800b198:	898b      	ldrh	r3, [r1, #12]
 800b19a:	05db      	lsls	r3, r3, #23
 800b19c:	4605      	mov	r5, r0
 800b19e:	460c      	mov	r4, r1
 800b1a0:	4616      	mov	r6, r2
 800b1a2:	d505      	bpl.n	800b1b0 <__swrite+0x1e>
 800b1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f000 f840 	bl	800b230 <_lseek_r>
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1ba:	81a3      	strh	r3, [r4, #12]
 800b1bc:	4632      	mov	r2, r6
 800b1be:	463b      	mov	r3, r7
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c6:	f000 b857 	b.w	800b278 <_write_r>

0800b1ca <__sseek>:
 800b1ca:	b510      	push	{r4, lr}
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1d2:	f000 f82d 	bl	800b230 <_lseek_r>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	bf15      	itete	ne
 800b1dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1e6:	81a3      	strheq	r3, [r4, #12]
 800b1e8:	bf18      	it	ne
 800b1ea:	81a3      	strhne	r3, [r4, #12]
 800b1ec:	bd10      	pop	{r4, pc}

0800b1ee <__sclose>:
 800b1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f2:	f000 b80d 	b.w	800b210 <_close_r>

0800b1f6 <memset>:
 800b1f6:	4402      	add	r2, r0
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d100      	bne.n	800b200 <memset+0xa>
 800b1fe:	4770      	bx	lr
 800b200:	f803 1b01 	strb.w	r1, [r3], #1
 800b204:	e7f9      	b.n	800b1fa <memset+0x4>
	...

0800b208 <_localeconv_r>:
 800b208:	4800      	ldr	r0, [pc, #0]	; (800b20c <_localeconv_r+0x4>)
 800b20a:	4770      	bx	lr
 800b20c:	20000258 	.word	0x20000258

0800b210 <_close_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4d06      	ldr	r5, [pc, #24]	; (800b22c <_close_r+0x1c>)
 800b214:	2300      	movs	r3, #0
 800b216:	4604      	mov	r4, r0
 800b218:	4608      	mov	r0, r1
 800b21a:	602b      	str	r3, [r5, #0]
 800b21c:	f7f6 fc95 	bl	8001b4a <_close>
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d102      	bne.n	800b22a <_close_r+0x1a>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	b103      	cbz	r3, 800b22a <_close_r+0x1a>
 800b228:	6023      	str	r3, [r4, #0]
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	200021c4 	.word	0x200021c4

0800b230 <_lseek_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4d07      	ldr	r5, [pc, #28]	; (800b250 <_lseek_r+0x20>)
 800b234:	4604      	mov	r4, r0
 800b236:	4608      	mov	r0, r1
 800b238:	4611      	mov	r1, r2
 800b23a:	2200      	movs	r2, #0
 800b23c:	602a      	str	r2, [r5, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	f7f6 fcaa 	bl	8001b98 <_lseek>
 800b244:	1c43      	adds	r3, r0, #1
 800b246:	d102      	bne.n	800b24e <_lseek_r+0x1e>
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	b103      	cbz	r3, 800b24e <_lseek_r+0x1e>
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	bd38      	pop	{r3, r4, r5, pc}
 800b250:	200021c4 	.word	0x200021c4

0800b254 <_read_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4d07      	ldr	r5, [pc, #28]	; (800b274 <_read_r+0x20>)
 800b258:	4604      	mov	r4, r0
 800b25a:	4608      	mov	r0, r1
 800b25c:	4611      	mov	r1, r2
 800b25e:	2200      	movs	r2, #0
 800b260:	602a      	str	r2, [r5, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	f7f6 fc38 	bl	8001ad8 <_read>
 800b268:	1c43      	adds	r3, r0, #1
 800b26a:	d102      	bne.n	800b272 <_read_r+0x1e>
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	b103      	cbz	r3, 800b272 <_read_r+0x1e>
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	bd38      	pop	{r3, r4, r5, pc}
 800b274:	200021c4 	.word	0x200021c4

0800b278 <_write_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d07      	ldr	r5, [pc, #28]	; (800b298 <_write_r+0x20>)
 800b27c:	4604      	mov	r4, r0
 800b27e:	4608      	mov	r0, r1
 800b280:	4611      	mov	r1, r2
 800b282:	2200      	movs	r2, #0
 800b284:	602a      	str	r2, [r5, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	f7f6 fc43 	bl	8001b12 <_write>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	d102      	bne.n	800b296 <_write_r+0x1e>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	b103      	cbz	r3, 800b296 <_write_r+0x1e>
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	bd38      	pop	{r3, r4, r5, pc}
 800b298:	200021c4 	.word	0x200021c4

0800b29c <__errno>:
 800b29c:	4b01      	ldr	r3, [pc, #4]	; (800b2a4 <__errno+0x8>)
 800b29e:	6818      	ldr	r0, [r3, #0]
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	20000164 	.word	0x20000164

0800b2a8 <__libc_init_array>:
 800b2a8:	b570      	push	{r4, r5, r6, lr}
 800b2aa:	4d0d      	ldr	r5, [pc, #52]	; (800b2e0 <__libc_init_array+0x38>)
 800b2ac:	4c0d      	ldr	r4, [pc, #52]	; (800b2e4 <__libc_init_array+0x3c>)
 800b2ae:	1b64      	subs	r4, r4, r5
 800b2b0:	10a4      	asrs	r4, r4, #2
 800b2b2:	2600      	movs	r6, #0
 800b2b4:	42a6      	cmp	r6, r4
 800b2b6:	d109      	bne.n	800b2cc <__libc_init_array+0x24>
 800b2b8:	4d0b      	ldr	r5, [pc, #44]	; (800b2e8 <__libc_init_array+0x40>)
 800b2ba:	4c0c      	ldr	r4, [pc, #48]	; (800b2ec <__libc_init_array+0x44>)
 800b2bc:	f003 fbd8 	bl	800ea70 <_init>
 800b2c0:	1b64      	subs	r4, r4, r5
 800b2c2:	10a4      	asrs	r4, r4, #2
 800b2c4:	2600      	movs	r6, #0
 800b2c6:	42a6      	cmp	r6, r4
 800b2c8:	d105      	bne.n	800b2d6 <__libc_init_array+0x2e>
 800b2ca:	bd70      	pop	{r4, r5, r6, pc}
 800b2cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2d0:	4798      	blx	r3
 800b2d2:	3601      	adds	r6, #1
 800b2d4:	e7ee      	b.n	800b2b4 <__libc_init_array+0xc>
 800b2d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2da:	4798      	blx	r3
 800b2dc:	3601      	adds	r6, #1
 800b2de:	e7f2      	b.n	800b2c6 <__libc_init_array+0x1e>
 800b2e0:	0800ef48 	.word	0x0800ef48
 800b2e4:	0800ef48 	.word	0x0800ef48
 800b2e8:	0800ef48 	.word	0x0800ef48
 800b2ec:	0800ef4c 	.word	0x0800ef4c

0800b2f0 <__retarget_lock_init_recursive>:
 800b2f0:	4770      	bx	lr

0800b2f2 <__retarget_lock_acquire_recursive>:
 800b2f2:	4770      	bx	lr

0800b2f4 <__retarget_lock_release_recursive>:
 800b2f4:	4770      	bx	lr
	...

0800b2f8 <nanf>:
 800b2f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b300 <nanf+0x8>
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	7fc00000 	.word	0x7fc00000

0800b304 <quorem>:
 800b304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b308:	6903      	ldr	r3, [r0, #16]
 800b30a:	690c      	ldr	r4, [r1, #16]
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	4607      	mov	r7, r0
 800b310:	db7e      	blt.n	800b410 <quorem+0x10c>
 800b312:	3c01      	subs	r4, #1
 800b314:	f101 0814 	add.w	r8, r1, #20
 800b318:	f100 0514 	add.w	r5, r0, #20
 800b31c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b320:	9301      	str	r3, [sp, #4]
 800b322:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b326:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b32a:	3301      	adds	r3, #1
 800b32c:	429a      	cmp	r2, r3
 800b32e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b332:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b336:	fbb2 f6f3 	udiv	r6, r2, r3
 800b33a:	d331      	bcc.n	800b3a0 <quorem+0x9c>
 800b33c:	f04f 0e00 	mov.w	lr, #0
 800b340:	4640      	mov	r0, r8
 800b342:	46ac      	mov	ip, r5
 800b344:	46f2      	mov	sl, lr
 800b346:	f850 2b04 	ldr.w	r2, [r0], #4
 800b34a:	b293      	uxth	r3, r2
 800b34c:	fb06 e303 	mla	r3, r6, r3, lr
 800b350:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b354:	0c1a      	lsrs	r2, r3, #16
 800b356:	b29b      	uxth	r3, r3
 800b358:	ebaa 0303 	sub.w	r3, sl, r3
 800b35c:	f8dc a000 	ldr.w	sl, [ip]
 800b360:	fa13 f38a 	uxtah	r3, r3, sl
 800b364:	fb06 220e 	mla	r2, r6, lr, r2
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	9b00      	ldr	r3, [sp, #0]
 800b36c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b370:	b292      	uxth	r2, r2
 800b372:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b376:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b37a:	f8bd 3000 	ldrh.w	r3, [sp]
 800b37e:	4581      	cmp	r9, r0
 800b380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b384:	f84c 3b04 	str.w	r3, [ip], #4
 800b388:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b38c:	d2db      	bcs.n	800b346 <quorem+0x42>
 800b38e:	f855 300b 	ldr.w	r3, [r5, fp]
 800b392:	b92b      	cbnz	r3, 800b3a0 <quorem+0x9c>
 800b394:	9b01      	ldr	r3, [sp, #4]
 800b396:	3b04      	subs	r3, #4
 800b398:	429d      	cmp	r5, r3
 800b39a:	461a      	mov	r2, r3
 800b39c:	d32c      	bcc.n	800b3f8 <quorem+0xf4>
 800b39e:	613c      	str	r4, [r7, #16]
 800b3a0:	4638      	mov	r0, r7
 800b3a2:	f001 f9f1 	bl	800c788 <__mcmp>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	db22      	blt.n	800b3f0 <quorem+0xec>
 800b3aa:	3601      	adds	r6, #1
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b3b4:	f8d1 c000 	ldr.w	ip, [r1]
 800b3b8:	b293      	uxth	r3, r2
 800b3ba:	1ac3      	subs	r3, r0, r3
 800b3bc:	0c12      	lsrs	r2, r2, #16
 800b3be:	fa13 f38c 	uxtah	r3, r3, ip
 800b3c2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b3c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3d0:	45c1      	cmp	r9, r8
 800b3d2:	f841 3b04 	str.w	r3, [r1], #4
 800b3d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b3da:	d2e9      	bcs.n	800b3b0 <quorem+0xac>
 800b3dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3e4:	b922      	cbnz	r2, 800b3f0 <quorem+0xec>
 800b3e6:	3b04      	subs	r3, #4
 800b3e8:	429d      	cmp	r5, r3
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	d30a      	bcc.n	800b404 <quorem+0x100>
 800b3ee:	613c      	str	r4, [r7, #16]
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	b003      	add	sp, #12
 800b3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f8:	6812      	ldr	r2, [r2, #0]
 800b3fa:	3b04      	subs	r3, #4
 800b3fc:	2a00      	cmp	r2, #0
 800b3fe:	d1ce      	bne.n	800b39e <quorem+0x9a>
 800b400:	3c01      	subs	r4, #1
 800b402:	e7c9      	b.n	800b398 <quorem+0x94>
 800b404:	6812      	ldr	r2, [r2, #0]
 800b406:	3b04      	subs	r3, #4
 800b408:	2a00      	cmp	r2, #0
 800b40a:	d1f0      	bne.n	800b3ee <quorem+0xea>
 800b40c:	3c01      	subs	r4, #1
 800b40e:	e7eb      	b.n	800b3e8 <quorem+0xe4>
 800b410:	2000      	movs	r0, #0
 800b412:	e7ee      	b.n	800b3f2 <quorem+0xee>
 800b414:	0000      	movs	r0, r0
	...

0800b418 <_dtoa_r>:
 800b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41c:	ed2d 8b04 	vpush	{d8-d9}
 800b420:	69c5      	ldr	r5, [r0, #28]
 800b422:	b093      	sub	sp, #76	; 0x4c
 800b424:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b428:	ec57 6b10 	vmov	r6, r7, d0
 800b42c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b430:	9107      	str	r1, [sp, #28]
 800b432:	4604      	mov	r4, r0
 800b434:	920a      	str	r2, [sp, #40]	; 0x28
 800b436:	930d      	str	r3, [sp, #52]	; 0x34
 800b438:	b975      	cbnz	r5, 800b458 <_dtoa_r+0x40>
 800b43a:	2010      	movs	r0, #16
 800b43c:	f000 fe2a 	bl	800c094 <malloc>
 800b440:	4602      	mov	r2, r0
 800b442:	61e0      	str	r0, [r4, #28]
 800b444:	b920      	cbnz	r0, 800b450 <_dtoa_r+0x38>
 800b446:	4bae      	ldr	r3, [pc, #696]	; (800b700 <_dtoa_r+0x2e8>)
 800b448:	21ef      	movs	r1, #239	; 0xef
 800b44a:	48ae      	ldr	r0, [pc, #696]	; (800b704 <_dtoa_r+0x2ec>)
 800b44c:	f002 fc74 	bl	800dd38 <__assert_func>
 800b450:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b454:	6005      	str	r5, [r0, #0]
 800b456:	60c5      	str	r5, [r0, #12]
 800b458:	69e3      	ldr	r3, [r4, #28]
 800b45a:	6819      	ldr	r1, [r3, #0]
 800b45c:	b151      	cbz	r1, 800b474 <_dtoa_r+0x5c>
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	604a      	str	r2, [r1, #4]
 800b462:	2301      	movs	r3, #1
 800b464:	4093      	lsls	r3, r2
 800b466:	608b      	str	r3, [r1, #8]
 800b468:	4620      	mov	r0, r4
 800b46a:	f000 ff07 	bl	800c27c <_Bfree>
 800b46e:	69e3      	ldr	r3, [r4, #28]
 800b470:	2200      	movs	r2, #0
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	1e3b      	subs	r3, r7, #0
 800b476:	bfbb      	ittet	lt
 800b478:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b47c:	9303      	strlt	r3, [sp, #12]
 800b47e:	2300      	movge	r3, #0
 800b480:	2201      	movlt	r2, #1
 800b482:	bfac      	ite	ge
 800b484:	f8c8 3000 	strge.w	r3, [r8]
 800b488:	f8c8 2000 	strlt.w	r2, [r8]
 800b48c:	4b9e      	ldr	r3, [pc, #632]	; (800b708 <_dtoa_r+0x2f0>)
 800b48e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b492:	ea33 0308 	bics.w	r3, r3, r8
 800b496:	d11b      	bne.n	800b4d0 <_dtoa_r+0xb8>
 800b498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b49a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b49e:	6013      	str	r3, [r2, #0]
 800b4a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b4a4:	4333      	orrs	r3, r6
 800b4a6:	f000 8593 	beq.w	800bfd0 <_dtoa_r+0xbb8>
 800b4aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4ac:	b963      	cbnz	r3, 800b4c8 <_dtoa_r+0xb0>
 800b4ae:	4b97      	ldr	r3, [pc, #604]	; (800b70c <_dtoa_r+0x2f4>)
 800b4b0:	e027      	b.n	800b502 <_dtoa_r+0xea>
 800b4b2:	4b97      	ldr	r3, [pc, #604]	; (800b710 <_dtoa_r+0x2f8>)
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b4ba:	6013      	str	r3, [r2, #0]
 800b4bc:	9800      	ldr	r0, [sp, #0]
 800b4be:	b013      	add	sp, #76	; 0x4c
 800b4c0:	ecbd 8b04 	vpop	{d8-d9}
 800b4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c8:	4b90      	ldr	r3, [pc, #576]	; (800b70c <_dtoa_r+0x2f4>)
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	3303      	adds	r3, #3
 800b4ce:	e7f3      	b.n	800b4b8 <_dtoa_r+0xa0>
 800b4d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	ec51 0b17 	vmov	r0, r1, d7
 800b4da:	eeb0 8a47 	vmov.f32	s16, s14
 800b4de:	eef0 8a67 	vmov.f32	s17, s15
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f7f5 fb10 	bl	8000b08 <__aeabi_dcmpeq>
 800b4e8:	4681      	mov	r9, r0
 800b4ea:	b160      	cbz	r0, 800b506 <_dtoa_r+0xee>
 800b4ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	6013      	str	r3, [r2, #0]
 800b4f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 8568 	beq.w	800bfca <_dtoa_r+0xbb2>
 800b4fa:	4b86      	ldr	r3, [pc, #536]	; (800b714 <_dtoa_r+0x2fc>)
 800b4fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	3b01      	subs	r3, #1
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	e7da      	b.n	800b4bc <_dtoa_r+0xa4>
 800b506:	aa10      	add	r2, sp, #64	; 0x40
 800b508:	a911      	add	r1, sp, #68	; 0x44
 800b50a:	4620      	mov	r0, r4
 800b50c:	eeb0 0a48 	vmov.f32	s0, s16
 800b510:	eef0 0a68 	vmov.f32	s1, s17
 800b514:	f001 fa4e 	bl	800c9b4 <__d2b>
 800b518:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b51c:	4682      	mov	sl, r0
 800b51e:	2d00      	cmp	r5, #0
 800b520:	d07f      	beq.n	800b622 <_dtoa_r+0x20a>
 800b522:	ee18 3a90 	vmov	r3, s17
 800b526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b52a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b52e:	ec51 0b18 	vmov	r0, r1, d8
 800b532:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b53a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b53e:	4619      	mov	r1, r3
 800b540:	2200      	movs	r2, #0
 800b542:	4b75      	ldr	r3, [pc, #468]	; (800b718 <_dtoa_r+0x300>)
 800b544:	f7f4 fec0 	bl	80002c8 <__aeabi_dsub>
 800b548:	a367      	add	r3, pc, #412	; (adr r3, 800b6e8 <_dtoa_r+0x2d0>)
 800b54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54e:	f7f5 f873 	bl	8000638 <__aeabi_dmul>
 800b552:	a367      	add	r3, pc, #412	; (adr r3, 800b6f0 <_dtoa_r+0x2d8>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f7f4 feb8 	bl	80002cc <__adddf3>
 800b55c:	4606      	mov	r6, r0
 800b55e:	4628      	mov	r0, r5
 800b560:	460f      	mov	r7, r1
 800b562:	f7f4 ffff 	bl	8000564 <__aeabi_i2d>
 800b566:	a364      	add	r3, pc, #400	; (adr r3, 800b6f8 <_dtoa_r+0x2e0>)
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	f7f5 f864 	bl	8000638 <__aeabi_dmul>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	4630      	mov	r0, r6
 800b576:	4639      	mov	r1, r7
 800b578:	f7f4 fea8 	bl	80002cc <__adddf3>
 800b57c:	4606      	mov	r6, r0
 800b57e:	460f      	mov	r7, r1
 800b580:	f7f5 fb0a 	bl	8000b98 <__aeabi_d2iz>
 800b584:	2200      	movs	r2, #0
 800b586:	4683      	mov	fp, r0
 800b588:	2300      	movs	r3, #0
 800b58a:	4630      	mov	r0, r6
 800b58c:	4639      	mov	r1, r7
 800b58e:	f7f5 fac5 	bl	8000b1c <__aeabi_dcmplt>
 800b592:	b148      	cbz	r0, 800b5a8 <_dtoa_r+0x190>
 800b594:	4658      	mov	r0, fp
 800b596:	f7f4 ffe5 	bl	8000564 <__aeabi_i2d>
 800b59a:	4632      	mov	r2, r6
 800b59c:	463b      	mov	r3, r7
 800b59e:	f7f5 fab3 	bl	8000b08 <__aeabi_dcmpeq>
 800b5a2:	b908      	cbnz	r0, 800b5a8 <_dtoa_r+0x190>
 800b5a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5a8:	f1bb 0f16 	cmp.w	fp, #22
 800b5ac:	d857      	bhi.n	800b65e <_dtoa_r+0x246>
 800b5ae:	4b5b      	ldr	r3, [pc, #364]	; (800b71c <_dtoa_r+0x304>)
 800b5b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	ec51 0b18 	vmov	r0, r1, d8
 800b5bc:	f7f5 faae 	bl	8000b1c <__aeabi_dcmplt>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	d04e      	beq.n	800b662 <_dtoa_r+0x24a>
 800b5c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	930c      	str	r3, [sp, #48]	; 0x30
 800b5cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5ce:	1b5b      	subs	r3, r3, r5
 800b5d0:	1e5a      	subs	r2, r3, #1
 800b5d2:	bf45      	ittet	mi
 800b5d4:	f1c3 0301 	rsbmi	r3, r3, #1
 800b5d8:	9305      	strmi	r3, [sp, #20]
 800b5da:	2300      	movpl	r3, #0
 800b5dc:	2300      	movmi	r3, #0
 800b5de:	9206      	str	r2, [sp, #24]
 800b5e0:	bf54      	ite	pl
 800b5e2:	9305      	strpl	r3, [sp, #20]
 800b5e4:	9306      	strmi	r3, [sp, #24]
 800b5e6:	f1bb 0f00 	cmp.w	fp, #0
 800b5ea:	db3c      	blt.n	800b666 <_dtoa_r+0x24e>
 800b5ec:	9b06      	ldr	r3, [sp, #24]
 800b5ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b5f2:	445b      	add	r3, fp
 800b5f4:	9306      	str	r3, [sp, #24]
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	9308      	str	r3, [sp, #32]
 800b5fa:	9b07      	ldr	r3, [sp, #28]
 800b5fc:	2b09      	cmp	r3, #9
 800b5fe:	d868      	bhi.n	800b6d2 <_dtoa_r+0x2ba>
 800b600:	2b05      	cmp	r3, #5
 800b602:	bfc4      	itt	gt
 800b604:	3b04      	subgt	r3, #4
 800b606:	9307      	strgt	r3, [sp, #28]
 800b608:	9b07      	ldr	r3, [sp, #28]
 800b60a:	f1a3 0302 	sub.w	r3, r3, #2
 800b60e:	bfcc      	ite	gt
 800b610:	2500      	movgt	r5, #0
 800b612:	2501      	movle	r5, #1
 800b614:	2b03      	cmp	r3, #3
 800b616:	f200 8085 	bhi.w	800b724 <_dtoa_r+0x30c>
 800b61a:	e8df f003 	tbb	[pc, r3]
 800b61e:	3b2e      	.short	0x3b2e
 800b620:	5839      	.short	0x5839
 800b622:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b626:	441d      	add	r5, r3
 800b628:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b62c:	2b20      	cmp	r3, #32
 800b62e:	bfc1      	itttt	gt
 800b630:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b634:	fa08 f803 	lslgt.w	r8, r8, r3
 800b638:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b63c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b640:	bfd6      	itet	le
 800b642:	f1c3 0320 	rsble	r3, r3, #32
 800b646:	ea48 0003 	orrgt.w	r0, r8, r3
 800b64a:	fa06 f003 	lslle.w	r0, r6, r3
 800b64e:	f7f4 ff79 	bl	8000544 <__aeabi_ui2d>
 800b652:	2201      	movs	r2, #1
 800b654:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b658:	3d01      	subs	r5, #1
 800b65a:	920e      	str	r2, [sp, #56]	; 0x38
 800b65c:	e76f      	b.n	800b53e <_dtoa_r+0x126>
 800b65e:	2301      	movs	r3, #1
 800b660:	e7b3      	b.n	800b5ca <_dtoa_r+0x1b2>
 800b662:	900c      	str	r0, [sp, #48]	; 0x30
 800b664:	e7b2      	b.n	800b5cc <_dtoa_r+0x1b4>
 800b666:	9b05      	ldr	r3, [sp, #20]
 800b668:	eba3 030b 	sub.w	r3, r3, fp
 800b66c:	9305      	str	r3, [sp, #20]
 800b66e:	f1cb 0300 	rsb	r3, fp, #0
 800b672:	9308      	str	r3, [sp, #32]
 800b674:	2300      	movs	r3, #0
 800b676:	930b      	str	r3, [sp, #44]	; 0x2c
 800b678:	e7bf      	b.n	800b5fa <_dtoa_r+0x1e2>
 800b67a:	2300      	movs	r3, #0
 800b67c:	9309      	str	r3, [sp, #36]	; 0x24
 800b67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b680:	2b00      	cmp	r3, #0
 800b682:	dc52      	bgt.n	800b72a <_dtoa_r+0x312>
 800b684:	2301      	movs	r3, #1
 800b686:	9301      	str	r3, [sp, #4]
 800b688:	9304      	str	r3, [sp, #16]
 800b68a:	461a      	mov	r2, r3
 800b68c:	920a      	str	r2, [sp, #40]	; 0x28
 800b68e:	e00b      	b.n	800b6a8 <_dtoa_r+0x290>
 800b690:	2301      	movs	r3, #1
 800b692:	e7f3      	b.n	800b67c <_dtoa_r+0x264>
 800b694:	2300      	movs	r3, #0
 800b696:	9309      	str	r3, [sp, #36]	; 0x24
 800b698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b69a:	445b      	add	r3, fp
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	9304      	str	r3, [sp, #16]
 800b6a4:	bfb8      	it	lt
 800b6a6:	2301      	movlt	r3, #1
 800b6a8:	69e0      	ldr	r0, [r4, #28]
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	2204      	movs	r2, #4
 800b6ae:	f102 0614 	add.w	r6, r2, #20
 800b6b2:	429e      	cmp	r6, r3
 800b6b4:	d93d      	bls.n	800b732 <_dtoa_r+0x31a>
 800b6b6:	6041      	str	r1, [r0, #4]
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f000 fd9f 	bl	800c1fc <_Balloc>
 800b6be:	9000      	str	r0, [sp, #0]
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d139      	bne.n	800b738 <_dtoa_r+0x320>
 800b6c4:	4b16      	ldr	r3, [pc, #88]	; (800b720 <_dtoa_r+0x308>)
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	f240 11af 	movw	r1, #431	; 0x1af
 800b6cc:	e6bd      	b.n	800b44a <_dtoa_r+0x32>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e7e1      	b.n	800b696 <_dtoa_r+0x27e>
 800b6d2:	2501      	movs	r5, #1
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	9307      	str	r3, [sp, #28]
 800b6d8:	9509      	str	r5, [sp, #36]	; 0x24
 800b6da:	f04f 33ff 	mov.w	r3, #4294967295
 800b6de:	9301      	str	r3, [sp, #4]
 800b6e0:	9304      	str	r3, [sp, #16]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	2312      	movs	r3, #18
 800b6e6:	e7d1      	b.n	800b68c <_dtoa_r+0x274>
 800b6e8:	636f4361 	.word	0x636f4361
 800b6ec:	3fd287a7 	.word	0x3fd287a7
 800b6f0:	8b60c8b3 	.word	0x8b60c8b3
 800b6f4:	3fc68a28 	.word	0x3fc68a28
 800b6f8:	509f79fb 	.word	0x509f79fb
 800b6fc:	3fd34413 	.word	0x3fd34413
 800b700:	0800eb5a 	.word	0x0800eb5a
 800b704:	0800eb71 	.word	0x0800eb71
 800b708:	7ff00000 	.word	0x7ff00000
 800b70c:	0800eb56 	.word	0x0800eb56
 800b710:	0800eb4d 	.word	0x0800eb4d
 800b714:	0800eb25 	.word	0x0800eb25
 800b718:	3ff80000 	.word	0x3ff80000
 800b71c:	0800ec60 	.word	0x0800ec60
 800b720:	0800ebc9 	.word	0x0800ebc9
 800b724:	2301      	movs	r3, #1
 800b726:	9309      	str	r3, [sp, #36]	; 0x24
 800b728:	e7d7      	b.n	800b6da <_dtoa_r+0x2c2>
 800b72a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b72c:	9301      	str	r3, [sp, #4]
 800b72e:	9304      	str	r3, [sp, #16]
 800b730:	e7ba      	b.n	800b6a8 <_dtoa_r+0x290>
 800b732:	3101      	adds	r1, #1
 800b734:	0052      	lsls	r2, r2, #1
 800b736:	e7ba      	b.n	800b6ae <_dtoa_r+0x296>
 800b738:	69e3      	ldr	r3, [r4, #28]
 800b73a:	9a00      	ldr	r2, [sp, #0]
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	9b04      	ldr	r3, [sp, #16]
 800b740:	2b0e      	cmp	r3, #14
 800b742:	f200 80a8 	bhi.w	800b896 <_dtoa_r+0x47e>
 800b746:	2d00      	cmp	r5, #0
 800b748:	f000 80a5 	beq.w	800b896 <_dtoa_r+0x47e>
 800b74c:	f1bb 0f00 	cmp.w	fp, #0
 800b750:	dd38      	ble.n	800b7c4 <_dtoa_r+0x3ac>
 800b752:	4bc0      	ldr	r3, [pc, #768]	; (800ba54 <_dtoa_r+0x63c>)
 800b754:	f00b 020f 	and.w	r2, fp, #15
 800b758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b75c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b760:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b764:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b768:	d019      	beq.n	800b79e <_dtoa_r+0x386>
 800b76a:	4bbb      	ldr	r3, [pc, #748]	; (800ba58 <_dtoa_r+0x640>)
 800b76c:	ec51 0b18 	vmov	r0, r1, d8
 800b770:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b774:	f7f5 f88a 	bl	800088c <__aeabi_ddiv>
 800b778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b77c:	f008 080f 	and.w	r8, r8, #15
 800b780:	2503      	movs	r5, #3
 800b782:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ba58 <_dtoa_r+0x640>
 800b786:	f1b8 0f00 	cmp.w	r8, #0
 800b78a:	d10a      	bne.n	800b7a2 <_dtoa_r+0x38a>
 800b78c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b790:	4632      	mov	r2, r6
 800b792:	463b      	mov	r3, r7
 800b794:	f7f5 f87a 	bl	800088c <__aeabi_ddiv>
 800b798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b79c:	e02b      	b.n	800b7f6 <_dtoa_r+0x3de>
 800b79e:	2502      	movs	r5, #2
 800b7a0:	e7ef      	b.n	800b782 <_dtoa_r+0x36a>
 800b7a2:	f018 0f01 	tst.w	r8, #1
 800b7a6:	d008      	beq.n	800b7ba <_dtoa_r+0x3a2>
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	4639      	mov	r1, r7
 800b7ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b7b0:	f7f4 ff42 	bl	8000638 <__aeabi_dmul>
 800b7b4:	3501      	adds	r5, #1
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	460f      	mov	r7, r1
 800b7ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b7be:	f109 0908 	add.w	r9, r9, #8
 800b7c2:	e7e0      	b.n	800b786 <_dtoa_r+0x36e>
 800b7c4:	f000 809f 	beq.w	800b906 <_dtoa_r+0x4ee>
 800b7c8:	f1cb 0600 	rsb	r6, fp, #0
 800b7cc:	4ba1      	ldr	r3, [pc, #644]	; (800ba54 <_dtoa_r+0x63c>)
 800b7ce:	4fa2      	ldr	r7, [pc, #648]	; (800ba58 <_dtoa_r+0x640>)
 800b7d0:	f006 020f 	and.w	r2, r6, #15
 800b7d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	ec51 0b18 	vmov	r0, r1, d8
 800b7e0:	f7f4 ff2a 	bl	8000638 <__aeabi_dmul>
 800b7e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7e8:	1136      	asrs	r6, r6, #4
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	2502      	movs	r5, #2
 800b7ee:	2e00      	cmp	r6, #0
 800b7f0:	d17e      	bne.n	800b8f0 <_dtoa_r+0x4d8>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1d0      	bne.n	800b798 <_dtoa_r+0x380>
 800b7f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f000 8084 	beq.w	800b90a <_dtoa_r+0x4f2>
 800b802:	4b96      	ldr	r3, [pc, #600]	; (800ba5c <_dtoa_r+0x644>)
 800b804:	2200      	movs	r2, #0
 800b806:	4640      	mov	r0, r8
 800b808:	4649      	mov	r1, r9
 800b80a:	f7f5 f987 	bl	8000b1c <__aeabi_dcmplt>
 800b80e:	2800      	cmp	r0, #0
 800b810:	d07b      	beq.n	800b90a <_dtoa_r+0x4f2>
 800b812:	9b04      	ldr	r3, [sp, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d078      	beq.n	800b90a <_dtoa_r+0x4f2>
 800b818:	9b01      	ldr	r3, [sp, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	dd39      	ble.n	800b892 <_dtoa_r+0x47a>
 800b81e:	4b90      	ldr	r3, [pc, #576]	; (800ba60 <_dtoa_r+0x648>)
 800b820:	2200      	movs	r2, #0
 800b822:	4640      	mov	r0, r8
 800b824:	4649      	mov	r1, r9
 800b826:	f7f4 ff07 	bl	8000638 <__aeabi_dmul>
 800b82a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b82e:	9e01      	ldr	r6, [sp, #4]
 800b830:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b834:	3501      	adds	r5, #1
 800b836:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b83a:	4628      	mov	r0, r5
 800b83c:	f7f4 fe92 	bl	8000564 <__aeabi_i2d>
 800b840:	4642      	mov	r2, r8
 800b842:	464b      	mov	r3, r9
 800b844:	f7f4 fef8 	bl	8000638 <__aeabi_dmul>
 800b848:	4b86      	ldr	r3, [pc, #536]	; (800ba64 <_dtoa_r+0x64c>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	f7f4 fd3e 	bl	80002cc <__adddf3>
 800b850:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b858:	9303      	str	r3, [sp, #12]
 800b85a:	2e00      	cmp	r6, #0
 800b85c:	d158      	bne.n	800b910 <_dtoa_r+0x4f8>
 800b85e:	4b82      	ldr	r3, [pc, #520]	; (800ba68 <_dtoa_r+0x650>)
 800b860:	2200      	movs	r2, #0
 800b862:	4640      	mov	r0, r8
 800b864:	4649      	mov	r1, r9
 800b866:	f7f4 fd2f 	bl	80002c8 <__aeabi_dsub>
 800b86a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b86e:	4680      	mov	r8, r0
 800b870:	4689      	mov	r9, r1
 800b872:	f7f5 f971 	bl	8000b58 <__aeabi_dcmpgt>
 800b876:	2800      	cmp	r0, #0
 800b878:	f040 8296 	bne.w	800bda8 <_dtoa_r+0x990>
 800b87c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b880:	4640      	mov	r0, r8
 800b882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b886:	4649      	mov	r1, r9
 800b888:	f7f5 f948 	bl	8000b1c <__aeabi_dcmplt>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	f040 8289 	bne.w	800bda4 <_dtoa_r+0x98c>
 800b892:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b896:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f2c0 814e 	blt.w	800bb3a <_dtoa_r+0x722>
 800b89e:	f1bb 0f0e 	cmp.w	fp, #14
 800b8a2:	f300 814a 	bgt.w	800bb3a <_dtoa_r+0x722>
 800b8a6:	4b6b      	ldr	r3, [pc, #428]	; (800ba54 <_dtoa_r+0x63c>)
 800b8a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b8ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f280 80dc 	bge.w	800ba70 <_dtoa_r+0x658>
 800b8b8:	9b04      	ldr	r3, [sp, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f300 80d8 	bgt.w	800ba70 <_dtoa_r+0x658>
 800b8c0:	f040 826f 	bne.w	800bda2 <_dtoa_r+0x98a>
 800b8c4:	4b68      	ldr	r3, [pc, #416]	; (800ba68 <_dtoa_r+0x650>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	f7f4 feb4 	bl	8000638 <__aeabi_dmul>
 800b8d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8d4:	f7f5 f936 	bl	8000b44 <__aeabi_dcmpge>
 800b8d8:	9e04      	ldr	r6, [sp, #16]
 800b8da:	4637      	mov	r7, r6
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	f040 8245 	bne.w	800bd6c <_dtoa_r+0x954>
 800b8e2:	9d00      	ldr	r5, [sp, #0]
 800b8e4:	2331      	movs	r3, #49	; 0x31
 800b8e6:	f805 3b01 	strb.w	r3, [r5], #1
 800b8ea:	f10b 0b01 	add.w	fp, fp, #1
 800b8ee:	e241      	b.n	800bd74 <_dtoa_r+0x95c>
 800b8f0:	07f2      	lsls	r2, r6, #31
 800b8f2:	d505      	bpl.n	800b900 <_dtoa_r+0x4e8>
 800b8f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8f8:	f7f4 fe9e 	bl	8000638 <__aeabi_dmul>
 800b8fc:	3501      	adds	r5, #1
 800b8fe:	2301      	movs	r3, #1
 800b900:	1076      	asrs	r6, r6, #1
 800b902:	3708      	adds	r7, #8
 800b904:	e773      	b.n	800b7ee <_dtoa_r+0x3d6>
 800b906:	2502      	movs	r5, #2
 800b908:	e775      	b.n	800b7f6 <_dtoa_r+0x3de>
 800b90a:	9e04      	ldr	r6, [sp, #16]
 800b90c:	465f      	mov	r7, fp
 800b90e:	e792      	b.n	800b836 <_dtoa_r+0x41e>
 800b910:	9900      	ldr	r1, [sp, #0]
 800b912:	4b50      	ldr	r3, [pc, #320]	; (800ba54 <_dtoa_r+0x63c>)
 800b914:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b918:	4431      	add	r1, r6
 800b91a:	9102      	str	r1, [sp, #8]
 800b91c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b91e:	eeb0 9a47 	vmov.f32	s18, s14
 800b922:	eef0 9a67 	vmov.f32	s19, s15
 800b926:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b92a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b92e:	2900      	cmp	r1, #0
 800b930:	d044      	beq.n	800b9bc <_dtoa_r+0x5a4>
 800b932:	494e      	ldr	r1, [pc, #312]	; (800ba6c <_dtoa_r+0x654>)
 800b934:	2000      	movs	r0, #0
 800b936:	f7f4 ffa9 	bl	800088c <__aeabi_ddiv>
 800b93a:	ec53 2b19 	vmov	r2, r3, d9
 800b93e:	f7f4 fcc3 	bl	80002c8 <__aeabi_dsub>
 800b942:	9d00      	ldr	r5, [sp, #0]
 800b944:	ec41 0b19 	vmov	d9, r0, r1
 800b948:	4649      	mov	r1, r9
 800b94a:	4640      	mov	r0, r8
 800b94c:	f7f5 f924 	bl	8000b98 <__aeabi_d2iz>
 800b950:	4606      	mov	r6, r0
 800b952:	f7f4 fe07 	bl	8000564 <__aeabi_i2d>
 800b956:	4602      	mov	r2, r0
 800b958:	460b      	mov	r3, r1
 800b95a:	4640      	mov	r0, r8
 800b95c:	4649      	mov	r1, r9
 800b95e:	f7f4 fcb3 	bl	80002c8 <__aeabi_dsub>
 800b962:	3630      	adds	r6, #48	; 0x30
 800b964:	f805 6b01 	strb.w	r6, [r5], #1
 800b968:	ec53 2b19 	vmov	r2, r3, d9
 800b96c:	4680      	mov	r8, r0
 800b96e:	4689      	mov	r9, r1
 800b970:	f7f5 f8d4 	bl	8000b1c <__aeabi_dcmplt>
 800b974:	2800      	cmp	r0, #0
 800b976:	d164      	bne.n	800ba42 <_dtoa_r+0x62a>
 800b978:	4642      	mov	r2, r8
 800b97a:	464b      	mov	r3, r9
 800b97c:	4937      	ldr	r1, [pc, #220]	; (800ba5c <_dtoa_r+0x644>)
 800b97e:	2000      	movs	r0, #0
 800b980:	f7f4 fca2 	bl	80002c8 <__aeabi_dsub>
 800b984:	ec53 2b19 	vmov	r2, r3, d9
 800b988:	f7f5 f8c8 	bl	8000b1c <__aeabi_dcmplt>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	f040 80b6 	bne.w	800bafe <_dtoa_r+0x6e6>
 800b992:	9b02      	ldr	r3, [sp, #8]
 800b994:	429d      	cmp	r5, r3
 800b996:	f43f af7c 	beq.w	800b892 <_dtoa_r+0x47a>
 800b99a:	4b31      	ldr	r3, [pc, #196]	; (800ba60 <_dtoa_r+0x648>)
 800b99c:	ec51 0b19 	vmov	r0, r1, d9
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f7f4 fe49 	bl	8000638 <__aeabi_dmul>
 800b9a6:	4b2e      	ldr	r3, [pc, #184]	; (800ba60 <_dtoa_r+0x648>)
 800b9a8:	ec41 0b19 	vmov	d9, r0, r1
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	f7f4 fe41 	bl	8000638 <__aeabi_dmul>
 800b9b6:	4680      	mov	r8, r0
 800b9b8:	4689      	mov	r9, r1
 800b9ba:	e7c5      	b.n	800b948 <_dtoa_r+0x530>
 800b9bc:	ec51 0b17 	vmov	r0, r1, d7
 800b9c0:	f7f4 fe3a 	bl	8000638 <__aeabi_dmul>
 800b9c4:	9b02      	ldr	r3, [sp, #8]
 800b9c6:	9d00      	ldr	r5, [sp, #0]
 800b9c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9ca:	ec41 0b19 	vmov	d9, r0, r1
 800b9ce:	4649      	mov	r1, r9
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	f7f5 f8e1 	bl	8000b98 <__aeabi_d2iz>
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	f7f4 fdc4 	bl	8000564 <__aeabi_i2d>
 800b9dc:	3630      	adds	r6, #48	; 0x30
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	f7f4 fc6f 	bl	80002c8 <__aeabi_dsub>
 800b9ea:	f805 6b01 	strb.w	r6, [r5], #1
 800b9ee:	9b02      	ldr	r3, [sp, #8]
 800b9f0:	429d      	cmp	r5, r3
 800b9f2:	4680      	mov	r8, r0
 800b9f4:	4689      	mov	r9, r1
 800b9f6:	f04f 0200 	mov.w	r2, #0
 800b9fa:	d124      	bne.n	800ba46 <_dtoa_r+0x62e>
 800b9fc:	4b1b      	ldr	r3, [pc, #108]	; (800ba6c <_dtoa_r+0x654>)
 800b9fe:	ec51 0b19 	vmov	r0, r1, d9
 800ba02:	f7f4 fc63 	bl	80002cc <__adddf3>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	4649      	mov	r1, r9
 800ba0e:	f7f5 f8a3 	bl	8000b58 <__aeabi_dcmpgt>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d173      	bne.n	800bafe <_dtoa_r+0x6e6>
 800ba16:	ec53 2b19 	vmov	r2, r3, d9
 800ba1a:	4914      	ldr	r1, [pc, #80]	; (800ba6c <_dtoa_r+0x654>)
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	f7f4 fc53 	bl	80002c8 <__aeabi_dsub>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	4640      	mov	r0, r8
 800ba28:	4649      	mov	r1, r9
 800ba2a:	f7f5 f877 	bl	8000b1c <__aeabi_dcmplt>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	f43f af2f 	beq.w	800b892 <_dtoa_r+0x47a>
 800ba34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ba36:	1e6b      	subs	r3, r5, #1
 800ba38:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba3e:	2b30      	cmp	r3, #48	; 0x30
 800ba40:	d0f8      	beq.n	800ba34 <_dtoa_r+0x61c>
 800ba42:	46bb      	mov	fp, r7
 800ba44:	e04a      	b.n	800badc <_dtoa_r+0x6c4>
 800ba46:	4b06      	ldr	r3, [pc, #24]	; (800ba60 <_dtoa_r+0x648>)
 800ba48:	f7f4 fdf6 	bl	8000638 <__aeabi_dmul>
 800ba4c:	4680      	mov	r8, r0
 800ba4e:	4689      	mov	r9, r1
 800ba50:	e7bd      	b.n	800b9ce <_dtoa_r+0x5b6>
 800ba52:	bf00      	nop
 800ba54:	0800ec60 	.word	0x0800ec60
 800ba58:	0800ec38 	.word	0x0800ec38
 800ba5c:	3ff00000 	.word	0x3ff00000
 800ba60:	40240000 	.word	0x40240000
 800ba64:	401c0000 	.word	0x401c0000
 800ba68:	40140000 	.word	0x40140000
 800ba6c:	3fe00000 	.word	0x3fe00000
 800ba70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba74:	9d00      	ldr	r5, [sp, #0]
 800ba76:	4642      	mov	r2, r8
 800ba78:	464b      	mov	r3, r9
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	4639      	mov	r1, r7
 800ba7e:	f7f4 ff05 	bl	800088c <__aeabi_ddiv>
 800ba82:	f7f5 f889 	bl	8000b98 <__aeabi_d2iz>
 800ba86:	9001      	str	r0, [sp, #4]
 800ba88:	f7f4 fd6c 	bl	8000564 <__aeabi_i2d>
 800ba8c:	4642      	mov	r2, r8
 800ba8e:	464b      	mov	r3, r9
 800ba90:	f7f4 fdd2 	bl	8000638 <__aeabi_dmul>
 800ba94:	4602      	mov	r2, r0
 800ba96:	460b      	mov	r3, r1
 800ba98:	4630      	mov	r0, r6
 800ba9a:	4639      	mov	r1, r7
 800ba9c:	f7f4 fc14 	bl	80002c8 <__aeabi_dsub>
 800baa0:	9e01      	ldr	r6, [sp, #4]
 800baa2:	9f04      	ldr	r7, [sp, #16]
 800baa4:	3630      	adds	r6, #48	; 0x30
 800baa6:	f805 6b01 	strb.w	r6, [r5], #1
 800baaa:	9e00      	ldr	r6, [sp, #0]
 800baac:	1bae      	subs	r6, r5, r6
 800baae:	42b7      	cmp	r7, r6
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	d134      	bne.n	800bb20 <_dtoa_r+0x708>
 800bab6:	f7f4 fc09 	bl	80002cc <__adddf3>
 800baba:	4642      	mov	r2, r8
 800babc:	464b      	mov	r3, r9
 800babe:	4606      	mov	r6, r0
 800bac0:	460f      	mov	r7, r1
 800bac2:	f7f5 f849 	bl	8000b58 <__aeabi_dcmpgt>
 800bac6:	b9c8      	cbnz	r0, 800bafc <_dtoa_r+0x6e4>
 800bac8:	4642      	mov	r2, r8
 800baca:	464b      	mov	r3, r9
 800bacc:	4630      	mov	r0, r6
 800bace:	4639      	mov	r1, r7
 800bad0:	f7f5 f81a 	bl	8000b08 <__aeabi_dcmpeq>
 800bad4:	b110      	cbz	r0, 800badc <_dtoa_r+0x6c4>
 800bad6:	9b01      	ldr	r3, [sp, #4]
 800bad8:	07db      	lsls	r3, r3, #31
 800bada:	d40f      	bmi.n	800bafc <_dtoa_r+0x6e4>
 800badc:	4651      	mov	r1, sl
 800bade:	4620      	mov	r0, r4
 800bae0:	f000 fbcc 	bl	800c27c <_Bfree>
 800bae4:	2300      	movs	r3, #0
 800bae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bae8:	702b      	strb	r3, [r5, #0]
 800baea:	f10b 0301 	add.w	r3, fp, #1
 800baee:	6013      	str	r3, [r2, #0]
 800baf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f43f ace2 	beq.w	800b4bc <_dtoa_r+0xa4>
 800baf8:	601d      	str	r5, [r3, #0]
 800bafa:	e4df      	b.n	800b4bc <_dtoa_r+0xa4>
 800bafc:	465f      	mov	r7, fp
 800bafe:	462b      	mov	r3, r5
 800bb00:	461d      	mov	r5, r3
 800bb02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb06:	2a39      	cmp	r2, #57	; 0x39
 800bb08:	d106      	bne.n	800bb18 <_dtoa_r+0x700>
 800bb0a:	9a00      	ldr	r2, [sp, #0]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d1f7      	bne.n	800bb00 <_dtoa_r+0x6e8>
 800bb10:	9900      	ldr	r1, [sp, #0]
 800bb12:	2230      	movs	r2, #48	; 0x30
 800bb14:	3701      	adds	r7, #1
 800bb16:	700a      	strb	r2, [r1, #0]
 800bb18:	781a      	ldrb	r2, [r3, #0]
 800bb1a:	3201      	adds	r2, #1
 800bb1c:	701a      	strb	r2, [r3, #0]
 800bb1e:	e790      	b.n	800ba42 <_dtoa_r+0x62a>
 800bb20:	4ba3      	ldr	r3, [pc, #652]	; (800bdb0 <_dtoa_r+0x998>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	f7f4 fd88 	bl	8000638 <__aeabi_dmul>
 800bb28:	2200      	movs	r2, #0
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	460f      	mov	r7, r1
 800bb30:	f7f4 ffea 	bl	8000b08 <__aeabi_dcmpeq>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d09e      	beq.n	800ba76 <_dtoa_r+0x65e>
 800bb38:	e7d0      	b.n	800badc <_dtoa_r+0x6c4>
 800bb3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb3c:	2a00      	cmp	r2, #0
 800bb3e:	f000 80ca 	beq.w	800bcd6 <_dtoa_r+0x8be>
 800bb42:	9a07      	ldr	r2, [sp, #28]
 800bb44:	2a01      	cmp	r2, #1
 800bb46:	f300 80ad 	bgt.w	800bca4 <_dtoa_r+0x88c>
 800bb4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb4c:	2a00      	cmp	r2, #0
 800bb4e:	f000 80a5 	beq.w	800bc9c <_dtoa_r+0x884>
 800bb52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb56:	9e08      	ldr	r6, [sp, #32]
 800bb58:	9d05      	ldr	r5, [sp, #20]
 800bb5a:	9a05      	ldr	r2, [sp, #20]
 800bb5c:	441a      	add	r2, r3
 800bb5e:	9205      	str	r2, [sp, #20]
 800bb60:	9a06      	ldr	r2, [sp, #24]
 800bb62:	2101      	movs	r1, #1
 800bb64:	441a      	add	r2, r3
 800bb66:	4620      	mov	r0, r4
 800bb68:	9206      	str	r2, [sp, #24]
 800bb6a:	f000 fc87 	bl	800c47c <__i2b>
 800bb6e:	4607      	mov	r7, r0
 800bb70:	b165      	cbz	r5, 800bb8c <_dtoa_r+0x774>
 800bb72:	9b06      	ldr	r3, [sp, #24]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	dd09      	ble.n	800bb8c <_dtoa_r+0x774>
 800bb78:	42ab      	cmp	r3, r5
 800bb7a:	9a05      	ldr	r2, [sp, #20]
 800bb7c:	bfa8      	it	ge
 800bb7e:	462b      	movge	r3, r5
 800bb80:	1ad2      	subs	r2, r2, r3
 800bb82:	9205      	str	r2, [sp, #20]
 800bb84:	9a06      	ldr	r2, [sp, #24]
 800bb86:	1aed      	subs	r5, r5, r3
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	9306      	str	r3, [sp, #24]
 800bb8c:	9b08      	ldr	r3, [sp, #32]
 800bb8e:	b1f3      	cbz	r3, 800bbce <_dtoa_r+0x7b6>
 800bb90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f000 80a3 	beq.w	800bcde <_dtoa_r+0x8c6>
 800bb98:	2e00      	cmp	r6, #0
 800bb9a:	dd10      	ble.n	800bbbe <_dtoa_r+0x7a6>
 800bb9c:	4639      	mov	r1, r7
 800bb9e:	4632      	mov	r2, r6
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 fd2b 	bl	800c5fc <__pow5mult>
 800bba6:	4652      	mov	r2, sl
 800bba8:	4601      	mov	r1, r0
 800bbaa:	4607      	mov	r7, r0
 800bbac:	4620      	mov	r0, r4
 800bbae:	f000 fc7b 	bl	800c4a8 <__multiply>
 800bbb2:	4651      	mov	r1, sl
 800bbb4:	4680      	mov	r8, r0
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f000 fb60 	bl	800c27c <_Bfree>
 800bbbc:	46c2      	mov	sl, r8
 800bbbe:	9b08      	ldr	r3, [sp, #32]
 800bbc0:	1b9a      	subs	r2, r3, r6
 800bbc2:	d004      	beq.n	800bbce <_dtoa_r+0x7b6>
 800bbc4:	4651      	mov	r1, sl
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f000 fd18 	bl	800c5fc <__pow5mult>
 800bbcc:	4682      	mov	sl, r0
 800bbce:	2101      	movs	r1, #1
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	f000 fc53 	bl	800c47c <__i2b>
 800bbd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	4606      	mov	r6, r0
 800bbdc:	f340 8081 	ble.w	800bce2 <_dtoa_r+0x8ca>
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	4601      	mov	r1, r0
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f000 fd09 	bl	800c5fc <__pow5mult>
 800bbea:	9b07      	ldr	r3, [sp, #28]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	4606      	mov	r6, r0
 800bbf0:	dd7a      	ble.n	800bce8 <_dtoa_r+0x8d0>
 800bbf2:	f04f 0800 	mov.w	r8, #0
 800bbf6:	6933      	ldr	r3, [r6, #16]
 800bbf8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bbfc:	6918      	ldr	r0, [r3, #16]
 800bbfe:	f000 fbef 	bl	800c3e0 <__hi0bits>
 800bc02:	f1c0 0020 	rsb	r0, r0, #32
 800bc06:	9b06      	ldr	r3, [sp, #24]
 800bc08:	4418      	add	r0, r3
 800bc0a:	f010 001f 	ands.w	r0, r0, #31
 800bc0e:	f000 8094 	beq.w	800bd3a <_dtoa_r+0x922>
 800bc12:	f1c0 0320 	rsb	r3, r0, #32
 800bc16:	2b04      	cmp	r3, #4
 800bc18:	f340 8085 	ble.w	800bd26 <_dtoa_r+0x90e>
 800bc1c:	9b05      	ldr	r3, [sp, #20]
 800bc1e:	f1c0 001c 	rsb	r0, r0, #28
 800bc22:	4403      	add	r3, r0
 800bc24:	9305      	str	r3, [sp, #20]
 800bc26:	9b06      	ldr	r3, [sp, #24]
 800bc28:	4403      	add	r3, r0
 800bc2a:	4405      	add	r5, r0
 800bc2c:	9306      	str	r3, [sp, #24]
 800bc2e:	9b05      	ldr	r3, [sp, #20]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	dd05      	ble.n	800bc40 <_dtoa_r+0x828>
 800bc34:	4651      	mov	r1, sl
 800bc36:	461a      	mov	r2, r3
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f000 fd39 	bl	800c6b0 <__lshift>
 800bc3e:	4682      	mov	sl, r0
 800bc40:	9b06      	ldr	r3, [sp, #24]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	dd05      	ble.n	800bc52 <_dtoa_r+0x83a>
 800bc46:	4631      	mov	r1, r6
 800bc48:	461a      	mov	r2, r3
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f000 fd30 	bl	800c6b0 <__lshift>
 800bc50:	4606      	mov	r6, r0
 800bc52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d072      	beq.n	800bd3e <_dtoa_r+0x926>
 800bc58:	4631      	mov	r1, r6
 800bc5a:	4650      	mov	r0, sl
 800bc5c:	f000 fd94 	bl	800c788 <__mcmp>
 800bc60:	2800      	cmp	r0, #0
 800bc62:	da6c      	bge.n	800bd3e <_dtoa_r+0x926>
 800bc64:	2300      	movs	r3, #0
 800bc66:	4651      	mov	r1, sl
 800bc68:	220a      	movs	r2, #10
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f000 fb28 	bl	800c2c0 <__multadd>
 800bc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc76:	4682      	mov	sl, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f000 81b0 	beq.w	800bfde <_dtoa_r+0xbc6>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	4639      	mov	r1, r7
 800bc82:	220a      	movs	r2, #10
 800bc84:	4620      	mov	r0, r4
 800bc86:	f000 fb1b 	bl	800c2c0 <__multadd>
 800bc8a:	9b01      	ldr	r3, [sp, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	4607      	mov	r7, r0
 800bc90:	f300 8096 	bgt.w	800bdc0 <_dtoa_r+0x9a8>
 800bc94:	9b07      	ldr	r3, [sp, #28]
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	dc59      	bgt.n	800bd4e <_dtoa_r+0x936>
 800bc9a:	e091      	b.n	800bdc0 <_dtoa_r+0x9a8>
 800bc9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bca2:	e758      	b.n	800bb56 <_dtoa_r+0x73e>
 800bca4:	9b04      	ldr	r3, [sp, #16]
 800bca6:	1e5e      	subs	r6, r3, #1
 800bca8:	9b08      	ldr	r3, [sp, #32]
 800bcaa:	42b3      	cmp	r3, r6
 800bcac:	bfbf      	itttt	lt
 800bcae:	9b08      	ldrlt	r3, [sp, #32]
 800bcb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bcb2:	9608      	strlt	r6, [sp, #32]
 800bcb4:	1af3      	sublt	r3, r6, r3
 800bcb6:	bfb4      	ite	lt
 800bcb8:	18d2      	addlt	r2, r2, r3
 800bcba:	1b9e      	subge	r6, r3, r6
 800bcbc:	9b04      	ldr	r3, [sp, #16]
 800bcbe:	bfbc      	itt	lt
 800bcc0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bcc2:	2600      	movlt	r6, #0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	bfb7      	itett	lt
 800bcc8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bccc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bcd0:	1a9d      	sublt	r5, r3, r2
 800bcd2:	2300      	movlt	r3, #0
 800bcd4:	e741      	b.n	800bb5a <_dtoa_r+0x742>
 800bcd6:	9e08      	ldr	r6, [sp, #32]
 800bcd8:	9d05      	ldr	r5, [sp, #20]
 800bcda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bcdc:	e748      	b.n	800bb70 <_dtoa_r+0x758>
 800bcde:	9a08      	ldr	r2, [sp, #32]
 800bce0:	e770      	b.n	800bbc4 <_dtoa_r+0x7ac>
 800bce2:	9b07      	ldr	r3, [sp, #28]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	dc19      	bgt.n	800bd1c <_dtoa_r+0x904>
 800bce8:	9b02      	ldr	r3, [sp, #8]
 800bcea:	b9bb      	cbnz	r3, 800bd1c <_dtoa_r+0x904>
 800bcec:	9b03      	ldr	r3, [sp, #12]
 800bcee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcf2:	b99b      	cbnz	r3, 800bd1c <_dtoa_r+0x904>
 800bcf4:	9b03      	ldr	r3, [sp, #12]
 800bcf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcfa:	0d1b      	lsrs	r3, r3, #20
 800bcfc:	051b      	lsls	r3, r3, #20
 800bcfe:	b183      	cbz	r3, 800bd22 <_dtoa_r+0x90a>
 800bd00:	9b05      	ldr	r3, [sp, #20]
 800bd02:	3301      	adds	r3, #1
 800bd04:	9305      	str	r3, [sp, #20]
 800bd06:	9b06      	ldr	r3, [sp, #24]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	9306      	str	r3, [sp, #24]
 800bd0c:	f04f 0801 	mov.w	r8, #1
 800bd10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f47f af6f 	bne.w	800bbf6 <_dtoa_r+0x7de>
 800bd18:	2001      	movs	r0, #1
 800bd1a:	e774      	b.n	800bc06 <_dtoa_r+0x7ee>
 800bd1c:	f04f 0800 	mov.w	r8, #0
 800bd20:	e7f6      	b.n	800bd10 <_dtoa_r+0x8f8>
 800bd22:	4698      	mov	r8, r3
 800bd24:	e7f4      	b.n	800bd10 <_dtoa_r+0x8f8>
 800bd26:	d082      	beq.n	800bc2e <_dtoa_r+0x816>
 800bd28:	9a05      	ldr	r2, [sp, #20]
 800bd2a:	331c      	adds	r3, #28
 800bd2c:	441a      	add	r2, r3
 800bd2e:	9205      	str	r2, [sp, #20]
 800bd30:	9a06      	ldr	r2, [sp, #24]
 800bd32:	441a      	add	r2, r3
 800bd34:	441d      	add	r5, r3
 800bd36:	9206      	str	r2, [sp, #24]
 800bd38:	e779      	b.n	800bc2e <_dtoa_r+0x816>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	e7f4      	b.n	800bd28 <_dtoa_r+0x910>
 800bd3e:	9b04      	ldr	r3, [sp, #16]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	dc37      	bgt.n	800bdb4 <_dtoa_r+0x99c>
 800bd44:	9b07      	ldr	r3, [sp, #28]
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	dd34      	ble.n	800bdb4 <_dtoa_r+0x99c>
 800bd4a:	9b04      	ldr	r3, [sp, #16]
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	9b01      	ldr	r3, [sp, #4]
 800bd50:	b963      	cbnz	r3, 800bd6c <_dtoa_r+0x954>
 800bd52:	4631      	mov	r1, r6
 800bd54:	2205      	movs	r2, #5
 800bd56:	4620      	mov	r0, r4
 800bd58:	f000 fab2 	bl	800c2c0 <__multadd>
 800bd5c:	4601      	mov	r1, r0
 800bd5e:	4606      	mov	r6, r0
 800bd60:	4650      	mov	r0, sl
 800bd62:	f000 fd11 	bl	800c788 <__mcmp>
 800bd66:	2800      	cmp	r0, #0
 800bd68:	f73f adbb 	bgt.w	800b8e2 <_dtoa_r+0x4ca>
 800bd6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd6e:	9d00      	ldr	r5, [sp, #0]
 800bd70:	ea6f 0b03 	mvn.w	fp, r3
 800bd74:	f04f 0800 	mov.w	r8, #0
 800bd78:	4631      	mov	r1, r6
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f000 fa7e 	bl	800c27c <_Bfree>
 800bd80:	2f00      	cmp	r7, #0
 800bd82:	f43f aeab 	beq.w	800badc <_dtoa_r+0x6c4>
 800bd86:	f1b8 0f00 	cmp.w	r8, #0
 800bd8a:	d005      	beq.n	800bd98 <_dtoa_r+0x980>
 800bd8c:	45b8      	cmp	r8, r7
 800bd8e:	d003      	beq.n	800bd98 <_dtoa_r+0x980>
 800bd90:	4641      	mov	r1, r8
 800bd92:	4620      	mov	r0, r4
 800bd94:	f000 fa72 	bl	800c27c <_Bfree>
 800bd98:	4639      	mov	r1, r7
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f000 fa6e 	bl	800c27c <_Bfree>
 800bda0:	e69c      	b.n	800badc <_dtoa_r+0x6c4>
 800bda2:	2600      	movs	r6, #0
 800bda4:	4637      	mov	r7, r6
 800bda6:	e7e1      	b.n	800bd6c <_dtoa_r+0x954>
 800bda8:	46bb      	mov	fp, r7
 800bdaa:	4637      	mov	r7, r6
 800bdac:	e599      	b.n	800b8e2 <_dtoa_r+0x4ca>
 800bdae:	bf00      	nop
 800bdb0:	40240000 	.word	0x40240000
 800bdb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 80c8 	beq.w	800bf4c <_dtoa_r+0xb34>
 800bdbc:	9b04      	ldr	r3, [sp, #16]
 800bdbe:	9301      	str	r3, [sp, #4]
 800bdc0:	2d00      	cmp	r5, #0
 800bdc2:	dd05      	ble.n	800bdd0 <_dtoa_r+0x9b8>
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	462a      	mov	r2, r5
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f000 fc71 	bl	800c6b0 <__lshift>
 800bdce:	4607      	mov	r7, r0
 800bdd0:	f1b8 0f00 	cmp.w	r8, #0
 800bdd4:	d05b      	beq.n	800be8e <_dtoa_r+0xa76>
 800bdd6:	6879      	ldr	r1, [r7, #4]
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f000 fa0f 	bl	800c1fc <_Balloc>
 800bdde:	4605      	mov	r5, r0
 800bde0:	b928      	cbnz	r0, 800bdee <_dtoa_r+0x9d6>
 800bde2:	4b83      	ldr	r3, [pc, #524]	; (800bff0 <_dtoa_r+0xbd8>)
 800bde4:	4602      	mov	r2, r0
 800bde6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bdea:	f7ff bb2e 	b.w	800b44a <_dtoa_r+0x32>
 800bdee:	693a      	ldr	r2, [r7, #16]
 800bdf0:	3202      	adds	r2, #2
 800bdf2:	0092      	lsls	r2, r2, #2
 800bdf4:	f107 010c 	add.w	r1, r7, #12
 800bdf8:	300c      	adds	r0, #12
 800bdfa:	f001 ff85 	bl	800dd08 <memcpy>
 800bdfe:	2201      	movs	r2, #1
 800be00:	4629      	mov	r1, r5
 800be02:	4620      	mov	r0, r4
 800be04:	f000 fc54 	bl	800c6b0 <__lshift>
 800be08:	9b00      	ldr	r3, [sp, #0]
 800be0a:	3301      	adds	r3, #1
 800be0c:	9304      	str	r3, [sp, #16]
 800be0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be12:	4413      	add	r3, r2
 800be14:	9308      	str	r3, [sp, #32]
 800be16:	9b02      	ldr	r3, [sp, #8]
 800be18:	f003 0301 	and.w	r3, r3, #1
 800be1c:	46b8      	mov	r8, r7
 800be1e:	9306      	str	r3, [sp, #24]
 800be20:	4607      	mov	r7, r0
 800be22:	9b04      	ldr	r3, [sp, #16]
 800be24:	4631      	mov	r1, r6
 800be26:	3b01      	subs	r3, #1
 800be28:	4650      	mov	r0, sl
 800be2a:	9301      	str	r3, [sp, #4]
 800be2c:	f7ff fa6a 	bl	800b304 <quorem>
 800be30:	4641      	mov	r1, r8
 800be32:	9002      	str	r0, [sp, #8]
 800be34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800be38:	4650      	mov	r0, sl
 800be3a:	f000 fca5 	bl	800c788 <__mcmp>
 800be3e:	463a      	mov	r2, r7
 800be40:	9005      	str	r0, [sp, #20]
 800be42:	4631      	mov	r1, r6
 800be44:	4620      	mov	r0, r4
 800be46:	f000 fcbb 	bl	800c7c0 <__mdiff>
 800be4a:	68c2      	ldr	r2, [r0, #12]
 800be4c:	4605      	mov	r5, r0
 800be4e:	bb02      	cbnz	r2, 800be92 <_dtoa_r+0xa7a>
 800be50:	4601      	mov	r1, r0
 800be52:	4650      	mov	r0, sl
 800be54:	f000 fc98 	bl	800c788 <__mcmp>
 800be58:	4602      	mov	r2, r0
 800be5a:	4629      	mov	r1, r5
 800be5c:	4620      	mov	r0, r4
 800be5e:	9209      	str	r2, [sp, #36]	; 0x24
 800be60:	f000 fa0c 	bl	800c27c <_Bfree>
 800be64:	9b07      	ldr	r3, [sp, #28]
 800be66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be68:	9d04      	ldr	r5, [sp, #16]
 800be6a:	ea43 0102 	orr.w	r1, r3, r2
 800be6e:	9b06      	ldr	r3, [sp, #24]
 800be70:	4319      	orrs	r1, r3
 800be72:	d110      	bne.n	800be96 <_dtoa_r+0xa7e>
 800be74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be78:	d029      	beq.n	800bece <_dtoa_r+0xab6>
 800be7a:	9b05      	ldr	r3, [sp, #20]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	dd02      	ble.n	800be86 <_dtoa_r+0xa6e>
 800be80:	9b02      	ldr	r3, [sp, #8]
 800be82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800be86:	9b01      	ldr	r3, [sp, #4]
 800be88:	f883 9000 	strb.w	r9, [r3]
 800be8c:	e774      	b.n	800bd78 <_dtoa_r+0x960>
 800be8e:	4638      	mov	r0, r7
 800be90:	e7ba      	b.n	800be08 <_dtoa_r+0x9f0>
 800be92:	2201      	movs	r2, #1
 800be94:	e7e1      	b.n	800be5a <_dtoa_r+0xa42>
 800be96:	9b05      	ldr	r3, [sp, #20]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	db04      	blt.n	800bea6 <_dtoa_r+0xa8e>
 800be9c:	9907      	ldr	r1, [sp, #28]
 800be9e:	430b      	orrs	r3, r1
 800bea0:	9906      	ldr	r1, [sp, #24]
 800bea2:	430b      	orrs	r3, r1
 800bea4:	d120      	bne.n	800bee8 <_dtoa_r+0xad0>
 800bea6:	2a00      	cmp	r2, #0
 800bea8:	dded      	ble.n	800be86 <_dtoa_r+0xa6e>
 800beaa:	4651      	mov	r1, sl
 800beac:	2201      	movs	r2, #1
 800beae:	4620      	mov	r0, r4
 800beb0:	f000 fbfe 	bl	800c6b0 <__lshift>
 800beb4:	4631      	mov	r1, r6
 800beb6:	4682      	mov	sl, r0
 800beb8:	f000 fc66 	bl	800c788 <__mcmp>
 800bebc:	2800      	cmp	r0, #0
 800bebe:	dc03      	bgt.n	800bec8 <_dtoa_r+0xab0>
 800bec0:	d1e1      	bne.n	800be86 <_dtoa_r+0xa6e>
 800bec2:	f019 0f01 	tst.w	r9, #1
 800bec6:	d0de      	beq.n	800be86 <_dtoa_r+0xa6e>
 800bec8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800becc:	d1d8      	bne.n	800be80 <_dtoa_r+0xa68>
 800bece:	9a01      	ldr	r2, [sp, #4]
 800bed0:	2339      	movs	r3, #57	; 0x39
 800bed2:	7013      	strb	r3, [r2, #0]
 800bed4:	462b      	mov	r3, r5
 800bed6:	461d      	mov	r5, r3
 800bed8:	3b01      	subs	r3, #1
 800beda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bede:	2a39      	cmp	r2, #57	; 0x39
 800bee0:	d06c      	beq.n	800bfbc <_dtoa_r+0xba4>
 800bee2:	3201      	adds	r2, #1
 800bee4:	701a      	strb	r2, [r3, #0]
 800bee6:	e747      	b.n	800bd78 <_dtoa_r+0x960>
 800bee8:	2a00      	cmp	r2, #0
 800beea:	dd07      	ble.n	800befc <_dtoa_r+0xae4>
 800beec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bef0:	d0ed      	beq.n	800bece <_dtoa_r+0xab6>
 800bef2:	9a01      	ldr	r2, [sp, #4]
 800bef4:	f109 0301 	add.w	r3, r9, #1
 800bef8:	7013      	strb	r3, [r2, #0]
 800befa:	e73d      	b.n	800bd78 <_dtoa_r+0x960>
 800befc:	9b04      	ldr	r3, [sp, #16]
 800befe:	9a08      	ldr	r2, [sp, #32]
 800bf00:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d043      	beq.n	800bf90 <_dtoa_r+0xb78>
 800bf08:	4651      	mov	r1, sl
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	220a      	movs	r2, #10
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f000 f9d6 	bl	800c2c0 <__multadd>
 800bf14:	45b8      	cmp	r8, r7
 800bf16:	4682      	mov	sl, r0
 800bf18:	f04f 0300 	mov.w	r3, #0
 800bf1c:	f04f 020a 	mov.w	r2, #10
 800bf20:	4641      	mov	r1, r8
 800bf22:	4620      	mov	r0, r4
 800bf24:	d107      	bne.n	800bf36 <_dtoa_r+0xb1e>
 800bf26:	f000 f9cb 	bl	800c2c0 <__multadd>
 800bf2a:	4680      	mov	r8, r0
 800bf2c:	4607      	mov	r7, r0
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	3301      	adds	r3, #1
 800bf32:	9304      	str	r3, [sp, #16]
 800bf34:	e775      	b.n	800be22 <_dtoa_r+0xa0a>
 800bf36:	f000 f9c3 	bl	800c2c0 <__multadd>
 800bf3a:	4639      	mov	r1, r7
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	2300      	movs	r3, #0
 800bf40:	220a      	movs	r2, #10
 800bf42:	4620      	mov	r0, r4
 800bf44:	f000 f9bc 	bl	800c2c0 <__multadd>
 800bf48:	4607      	mov	r7, r0
 800bf4a:	e7f0      	b.n	800bf2e <_dtoa_r+0xb16>
 800bf4c:	9b04      	ldr	r3, [sp, #16]
 800bf4e:	9301      	str	r3, [sp, #4]
 800bf50:	9d00      	ldr	r5, [sp, #0]
 800bf52:	4631      	mov	r1, r6
 800bf54:	4650      	mov	r0, sl
 800bf56:	f7ff f9d5 	bl	800b304 <quorem>
 800bf5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bf5e:	9b00      	ldr	r3, [sp, #0]
 800bf60:	f805 9b01 	strb.w	r9, [r5], #1
 800bf64:	1aea      	subs	r2, r5, r3
 800bf66:	9b01      	ldr	r3, [sp, #4]
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	dd07      	ble.n	800bf7c <_dtoa_r+0xb64>
 800bf6c:	4651      	mov	r1, sl
 800bf6e:	2300      	movs	r3, #0
 800bf70:	220a      	movs	r2, #10
 800bf72:	4620      	mov	r0, r4
 800bf74:	f000 f9a4 	bl	800c2c0 <__multadd>
 800bf78:	4682      	mov	sl, r0
 800bf7a:	e7ea      	b.n	800bf52 <_dtoa_r+0xb3a>
 800bf7c:	9b01      	ldr	r3, [sp, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	bfc8      	it	gt
 800bf82:	461d      	movgt	r5, r3
 800bf84:	9b00      	ldr	r3, [sp, #0]
 800bf86:	bfd8      	it	le
 800bf88:	2501      	movle	r5, #1
 800bf8a:	441d      	add	r5, r3
 800bf8c:	f04f 0800 	mov.w	r8, #0
 800bf90:	4651      	mov	r1, sl
 800bf92:	2201      	movs	r2, #1
 800bf94:	4620      	mov	r0, r4
 800bf96:	f000 fb8b 	bl	800c6b0 <__lshift>
 800bf9a:	4631      	mov	r1, r6
 800bf9c:	4682      	mov	sl, r0
 800bf9e:	f000 fbf3 	bl	800c788 <__mcmp>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	dc96      	bgt.n	800bed4 <_dtoa_r+0xabc>
 800bfa6:	d102      	bne.n	800bfae <_dtoa_r+0xb96>
 800bfa8:	f019 0f01 	tst.w	r9, #1
 800bfac:	d192      	bne.n	800bed4 <_dtoa_r+0xabc>
 800bfae:	462b      	mov	r3, r5
 800bfb0:	461d      	mov	r5, r3
 800bfb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfb6:	2a30      	cmp	r2, #48	; 0x30
 800bfb8:	d0fa      	beq.n	800bfb0 <_dtoa_r+0xb98>
 800bfba:	e6dd      	b.n	800bd78 <_dtoa_r+0x960>
 800bfbc:	9a00      	ldr	r2, [sp, #0]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d189      	bne.n	800bed6 <_dtoa_r+0xabe>
 800bfc2:	f10b 0b01 	add.w	fp, fp, #1
 800bfc6:	2331      	movs	r3, #49	; 0x31
 800bfc8:	e796      	b.n	800bef8 <_dtoa_r+0xae0>
 800bfca:	4b0a      	ldr	r3, [pc, #40]	; (800bff4 <_dtoa_r+0xbdc>)
 800bfcc:	f7ff ba99 	b.w	800b502 <_dtoa_r+0xea>
 800bfd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f47f aa6d 	bne.w	800b4b2 <_dtoa_r+0x9a>
 800bfd8:	4b07      	ldr	r3, [pc, #28]	; (800bff8 <_dtoa_r+0xbe0>)
 800bfda:	f7ff ba92 	b.w	800b502 <_dtoa_r+0xea>
 800bfde:	9b01      	ldr	r3, [sp, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	dcb5      	bgt.n	800bf50 <_dtoa_r+0xb38>
 800bfe4:	9b07      	ldr	r3, [sp, #28]
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	f73f aeb1 	bgt.w	800bd4e <_dtoa_r+0x936>
 800bfec:	e7b0      	b.n	800bf50 <_dtoa_r+0xb38>
 800bfee:	bf00      	nop
 800bff0:	0800ebc9 	.word	0x0800ebc9
 800bff4:	0800eb24 	.word	0x0800eb24
 800bff8:	0800eb4d 	.word	0x0800eb4d

0800bffc <_free_r>:
 800bffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bffe:	2900      	cmp	r1, #0
 800c000:	d044      	beq.n	800c08c <_free_r+0x90>
 800c002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c006:	9001      	str	r0, [sp, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f1a1 0404 	sub.w	r4, r1, #4
 800c00e:	bfb8      	it	lt
 800c010:	18e4      	addlt	r4, r4, r3
 800c012:	f000 f8e7 	bl	800c1e4 <__malloc_lock>
 800c016:	4a1e      	ldr	r2, [pc, #120]	; (800c090 <_free_r+0x94>)
 800c018:	9801      	ldr	r0, [sp, #4]
 800c01a:	6813      	ldr	r3, [r2, #0]
 800c01c:	b933      	cbnz	r3, 800c02c <_free_r+0x30>
 800c01e:	6063      	str	r3, [r4, #4]
 800c020:	6014      	str	r4, [r2, #0]
 800c022:	b003      	add	sp, #12
 800c024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c028:	f000 b8e2 	b.w	800c1f0 <__malloc_unlock>
 800c02c:	42a3      	cmp	r3, r4
 800c02e:	d908      	bls.n	800c042 <_free_r+0x46>
 800c030:	6825      	ldr	r5, [r4, #0]
 800c032:	1961      	adds	r1, r4, r5
 800c034:	428b      	cmp	r3, r1
 800c036:	bf01      	itttt	eq
 800c038:	6819      	ldreq	r1, [r3, #0]
 800c03a:	685b      	ldreq	r3, [r3, #4]
 800c03c:	1949      	addeq	r1, r1, r5
 800c03e:	6021      	streq	r1, [r4, #0]
 800c040:	e7ed      	b.n	800c01e <_free_r+0x22>
 800c042:	461a      	mov	r2, r3
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	b10b      	cbz	r3, 800c04c <_free_r+0x50>
 800c048:	42a3      	cmp	r3, r4
 800c04a:	d9fa      	bls.n	800c042 <_free_r+0x46>
 800c04c:	6811      	ldr	r1, [r2, #0]
 800c04e:	1855      	adds	r5, r2, r1
 800c050:	42a5      	cmp	r5, r4
 800c052:	d10b      	bne.n	800c06c <_free_r+0x70>
 800c054:	6824      	ldr	r4, [r4, #0]
 800c056:	4421      	add	r1, r4
 800c058:	1854      	adds	r4, r2, r1
 800c05a:	42a3      	cmp	r3, r4
 800c05c:	6011      	str	r1, [r2, #0]
 800c05e:	d1e0      	bne.n	800c022 <_free_r+0x26>
 800c060:	681c      	ldr	r4, [r3, #0]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	6053      	str	r3, [r2, #4]
 800c066:	440c      	add	r4, r1
 800c068:	6014      	str	r4, [r2, #0]
 800c06a:	e7da      	b.n	800c022 <_free_r+0x26>
 800c06c:	d902      	bls.n	800c074 <_free_r+0x78>
 800c06e:	230c      	movs	r3, #12
 800c070:	6003      	str	r3, [r0, #0]
 800c072:	e7d6      	b.n	800c022 <_free_r+0x26>
 800c074:	6825      	ldr	r5, [r4, #0]
 800c076:	1961      	adds	r1, r4, r5
 800c078:	428b      	cmp	r3, r1
 800c07a:	bf04      	itt	eq
 800c07c:	6819      	ldreq	r1, [r3, #0]
 800c07e:	685b      	ldreq	r3, [r3, #4]
 800c080:	6063      	str	r3, [r4, #4]
 800c082:	bf04      	itt	eq
 800c084:	1949      	addeq	r1, r1, r5
 800c086:	6021      	streq	r1, [r4, #0]
 800c088:	6054      	str	r4, [r2, #4]
 800c08a:	e7ca      	b.n	800c022 <_free_r+0x26>
 800c08c:	b003      	add	sp, #12
 800c08e:	bd30      	pop	{r4, r5, pc}
 800c090:	200021cc 	.word	0x200021cc

0800c094 <malloc>:
 800c094:	4b02      	ldr	r3, [pc, #8]	; (800c0a0 <malloc+0xc>)
 800c096:	4601      	mov	r1, r0
 800c098:	6818      	ldr	r0, [r3, #0]
 800c09a:	f000 b823 	b.w	800c0e4 <_malloc_r>
 800c09e:	bf00      	nop
 800c0a0:	20000164 	.word	0x20000164

0800c0a4 <sbrk_aligned>:
 800c0a4:	b570      	push	{r4, r5, r6, lr}
 800c0a6:	4e0e      	ldr	r6, [pc, #56]	; (800c0e0 <sbrk_aligned+0x3c>)
 800c0a8:	460c      	mov	r4, r1
 800c0aa:	6831      	ldr	r1, [r6, #0]
 800c0ac:	4605      	mov	r5, r0
 800c0ae:	b911      	cbnz	r1, 800c0b6 <sbrk_aligned+0x12>
 800c0b0:	f001 fe1a 	bl	800dce8 <_sbrk_r>
 800c0b4:	6030      	str	r0, [r6, #0]
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	f001 fe15 	bl	800dce8 <_sbrk_r>
 800c0be:	1c43      	adds	r3, r0, #1
 800c0c0:	d00a      	beq.n	800c0d8 <sbrk_aligned+0x34>
 800c0c2:	1cc4      	adds	r4, r0, #3
 800c0c4:	f024 0403 	bic.w	r4, r4, #3
 800c0c8:	42a0      	cmp	r0, r4
 800c0ca:	d007      	beq.n	800c0dc <sbrk_aligned+0x38>
 800c0cc:	1a21      	subs	r1, r4, r0
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	f001 fe0a 	bl	800dce8 <_sbrk_r>
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	d101      	bne.n	800c0dc <sbrk_aligned+0x38>
 800c0d8:	f04f 34ff 	mov.w	r4, #4294967295
 800c0dc:	4620      	mov	r0, r4
 800c0de:	bd70      	pop	{r4, r5, r6, pc}
 800c0e0:	200021d0 	.word	0x200021d0

0800c0e4 <_malloc_r>:
 800c0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0e8:	1ccd      	adds	r5, r1, #3
 800c0ea:	f025 0503 	bic.w	r5, r5, #3
 800c0ee:	3508      	adds	r5, #8
 800c0f0:	2d0c      	cmp	r5, #12
 800c0f2:	bf38      	it	cc
 800c0f4:	250c      	movcc	r5, #12
 800c0f6:	2d00      	cmp	r5, #0
 800c0f8:	4607      	mov	r7, r0
 800c0fa:	db01      	blt.n	800c100 <_malloc_r+0x1c>
 800c0fc:	42a9      	cmp	r1, r5
 800c0fe:	d905      	bls.n	800c10c <_malloc_r+0x28>
 800c100:	230c      	movs	r3, #12
 800c102:	603b      	str	r3, [r7, #0]
 800c104:	2600      	movs	r6, #0
 800c106:	4630      	mov	r0, r6
 800c108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c10c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c1e0 <_malloc_r+0xfc>
 800c110:	f000 f868 	bl	800c1e4 <__malloc_lock>
 800c114:	f8d8 3000 	ldr.w	r3, [r8]
 800c118:	461c      	mov	r4, r3
 800c11a:	bb5c      	cbnz	r4, 800c174 <_malloc_r+0x90>
 800c11c:	4629      	mov	r1, r5
 800c11e:	4638      	mov	r0, r7
 800c120:	f7ff ffc0 	bl	800c0a4 <sbrk_aligned>
 800c124:	1c43      	adds	r3, r0, #1
 800c126:	4604      	mov	r4, r0
 800c128:	d155      	bne.n	800c1d6 <_malloc_r+0xf2>
 800c12a:	f8d8 4000 	ldr.w	r4, [r8]
 800c12e:	4626      	mov	r6, r4
 800c130:	2e00      	cmp	r6, #0
 800c132:	d145      	bne.n	800c1c0 <_malloc_r+0xdc>
 800c134:	2c00      	cmp	r4, #0
 800c136:	d048      	beq.n	800c1ca <_malloc_r+0xe6>
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	4631      	mov	r1, r6
 800c13c:	4638      	mov	r0, r7
 800c13e:	eb04 0903 	add.w	r9, r4, r3
 800c142:	f001 fdd1 	bl	800dce8 <_sbrk_r>
 800c146:	4581      	cmp	r9, r0
 800c148:	d13f      	bne.n	800c1ca <_malloc_r+0xe6>
 800c14a:	6821      	ldr	r1, [r4, #0]
 800c14c:	1a6d      	subs	r5, r5, r1
 800c14e:	4629      	mov	r1, r5
 800c150:	4638      	mov	r0, r7
 800c152:	f7ff ffa7 	bl	800c0a4 <sbrk_aligned>
 800c156:	3001      	adds	r0, #1
 800c158:	d037      	beq.n	800c1ca <_malloc_r+0xe6>
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	442b      	add	r3, r5
 800c15e:	6023      	str	r3, [r4, #0]
 800c160:	f8d8 3000 	ldr.w	r3, [r8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d038      	beq.n	800c1da <_malloc_r+0xf6>
 800c168:	685a      	ldr	r2, [r3, #4]
 800c16a:	42a2      	cmp	r2, r4
 800c16c:	d12b      	bne.n	800c1c6 <_malloc_r+0xe2>
 800c16e:	2200      	movs	r2, #0
 800c170:	605a      	str	r2, [r3, #4]
 800c172:	e00f      	b.n	800c194 <_malloc_r+0xb0>
 800c174:	6822      	ldr	r2, [r4, #0]
 800c176:	1b52      	subs	r2, r2, r5
 800c178:	d41f      	bmi.n	800c1ba <_malloc_r+0xd6>
 800c17a:	2a0b      	cmp	r2, #11
 800c17c:	d917      	bls.n	800c1ae <_malloc_r+0xca>
 800c17e:	1961      	adds	r1, r4, r5
 800c180:	42a3      	cmp	r3, r4
 800c182:	6025      	str	r5, [r4, #0]
 800c184:	bf18      	it	ne
 800c186:	6059      	strne	r1, [r3, #4]
 800c188:	6863      	ldr	r3, [r4, #4]
 800c18a:	bf08      	it	eq
 800c18c:	f8c8 1000 	streq.w	r1, [r8]
 800c190:	5162      	str	r2, [r4, r5]
 800c192:	604b      	str	r3, [r1, #4]
 800c194:	4638      	mov	r0, r7
 800c196:	f104 060b 	add.w	r6, r4, #11
 800c19a:	f000 f829 	bl	800c1f0 <__malloc_unlock>
 800c19e:	f026 0607 	bic.w	r6, r6, #7
 800c1a2:	1d23      	adds	r3, r4, #4
 800c1a4:	1af2      	subs	r2, r6, r3
 800c1a6:	d0ae      	beq.n	800c106 <_malloc_r+0x22>
 800c1a8:	1b9b      	subs	r3, r3, r6
 800c1aa:	50a3      	str	r3, [r4, r2]
 800c1ac:	e7ab      	b.n	800c106 <_malloc_r+0x22>
 800c1ae:	42a3      	cmp	r3, r4
 800c1b0:	6862      	ldr	r2, [r4, #4]
 800c1b2:	d1dd      	bne.n	800c170 <_malloc_r+0x8c>
 800c1b4:	f8c8 2000 	str.w	r2, [r8]
 800c1b8:	e7ec      	b.n	800c194 <_malloc_r+0xb0>
 800c1ba:	4623      	mov	r3, r4
 800c1bc:	6864      	ldr	r4, [r4, #4]
 800c1be:	e7ac      	b.n	800c11a <_malloc_r+0x36>
 800c1c0:	4634      	mov	r4, r6
 800c1c2:	6876      	ldr	r6, [r6, #4]
 800c1c4:	e7b4      	b.n	800c130 <_malloc_r+0x4c>
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	e7cc      	b.n	800c164 <_malloc_r+0x80>
 800c1ca:	230c      	movs	r3, #12
 800c1cc:	603b      	str	r3, [r7, #0]
 800c1ce:	4638      	mov	r0, r7
 800c1d0:	f000 f80e 	bl	800c1f0 <__malloc_unlock>
 800c1d4:	e797      	b.n	800c106 <_malloc_r+0x22>
 800c1d6:	6025      	str	r5, [r4, #0]
 800c1d8:	e7dc      	b.n	800c194 <_malloc_r+0xb0>
 800c1da:	605b      	str	r3, [r3, #4]
 800c1dc:	deff      	udf	#255	; 0xff
 800c1de:	bf00      	nop
 800c1e0:	200021cc 	.word	0x200021cc

0800c1e4 <__malloc_lock>:
 800c1e4:	4801      	ldr	r0, [pc, #4]	; (800c1ec <__malloc_lock+0x8>)
 800c1e6:	f7ff b884 	b.w	800b2f2 <__retarget_lock_acquire_recursive>
 800c1ea:	bf00      	nop
 800c1ec:	200021c8 	.word	0x200021c8

0800c1f0 <__malloc_unlock>:
 800c1f0:	4801      	ldr	r0, [pc, #4]	; (800c1f8 <__malloc_unlock+0x8>)
 800c1f2:	f7ff b87f 	b.w	800b2f4 <__retarget_lock_release_recursive>
 800c1f6:	bf00      	nop
 800c1f8:	200021c8 	.word	0x200021c8

0800c1fc <_Balloc>:
 800c1fc:	b570      	push	{r4, r5, r6, lr}
 800c1fe:	69c6      	ldr	r6, [r0, #28]
 800c200:	4604      	mov	r4, r0
 800c202:	460d      	mov	r5, r1
 800c204:	b976      	cbnz	r6, 800c224 <_Balloc+0x28>
 800c206:	2010      	movs	r0, #16
 800c208:	f7ff ff44 	bl	800c094 <malloc>
 800c20c:	4602      	mov	r2, r0
 800c20e:	61e0      	str	r0, [r4, #28]
 800c210:	b920      	cbnz	r0, 800c21c <_Balloc+0x20>
 800c212:	4b18      	ldr	r3, [pc, #96]	; (800c274 <_Balloc+0x78>)
 800c214:	4818      	ldr	r0, [pc, #96]	; (800c278 <_Balloc+0x7c>)
 800c216:	216b      	movs	r1, #107	; 0x6b
 800c218:	f001 fd8e 	bl	800dd38 <__assert_func>
 800c21c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c220:	6006      	str	r6, [r0, #0]
 800c222:	60c6      	str	r6, [r0, #12]
 800c224:	69e6      	ldr	r6, [r4, #28]
 800c226:	68f3      	ldr	r3, [r6, #12]
 800c228:	b183      	cbz	r3, 800c24c <_Balloc+0x50>
 800c22a:	69e3      	ldr	r3, [r4, #28]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c232:	b9b8      	cbnz	r0, 800c264 <_Balloc+0x68>
 800c234:	2101      	movs	r1, #1
 800c236:	fa01 f605 	lsl.w	r6, r1, r5
 800c23a:	1d72      	adds	r2, r6, #5
 800c23c:	0092      	lsls	r2, r2, #2
 800c23e:	4620      	mov	r0, r4
 800c240:	f001 fd98 	bl	800dd74 <_calloc_r>
 800c244:	b160      	cbz	r0, 800c260 <_Balloc+0x64>
 800c246:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c24a:	e00e      	b.n	800c26a <_Balloc+0x6e>
 800c24c:	2221      	movs	r2, #33	; 0x21
 800c24e:	2104      	movs	r1, #4
 800c250:	4620      	mov	r0, r4
 800c252:	f001 fd8f 	bl	800dd74 <_calloc_r>
 800c256:	69e3      	ldr	r3, [r4, #28]
 800c258:	60f0      	str	r0, [r6, #12]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1e4      	bne.n	800c22a <_Balloc+0x2e>
 800c260:	2000      	movs	r0, #0
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	6802      	ldr	r2, [r0, #0]
 800c266:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c26a:	2300      	movs	r3, #0
 800c26c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c270:	e7f7      	b.n	800c262 <_Balloc+0x66>
 800c272:	bf00      	nop
 800c274:	0800eb5a 	.word	0x0800eb5a
 800c278:	0800ebda 	.word	0x0800ebda

0800c27c <_Bfree>:
 800c27c:	b570      	push	{r4, r5, r6, lr}
 800c27e:	69c6      	ldr	r6, [r0, #28]
 800c280:	4605      	mov	r5, r0
 800c282:	460c      	mov	r4, r1
 800c284:	b976      	cbnz	r6, 800c2a4 <_Bfree+0x28>
 800c286:	2010      	movs	r0, #16
 800c288:	f7ff ff04 	bl	800c094 <malloc>
 800c28c:	4602      	mov	r2, r0
 800c28e:	61e8      	str	r0, [r5, #28]
 800c290:	b920      	cbnz	r0, 800c29c <_Bfree+0x20>
 800c292:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <_Bfree+0x3c>)
 800c294:	4809      	ldr	r0, [pc, #36]	; (800c2bc <_Bfree+0x40>)
 800c296:	218f      	movs	r1, #143	; 0x8f
 800c298:	f001 fd4e 	bl	800dd38 <__assert_func>
 800c29c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2a0:	6006      	str	r6, [r0, #0]
 800c2a2:	60c6      	str	r6, [r0, #12]
 800c2a4:	b13c      	cbz	r4, 800c2b6 <_Bfree+0x3a>
 800c2a6:	69eb      	ldr	r3, [r5, #28]
 800c2a8:	6862      	ldr	r2, [r4, #4]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2b0:	6021      	str	r1, [r4, #0]
 800c2b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}
 800c2b8:	0800eb5a 	.word	0x0800eb5a
 800c2bc:	0800ebda 	.word	0x0800ebda

0800c2c0 <__multadd>:
 800c2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c4:	690d      	ldr	r5, [r1, #16]
 800c2c6:	4607      	mov	r7, r0
 800c2c8:	460c      	mov	r4, r1
 800c2ca:	461e      	mov	r6, r3
 800c2cc:	f101 0c14 	add.w	ip, r1, #20
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	f8dc 3000 	ldr.w	r3, [ip]
 800c2d6:	b299      	uxth	r1, r3
 800c2d8:	fb02 6101 	mla	r1, r2, r1, r6
 800c2dc:	0c1e      	lsrs	r6, r3, #16
 800c2de:	0c0b      	lsrs	r3, r1, #16
 800c2e0:	fb02 3306 	mla	r3, r2, r6, r3
 800c2e4:	b289      	uxth	r1, r1
 800c2e6:	3001      	adds	r0, #1
 800c2e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2ec:	4285      	cmp	r5, r0
 800c2ee:	f84c 1b04 	str.w	r1, [ip], #4
 800c2f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2f6:	dcec      	bgt.n	800c2d2 <__multadd+0x12>
 800c2f8:	b30e      	cbz	r6, 800c33e <__multadd+0x7e>
 800c2fa:	68a3      	ldr	r3, [r4, #8]
 800c2fc:	42ab      	cmp	r3, r5
 800c2fe:	dc19      	bgt.n	800c334 <__multadd+0x74>
 800c300:	6861      	ldr	r1, [r4, #4]
 800c302:	4638      	mov	r0, r7
 800c304:	3101      	adds	r1, #1
 800c306:	f7ff ff79 	bl	800c1fc <_Balloc>
 800c30a:	4680      	mov	r8, r0
 800c30c:	b928      	cbnz	r0, 800c31a <__multadd+0x5a>
 800c30e:	4602      	mov	r2, r0
 800c310:	4b0c      	ldr	r3, [pc, #48]	; (800c344 <__multadd+0x84>)
 800c312:	480d      	ldr	r0, [pc, #52]	; (800c348 <__multadd+0x88>)
 800c314:	21ba      	movs	r1, #186	; 0xba
 800c316:	f001 fd0f 	bl	800dd38 <__assert_func>
 800c31a:	6922      	ldr	r2, [r4, #16]
 800c31c:	3202      	adds	r2, #2
 800c31e:	f104 010c 	add.w	r1, r4, #12
 800c322:	0092      	lsls	r2, r2, #2
 800c324:	300c      	adds	r0, #12
 800c326:	f001 fcef 	bl	800dd08 <memcpy>
 800c32a:	4621      	mov	r1, r4
 800c32c:	4638      	mov	r0, r7
 800c32e:	f7ff ffa5 	bl	800c27c <_Bfree>
 800c332:	4644      	mov	r4, r8
 800c334:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c338:	3501      	adds	r5, #1
 800c33a:	615e      	str	r6, [r3, #20]
 800c33c:	6125      	str	r5, [r4, #16]
 800c33e:	4620      	mov	r0, r4
 800c340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c344:	0800ebc9 	.word	0x0800ebc9
 800c348:	0800ebda 	.word	0x0800ebda

0800c34c <__s2b>:
 800c34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c350:	460c      	mov	r4, r1
 800c352:	4615      	mov	r5, r2
 800c354:	461f      	mov	r7, r3
 800c356:	2209      	movs	r2, #9
 800c358:	3308      	adds	r3, #8
 800c35a:	4606      	mov	r6, r0
 800c35c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c360:	2100      	movs	r1, #0
 800c362:	2201      	movs	r2, #1
 800c364:	429a      	cmp	r2, r3
 800c366:	db09      	blt.n	800c37c <__s2b+0x30>
 800c368:	4630      	mov	r0, r6
 800c36a:	f7ff ff47 	bl	800c1fc <_Balloc>
 800c36e:	b940      	cbnz	r0, 800c382 <__s2b+0x36>
 800c370:	4602      	mov	r2, r0
 800c372:	4b19      	ldr	r3, [pc, #100]	; (800c3d8 <__s2b+0x8c>)
 800c374:	4819      	ldr	r0, [pc, #100]	; (800c3dc <__s2b+0x90>)
 800c376:	21d3      	movs	r1, #211	; 0xd3
 800c378:	f001 fcde 	bl	800dd38 <__assert_func>
 800c37c:	0052      	lsls	r2, r2, #1
 800c37e:	3101      	adds	r1, #1
 800c380:	e7f0      	b.n	800c364 <__s2b+0x18>
 800c382:	9b08      	ldr	r3, [sp, #32]
 800c384:	6143      	str	r3, [r0, #20]
 800c386:	2d09      	cmp	r5, #9
 800c388:	f04f 0301 	mov.w	r3, #1
 800c38c:	6103      	str	r3, [r0, #16]
 800c38e:	dd16      	ble.n	800c3be <__s2b+0x72>
 800c390:	f104 0909 	add.w	r9, r4, #9
 800c394:	46c8      	mov	r8, r9
 800c396:	442c      	add	r4, r5
 800c398:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c39c:	4601      	mov	r1, r0
 800c39e:	3b30      	subs	r3, #48	; 0x30
 800c3a0:	220a      	movs	r2, #10
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	f7ff ff8c 	bl	800c2c0 <__multadd>
 800c3a8:	45a0      	cmp	r8, r4
 800c3aa:	d1f5      	bne.n	800c398 <__s2b+0x4c>
 800c3ac:	f1a5 0408 	sub.w	r4, r5, #8
 800c3b0:	444c      	add	r4, r9
 800c3b2:	1b2d      	subs	r5, r5, r4
 800c3b4:	1963      	adds	r3, r4, r5
 800c3b6:	42bb      	cmp	r3, r7
 800c3b8:	db04      	blt.n	800c3c4 <__s2b+0x78>
 800c3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3be:	340a      	adds	r4, #10
 800c3c0:	2509      	movs	r5, #9
 800c3c2:	e7f6      	b.n	800c3b2 <__s2b+0x66>
 800c3c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c3c8:	4601      	mov	r1, r0
 800c3ca:	3b30      	subs	r3, #48	; 0x30
 800c3cc:	220a      	movs	r2, #10
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f7ff ff76 	bl	800c2c0 <__multadd>
 800c3d4:	e7ee      	b.n	800c3b4 <__s2b+0x68>
 800c3d6:	bf00      	nop
 800c3d8:	0800ebc9 	.word	0x0800ebc9
 800c3dc:	0800ebda 	.word	0x0800ebda

0800c3e0 <__hi0bits>:
 800c3e0:	0c03      	lsrs	r3, r0, #16
 800c3e2:	041b      	lsls	r3, r3, #16
 800c3e4:	b9d3      	cbnz	r3, 800c41c <__hi0bits+0x3c>
 800c3e6:	0400      	lsls	r0, r0, #16
 800c3e8:	2310      	movs	r3, #16
 800c3ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3ee:	bf04      	itt	eq
 800c3f0:	0200      	lsleq	r0, r0, #8
 800c3f2:	3308      	addeq	r3, #8
 800c3f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c3f8:	bf04      	itt	eq
 800c3fa:	0100      	lsleq	r0, r0, #4
 800c3fc:	3304      	addeq	r3, #4
 800c3fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c402:	bf04      	itt	eq
 800c404:	0080      	lsleq	r0, r0, #2
 800c406:	3302      	addeq	r3, #2
 800c408:	2800      	cmp	r0, #0
 800c40a:	db05      	blt.n	800c418 <__hi0bits+0x38>
 800c40c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c410:	f103 0301 	add.w	r3, r3, #1
 800c414:	bf08      	it	eq
 800c416:	2320      	moveq	r3, #32
 800c418:	4618      	mov	r0, r3
 800c41a:	4770      	bx	lr
 800c41c:	2300      	movs	r3, #0
 800c41e:	e7e4      	b.n	800c3ea <__hi0bits+0xa>

0800c420 <__lo0bits>:
 800c420:	6803      	ldr	r3, [r0, #0]
 800c422:	f013 0207 	ands.w	r2, r3, #7
 800c426:	d00c      	beq.n	800c442 <__lo0bits+0x22>
 800c428:	07d9      	lsls	r1, r3, #31
 800c42a:	d422      	bmi.n	800c472 <__lo0bits+0x52>
 800c42c:	079a      	lsls	r2, r3, #30
 800c42e:	bf49      	itett	mi
 800c430:	085b      	lsrmi	r3, r3, #1
 800c432:	089b      	lsrpl	r3, r3, #2
 800c434:	6003      	strmi	r3, [r0, #0]
 800c436:	2201      	movmi	r2, #1
 800c438:	bf5c      	itt	pl
 800c43a:	6003      	strpl	r3, [r0, #0]
 800c43c:	2202      	movpl	r2, #2
 800c43e:	4610      	mov	r0, r2
 800c440:	4770      	bx	lr
 800c442:	b299      	uxth	r1, r3
 800c444:	b909      	cbnz	r1, 800c44a <__lo0bits+0x2a>
 800c446:	0c1b      	lsrs	r3, r3, #16
 800c448:	2210      	movs	r2, #16
 800c44a:	b2d9      	uxtb	r1, r3
 800c44c:	b909      	cbnz	r1, 800c452 <__lo0bits+0x32>
 800c44e:	3208      	adds	r2, #8
 800c450:	0a1b      	lsrs	r3, r3, #8
 800c452:	0719      	lsls	r1, r3, #28
 800c454:	bf04      	itt	eq
 800c456:	091b      	lsreq	r3, r3, #4
 800c458:	3204      	addeq	r2, #4
 800c45a:	0799      	lsls	r1, r3, #30
 800c45c:	bf04      	itt	eq
 800c45e:	089b      	lsreq	r3, r3, #2
 800c460:	3202      	addeq	r2, #2
 800c462:	07d9      	lsls	r1, r3, #31
 800c464:	d403      	bmi.n	800c46e <__lo0bits+0x4e>
 800c466:	085b      	lsrs	r3, r3, #1
 800c468:	f102 0201 	add.w	r2, r2, #1
 800c46c:	d003      	beq.n	800c476 <__lo0bits+0x56>
 800c46e:	6003      	str	r3, [r0, #0]
 800c470:	e7e5      	b.n	800c43e <__lo0bits+0x1e>
 800c472:	2200      	movs	r2, #0
 800c474:	e7e3      	b.n	800c43e <__lo0bits+0x1e>
 800c476:	2220      	movs	r2, #32
 800c478:	e7e1      	b.n	800c43e <__lo0bits+0x1e>
	...

0800c47c <__i2b>:
 800c47c:	b510      	push	{r4, lr}
 800c47e:	460c      	mov	r4, r1
 800c480:	2101      	movs	r1, #1
 800c482:	f7ff febb 	bl	800c1fc <_Balloc>
 800c486:	4602      	mov	r2, r0
 800c488:	b928      	cbnz	r0, 800c496 <__i2b+0x1a>
 800c48a:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <__i2b+0x24>)
 800c48c:	4805      	ldr	r0, [pc, #20]	; (800c4a4 <__i2b+0x28>)
 800c48e:	f240 1145 	movw	r1, #325	; 0x145
 800c492:	f001 fc51 	bl	800dd38 <__assert_func>
 800c496:	2301      	movs	r3, #1
 800c498:	6144      	str	r4, [r0, #20]
 800c49a:	6103      	str	r3, [r0, #16]
 800c49c:	bd10      	pop	{r4, pc}
 800c49e:	bf00      	nop
 800c4a0:	0800ebc9 	.word	0x0800ebc9
 800c4a4:	0800ebda 	.word	0x0800ebda

0800c4a8 <__multiply>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	4691      	mov	r9, r2
 800c4ae:	690a      	ldr	r2, [r1, #16]
 800c4b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	bfb8      	it	lt
 800c4b8:	460b      	movlt	r3, r1
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	bfbc      	itt	lt
 800c4be:	464c      	movlt	r4, r9
 800c4c0:	4699      	movlt	r9, r3
 800c4c2:	6927      	ldr	r7, [r4, #16]
 800c4c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4c8:	68a3      	ldr	r3, [r4, #8]
 800c4ca:	6861      	ldr	r1, [r4, #4]
 800c4cc:	eb07 060a 	add.w	r6, r7, sl
 800c4d0:	42b3      	cmp	r3, r6
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	bfb8      	it	lt
 800c4d6:	3101      	addlt	r1, #1
 800c4d8:	f7ff fe90 	bl	800c1fc <_Balloc>
 800c4dc:	b930      	cbnz	r0, 800c4ec <__multiply+0x44>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	4b44      	ldr	r3, [pc, #272]	; (800c5f4 <__multiply+0x14c>)
 800c4e2:	4845      	ldr	r0, [pc, #276]	; (800c5f8 <__multiply+0x150>)
 800c4e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c4e8:	f001 fc26 	bl	800dd38 <__assert_func>
 800c4ec:	f100 0514 	add.w	r5, r0, #20
 800c4f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4f4:	462b      	mov	r3, r5
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	4543      	cmp	r3, r8
 800c4fa:	d321      	bcc.n	800c540 <__multiply+0x98>
 800c4fc:	f104 0314 	add.w	r3, r4, #20
 800c500:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c504:	f109 0314 	add.w	r3, r9, #20
 800c508:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c50c:	9202      	str	r2, [sp, #8]
 800c50e:	1b3a      	subs	r2, r7, r4
 800c510:	3a15      	subs	r2, #21
 800c512:	f022 0203 	bic.w	r2, r2, #3
 800c516:	3204      	adds	r2, #4
 800c518:	f104 0115 	add.w	r1, r4, #21
 800c51c:	428f      	cmp	r7, r1
 800c51e:	bf38      	it	cc
 800c520:	2204      	movcc	r2, #4
 800c522:	9201      	str	r2, [sp, #4]
 800c524:	9a02      	ldr	r2, [sp, #8]
 800c526:	9303      	str	r3, [sp, #12]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d80c      	bhi.n	800c546 <__multiply+0x9e>
 800c52c:	2e00      	cmp	r6, #0
 800c52e:	dd03      	ble.n	800c538 <__multiply+0x90>
 800c530:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c534:	2b00      	cmp	r3, #0
 800c536:	d05b      	beq.n	800c5f0 <__multiply+0x148>
 800c538:	6106      	str	r6, [r0, #16]
 800c53a:	b005      	add	sp, #20
 800c53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c540:	f843 2b04 	str.w	r2, [r3], #4
 800c544:	e7d8      	b.n	800c4f8 <__multiply+0x50>
 800c546:	f8b3 a000 	ldrh.w	sl, [r3]
 800c54a:	f1ba 0f00 	cmp.w	sl, #0
 800c54e:	d024      	beq.n	800c59a <__multiply+0xf2>
 800c550:	f104 0e14 	add.w	lr, r4, #20
 800c554:	46a9      	mov	r9, r5
 800c556:	f04f 0c00 	mov.w	ip, #0
 800c55a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c55e:	f8d9 1000 	ldr.w	r1, [r9]
 800c562:	fa1f fb82 	uxth.w	fp, r2
 800c566:	b289      	uxth	r1, r1
 800c568:	fb0a 110b 	mla	r1, sl, fp, r1
 800c56c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c570:	f8d9 2000 	ldr.w	r2, [r9]
 800c574:	4461      	add	r1, ip
 800c576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c57a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c57e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c582:	b289      	uxth	r1, r1
 800c584:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c588:	4577      	cmp	r7, lr
 800c58a:	f849 1b04 	str.w	r1, [r9], #4
 800c58e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c592:	d8e2      	bhi.n	800c55a <__multiply+0xb2>
 800c594:	9a01      	ldr	r2, [sp, #4]
 800c596:	f845 c002 	str.w	ip, [r5, r2]
 800c59a:	9a03      	ldr	r2, [sp, #12]
 800c59c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	f1b9 0f00 	cmp.w	r9, #0
 800c5a6:	d021      	beq.n	800c5ec <__multiply+0x144>
 800c5a8:	6829      	ldr	r1, [r5, #0]
 800c5aa:	f104 0c14 	add.w	ip, r4, #20
 800c5ae:	46ae      	mov	lr, r5
 800c5b0:	f04f 0a00 	mov.w	sl, #0
 800c5b4:	f8bc b000 	ldrh.w	fp, [ip]
 800c5b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c5bc:	fb09 220b 	mla	r2, r9, fp, r2
 800c5c0:	4452      	add	r2, sl
 800c5c2:	b289      	uxth	r1, r1
 800c5c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c5c8:	f84e 1b04 	str.w	r1, [lr], #4
 800c5cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c5d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5d4:	f8be 1000 	ldrh.w	r1, [lr]
 800c5d8:	fb09 110a 	mla	r1, r9, sl, r1
 800c5dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c5e0:	4567      	cmp	r7, ip
 800c5e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5e6:	d8e5      	bhi.n	800c5b4 <__multiply+0x10c>
 800c5e8:	9a01      	ldr	r2, [sp, #4]
 800c5ea:	50a9      	str	r1, [r5, r2]
 800c5ec:	3504      	adds	r5, #4
 800c5ee:	e799      	b.n	800c524 <__multiply+0x7c>
 800c5f0:	3e01      	subs	r6, #1
 800c5f2:	e79b      	b.n	800c52c <__multiply+0x84>
 800c5f4:	0800ebc9 	.word	0x0800ebc9
 800c5f8:	0800ebda 	.word	0x0800ebda

0800c5fc <__pow5mult>:
 800c5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c600:	4615      	mov	r5, r2
 800c602:	f012 0203 	ands.w	r2, r2, #3
 800c606:	4606      	mov	r6, r0
 800c608:	460f      	mov	r7, r1
 800c60a:	d007      	beq.n	800c61c <__pow5mult+0x20>
 800c60c:	4c25      	ldr	r4, [pc, #148]	; (800c6a4 <__pow5mult+0xa8>)
 800c60e:	3a01      	subs	r2, #1
 800c610:	2300      	movs	r3, #0
 800c612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c616:	f7ff fe53 	bl	800c2c0 <__multadd>
 800c61a:	4607      	mov	r7, r0
 800c61c:	10ad      	asrs	r5, r5, #2
 800c61e:	d03d      	beq.n	800c69c <__pow5mult+0xa0>
 800c620:	69f4      	ldr	r4, [r6, #28]
 800c622:	b97c      	cbnz	r4, 800c644 <__pow5mult+0x48>
 800c624:	2010      	movs	r0, #16
 800c626:	f7ff fd35 	bl	800c094 <malloc>
 800c62a:	4602      	mov	r2, r0
 800c62c:	61f0      	str	r0, [r6, #28]
 800c62e:	b928      	cbnz	r0, 800c63c <__pow5mult+0x40>
 800c630:	4b1d      	ldr	r3, [pc, #116]	; (800c6a8 <__pow5mult+0xac>)
 800c632:	481e      	ldr	r0, [pc, #120]	; (800c6ac <__pow5mult+0xb0>)
 800c634:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c638:	f001 fb7e 	bl	800dd38 <__assert_func>
 800c63c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c640:	6004      	str	r4, [r0, #0]
 800c642:	60c4      	str	r4, [r0, #12]
 800c644:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c64c:	b94c      	cbnz	r4, 800c662 <__pow5mult+0x66>
 800c64e:	f240 2171 	movw	r1, #625	; 0x271
 800c652:	4630      	mov	r0, r6
 800c654:	f7ff ff12 	bl	800c47c <__i2b>
 800c658:	2300      	movs	r3, #0
 800c65a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c65e:	4604      	mov	r4, r0
 800c660:	6003      	str	r3, [r0, #0]
 800c662:	f04f 0900 	mov.w	r9, #0
 800c666:	07eb      	lsls	r3, r5, #31
 800c668:	d50a      	bpl.n	800c680 <__pow5mult+0x84>
 800c66a:	4639      	mov	r1, r7
 800c66c:	4622      	mov	r2, r4
 800c66e:	4630      	mov	r0, r6
 800c670:	f7ff ff1a 	bl	800c4a8 <__multiply>
 800c674:	4639      	mov	r1, r7
 800c676:	4680      	mov	r8, r0
 800c678:	4630      	mov	r0, r6
 800c67a:	f7ff fdff 	bl	800c27c <_Bfree>
 800c67e:	4647      	mov	r7, r8
 800c680:	106d      	asrs	r5, r5, #1
 800c682:	d00b      	beq.n	800c69c <__pow5mult+0xa0>
 800c684:	6820      	ldr	r0, [r4, #0]
 800c686:	b938      	cbnz	r0, 800c698 <__pow5mult+0x9c>
 800c688:	4622      	mov	r2, r4
 800c68a:	4621      	mov	r1, r4
 800c68c:	4630      	mov	r0, r6
 800c68e:	f7ff ff0b 	bl	800c4a8 <__multiply>
 800c692:	6020      	str	r0, [r4, #0]
 800c694:	f8c0 9000 	str.w	r9, [r0]
 800c698:	4604      	mov	r4, r0
 800c69a:	e7e4      	b.n	800c666 <__pow5mult+0x6a>
 800c69c:	4638      	mov	r0, r7
 800c69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6a2:	bf00      	nop
 800c6a4:	0800ed28 	.word	0x0800ed28
 800c6a8:	0800eb5a 	.word	0x0800eb5a
 800c6ac:	0800ebda 	.word	0x0800ebda

0800c6b0 <__lshift>:
 800c6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b4:	460c      	mov	r4, r1
 800c6b6:	6849      	ldr	r1, [r1, #4]
 800c6b8:	6923      	ldr	r3, [r4, #16]
 800c6ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6be:	68a3      	ldr	r3, [r4, #8]
 800c6c0:	4607      	mov	r7, r0
 800c6c2:	4691      	mov	r9, r2
 800c6c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6c8:	f108 0601 	add.w	r6, r8, #1
 800c6cc:	42b3      	cmp	r3, r6
 800c6ce:	db0b      	blt.n	800c6e8 <__lshift+0x38>
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f7ff fd93 	bl	800c1fc <_Balloc>
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	b948      	cbnz	r0, 800c6ee <__lshift+0x3e>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	4b28      	ldr	r3, [pc, #160]	; (800c780 <__lshift+0xd0>)
 800c6de:	4829      	ldr	r0, [pc, #164]	; (800c784 <__lshift+0xd4>)
 800c6e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c6e4:	f001 fb28 	bl	800dd38 <__assert_func>
 800c6e8:	3101      	adds	r1, #1
 800c6ea:	005b      	lsls	r3, r3, #1
 800c6ec:	e7ee      	b.n	800c6cc <__lshift+0x1c>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	f100 0114 	add.w	r1, r0, #20
 800c6f4:	f100 0210 	add.w	r2, r0, #16
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	4553      	cmp	r3, sl
 800c6fc:	db33      	blt.n	800c766 <__lshift+0xb6>
 800c6fe:	6920      	ldr	r0, [r4, #16]
 800c700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c704:	f104 0314 	add.w	r3, r4, #20
 800c708:	f019 091f 	ands.w	r9, r9, #31
 800c70c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c710:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c714:	d02b      	beq.n	800c76e <__lshift+0xbe>
 800c716:	f1c9 0e20 	rsb	lr, r9, #32
 800c71a:	468a      	mov	sl, r1
 800c71c:	2200      	movs	r2, #0
 800c71e:	6818      	ldr	r0, [r3, #0]
 800c720:	fa00 f009 	lsl.w	r0, r0, r9
 800c724:	4310      	orrs	r0, r2
 800c726:	f84a 0b04 	str.w	r0, [sl], #4
 800c72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c72e:	459c      	cmp	ip, r3
 800c730:	fa22 f20e 	lsr.w	r2, r2, lr
 800c734:	d8f3      	bhi.n	800c71e <__lshift+0x6e>
 800c736:	ebac 0304 	sub.w	r3, ip, r4
 800c73a:	3b15      	subs	r3, #21
 800c73c:	f023 0303 	bic.w	r3, r3, #3
 800c740:	3304      	adds	r3, #4
 800c742:	f104 0015 	add.w	r0, r4, #21
 800c746:	4584      	cmp	ip, r0
 800c748:	bf38      	it	cc
 800c74a:	2304      	movcc	r3, #4
 800c74c:	50ca      	str	r2, [r1, r3]
 800c74e:	b10a      	cbz	r2, 800c754 <__lshift+0xa4>
 800c750:	f108 0602 	add.w	r6, r8, #2
 800c754:	3e01      	subs	r6, #1
 800c756:	4638      	mov	r0, r7
 800c758:	612e      	str	r6, [r5, #16]
 800c75a:	4621      	mov	r1, r4
 800c75c:	f7ff fd8e 	bl	800c27c <_Bfree>
 800c760:	4628      	mov	r0, r5
 800c762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c766:	f842 0f04 	str.w	r0, [r2, #4]!
 800c76a:	3301      	adds	r3, #1
 800c76c:	e7c5      	b.n	800c6fa <__lshift+0x4a>
 800c76e:	3904      	subs	r1, #4
 800c770:	f853 2b04 	ldr.w	r2, [r3], #4
 800c774:	f841 2f04 	str.w	r2, [r1, #4]!
 800c778:	459c      	cmp	ip, r3
 800c77a:	d8f9      	bhi.n	800c770 <__lshift+0xc0>
 800c77c:	e7ea      	b.n	800c754 <__lshift+0xa4>
 800c77e:	bf00      	nop
 800c780:	0800ebc9 	.word	0x0800ebc9
 800c784:	0800ebda 	.word	0x0800ebda

0800c788 <__mcmp>:
 800c788:	b530      	push	{r4, r5, lr}
 800c78a:	6902      	ldr	r2, [r0, #16]
 800c78c:	690c      	ldr	r4, [r1, #16]
 800c78e:	1b12      	subs	r2, r2, r4
 800c790:	d10e      	bne.n	800c7b0 <__mcmp+0x28>
 800c792:	f100 0314 	add.w	r3, r0, #20
 800c796:	3114      	adds	r1, #20
 800c798:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c79c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c7a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c7a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c7a8:	42a5      	cmp	r5, r4
 800c7aa:	d003      	beq.n	800c7b4 <__mcmp+0x2c>
 800c7ac:	d305      	bcc.n	800c7ba <__mcmp+0x32>
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	4610      	mov	r0, r2
 800c7b2:	bd30      	pop	{r4, r5, pc}
 800c7b4:	4283      	cmp	r3, r0
 800c7b6:	d3f3      	bcc.n	800c7a0 <__mcmp+0x18>
 800c7b8:	e7fa      	b.n	800c7b0 <__mcmp+0x28>
 800c7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c7be:	e7f7      	b.n	800c7b0 <__mcmp+0x28>

0800c7c0 <__mdiff>:
 800c7c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c4:	460c      	mov	r4, r1
 800c7c6:	4606      	mov	r6, r0
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	4690      	mov	r8, r2
 800c7ce:	f7ff ffdb 	bl	800c788 <__mcmp>
 800c7d2:	1e05      	subs	r5, r0, #0
 800c7d4:	d110      	bne.n	800c7f8 <__mdiff+0x38>
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	4630      	mov	r0, r6
 800c7da:	f7ff fd0f 	bl	800c1fc <_Balloc>
 800c7de:	b930      	cbnz	r0, 800c7ee <__mdiff+0x2e>
 800c7e0:	4b3a      	ldr	r3, [pc, #232]	; (800c8cc <__mdiff+0x10c>)
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	f240 2137 	movw	r1, #567	; 0x237
 800c7e8:	4839      	ldr	r0, [pc, #228]	; (800c8d0 <__mdiff+0x110>)
 800c7ea:	f001 faa5 	bl	800dd38 <__assert_func>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f8:	bfa4      	itt	ge
 800c7fa:	4643      	movge	r3, r8
 800c7fc:	46a0      	movge	r8, r4
 800c7fe:	4630      	mov	r0, r6
 800c800:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c804:	bfa6      	itte	ge
 800c806:	461c      	movge	r4, r3
 800c808:	2500      	movge	r5, #0
 800c80a:	2501      	movlt	r5, #1
 800c80c:	f7ff fcf6 	bl	800c1fc <_Balloc>
 800c810:	b920      	cbnz	r0, 800c81c <__mdiff+0x5c>
 800c812:	4b2e      	ldr	r3, [pc, #184]	; (800c8cc <__mdiff+0x10c>)
 800c814:	4602      	mov	r2, r0
 800c816:	f240 2145 	movw	r1, #581	; 0x245
 800c81a:	e7e5      	b.n	800c7e8 <__mdiff+0x28>
 800c81c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c820:	6926      	ldr	r6, [r4, #16]
 800c822:	60c5      	str	r5, [r0, #12]
 800c824:	f104 0914 	add.w	r9, r4, #20
 800c828:	f108 0514 	add.w	r5, r8, #20
 800c82c:	f100 0e14 	add.w	lr, r0, #20
 800c830:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c834:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c838:	f108 0210 	add.w	r2, r8, #16
 800c83c:	46f2      	mov	sl, lr
 800c83e:	2100      	movs	r1, #0
 800c840:	f859 3b04 	ldr.w	r3, [r9], #4
 800c844:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c848:	fa11 f88b 	uxtah	r8, r1, fp
 800c84c:	b299      	uxth	r1, r3
 800c84e:	0c1b      	lsrs	r3, r3, #16
 800c850:	eba8 0801 	sub.w	r8, r8, r1
 800c854:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c858:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c85c:	fa1f f888 	uxth.w	r8, r8
 800c860:	1419      	asrs	r1, r3, #16
 800c862:	454e      	cmp	r6, r9
 800c864:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c868:	f84a 3b04 	str.w	r3, [sl], #4
 800c86c:	d8e8      	bhi.n	800c840 <__mdiff+0x80>
 800c86e:	1b33      	subs	r3, r6, r4
 800c870:	3b15      	subs	r3, #21
 800c872:	f023 0303 	bic.w	r3, r3, #3
 800c876:	3304      	adds	r3, #4
 800c878:	3415      	adds	r4, #21
 800c87a:	42a6      	cmp	r6, r4
 800c87c:	bf38      	it	cc
 800c87e:	2304      	movcc	r3, #4
 800c880:	441d      	add	r5, r3
 800c882:	4473      	add	r3, lr
 800c884:	469e      	mov	lr, r3
 800c886:	462e      	mov	r6, r5
 800c888:	4566      	cmp	r6, ip
 800c88a:	d30e      	bcc.n	800c8aa <__mdiff+0xea>
 800c88c:	f10c 0203 	add.w	r2, ip, #3
 800c890:	1b52      	subs	r2, r2, r5
 800c892:	f022 0203 	bic.w	r2, r2, #3
 800c896:	3d03      	subs	r5, #3
 800c898:	45ac      	cmp	ip, r5
 800c89a:	bf38      	it	cc
 800c89c:	2200      	movcc	r2, #0
 800c89e:	4413      	add	r3, r2
 800c8a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c8a4:	b17a      	cbz	r2, 800c8c6 <__mdiff+0x106>
 800c8a6:	6107      	str	r7, [r0, #16]
 800c8a8:	e7a4      	b.n	800c7f4 <__mdiff+0x34>
 800c8aa:	f856 8b04 	ldr.w	r8, [r6], #4
 800c8ae:	fa11 f288 	uxtah	r2, r1, r8
 800c8b2:	1414      	asrs	r4, r2, #16
 800c8b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c8b8:	b292      	uxth	r2, r2
 800c8ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c8be:	f84e 2b04 	str.w	r2, [lr], #4
 800c8c2:	1421      	asrs	r1, r4, #16
 800c8c4:	e7e0      	b.n	800c888 <__mdiff+0xc8>
 800c8c6:	3f01      	subs	r7, #1
 800c8c8:	e7ea      	b.n	800c8a0 <__mdiff+0xe0>
 800c8ca:	bf00      	nop
 800c8cc:	0800ebc9 	.word	0x0800ebc9
 800c8d0:	0800ebda 	.word	0x0800ebda

0800c8d4 <__ulp>:
 800c8d4:	b082      	sub	sp, #8
 800c8d6:	ed8d 0b00 	vstr	d0, [sp]
 800c8da:	9a01      	ldr	r2, [sp, #4]
 800c8dc:	4b0f      	ldr	r3, [pc, #60]	; (800c91c <__ulp+0x48>)
 800c8de:	4013      	ands	r3, r2
 800c8e0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	dc08      	bgt.n	800c8fa <__ulp+0x26>
 800c8e8:	425b      	negs	r3, r3
 800c8ea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c8ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c8f2:	da04      	bge.n	800c8fe <__ulp+0x2a>
 800c8f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c8f8:	4113      	asrs	r3, r2
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	e008      	b.n	800c910 <__ulp+0x3c>
 800c8fe:	f1a2 0314 	sub.w	r3, r2, #20
 800c902:	2b1e      	cmp	r3, #30
 800c904:	bfda      	itte	le
 800c906:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c90a:	40da      	lsrle	r2, r3
 800c90c:	2201      	movgt	r2, #1
 800c90e:	2300      	movs	r3, #0
 800c910:	4619      	mov	r1, r3
 800c912:	4610      	mov	r0, r2
 800c914:	ec41 0b10 	vmov	d0, r0, r1
 800c918:	b002      	add	sp, #8
 800c91a:	4770      	bx	lr
 800c91c:	7ff00000 	.word	0x7ff00000

0800c920 <__b2d>:
 800c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c924:	6906      	ldr	r6, [r0, #16]
 800c926:	f100 0814 	add.w	r8, r0, #20
 800c92a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c92e:	1f37      	subs	r7, r6, #4
 800c930:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c934:	4610      	mov	r0, r2
 800c936:	f7ff fd53 	bl	800c3e0 <__hi0bits>
 800c93a:	f1c0 0320 	rsb	r3, r0, #32
 800c93e:	280a      	cmp	r0, #10
 800c940:	600b      	str	r3, [r1, #0]
 800c942:	491b      	ldr	r1, [pc, #108]	; (800c9b0 <__b2d+0x90>)
 800c944:	dc15      	bgt.n	800c972 <__b2d+0x52>
 800c946:	f1c0 0c0b 	rsb	ip, r0, #11
 800c94a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c94e:	45b8      	cmp	r8, r7
 800c950:	ea43 0501 	orr.w	r5, r3, r1
 800c954:	bf34      	ite	cc
 800c956:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c95a:	2300      	movcs	r3, #0
 800c95c:	3015      	adds	r0, #21
 800c95e:	fa02 f000 	lsl.w	r0, r2, r0
 800c962:	fa23 f30c 	lsr.w	r3, r3, ip
 800c966:	4303      	orrs	r3, r0
 800c968:	461c      	mov	r4, r3
 800c96a:	ec45 4b10 	vmov	d0, r4, r5
 800c96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c972:	45b8      	cmp	r8, r7
 800c974:	bf3a      	itte	cc
 800c976:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c97a:	f1a6 0708 	subcc.w	r7, r6, #8
 800c97e:	2300      	movcs	r3, #0
 800c980:	380b      	subs	r0, #11
 800c982:	d012      	beq.n	800c9aa <__b2d+0x8a>
 800c984:	f1c0 0120 	rsb	r1, r0, #32
 800c988:	fa23 f401 	lsr.w	r4, r3, r1
 800c98c:	4082      	lsls	r2, r0
 800c98e:	4322      	orrs	r2, r4
 800c990:	4547      	cmp	r7, r8
 800c992:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c996:	bf8c      	ite	hi
 800c998:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c99c:	2200      	movls	r2, #0
 800c99e:	4083      	lsls	r3, r0
 800c9a0:	40ca      	lsrs	r2, r1
 800c9a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	e7de      	b.n	800c968 <__b2d+0x48>
 800c9aa:	ea42 0501 	orr.w	r5, r2, r1
 800c9ae:	e7db      	b.n	800c968 <__b2d+0x48>
 800c9b0:	3ff00000 	.word	0x3ff00000

0800c9b4 <__d2b>:
 800c9b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9b8:	460f      	mov	r7, r1
 800c9ba:	2101      	movs	r1, #1
 800c9bc:	ec59 8b10 	vmov	r8, r9, d0
 800c9c0:	4616      	mov	r6, r2
 800c9c2:	f7ff fc1b 	bl	800c1fc <_Balloc>
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	b930      	cbnz	r0, 800c9d8 <__d2b+0x24>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	4b24      	ldr	r3, [pc, #144]	; (800ca60 <__d2b+0xac>)
 800c9ce:	4825      	ldr	r0, [pc, #148]	; (800ca64 <__d2b+0xb0>)
 800c9d0:	f240 310f 	movw	r1, #783	; 0x30f
 800c9d4:	f001 f9b0 	bl	800dd38 <__assert_func>
 800c9d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9e0:	bb2d      	cbnz	r5, 800ca2e <__d2b+0x7a>
 800c9e2:	9301      	str	r3, [sp, #4]
 800c9e4:	f1b8 0300 	subs.w	r3, r8, #0
 800c9e8:	d026      	beq.n	800ca38 <__d2b+0x84>
 800c9ea:	4668      	mov	r0, sp
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	f7ff fd17 	bl	800c420 <__lo0bits>
 800c9f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c9f6:	b1e8      	cbz	r0, 800ca34 <__d2b+0x80>
 800c9f8:	f1c0 0320 	rsb	r3, r0, #32
 800c9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800ca00:	430b      	orrs	r3, r1
 800ca02:	40c2      	lsrs	r2, r0
 800ca04:	6163      	str	r3, [r4, #20]
 800ca06:	9201      	str	r2, [sp, #4]
 800ca08:	9b01      	ldr	r3, [sp, #4]
 800ca0a:	61a3      	str	r3, [r4, #24]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	bf14      	ite	ne
 800ca10:	2202      	movne	r2, #2
 800ca12:	2201      	moveq	r2, #1
 800ca14:	6122      	str	r2, [r4, #16]
 800ca16:	b1bd      	cbz	r5, 800ca48 <__d2b+0x94>
 800ca18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca1c:	4405      	add	r5, r0
 800ca1e:	603d      	str	r5, [r7, #0]
 800ca20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca24:	6030      	str	r0, [r6, #0]
 800ca26:	4620      	mov	r0, r4
 800ca28:	b003      	add	sp, #12
 800ca2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca32:	e7d6      	b.n	800c9e2 <__d2b+0x2e>
 800ca34:	6161      	str	r1, [r4, #20]
 800ca36:	e7e7      	b.n	800ca08 <__d2b+0x54>
 800ca38:	a801      	add	r0, sp, #4
 800ca3a:	f7ff fcf1 	bl	800c420 <__lo0bits>
 800ca3e:	9b01      	ldr	r3, [sp, #4]
 800ca40:	6163      	str	r3, [r4, #20]
 800ca42:	3020      	adds	r0, #32
 800ca44:	2201      	movs	r2, #1
 800ca46:	e7e5      	b.n	800ca14 <__d2b+0x60>
 800ca48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca50:	6038      	str	r0, [r7, #0]
 800ca52:	6918      	ldr	r0, [r3, #16]
 800ca54:	f7ff fcc4 	bl	800c3e0 <__hi0bits>
 800ca58:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca5c:	e7e2      	b.n	800ca24 <__d2b+0x70>
 800ca5e:	bf00      	nop
 800ca60:	0800ebc9 	.word	0x0800ebc9
 800ca64:	0800ebda 	.word	0x0800ebda

0800ca68 <__ratio>:
 800ca68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6c:	4688      	mov	r8, r1
 800ca6e:	4669      	mov	r1, sp
 800ca70:	4681      	mov	r9, r0
 800ca72:	f7ff ff55 	bl	800c920 <__b2d>
 800ca76:	a901      	add	r1, sp, #4
 800ca78:	4640      	mov	r0, r8
 800ca7a:	ec55 4b10 	vmov	r4, r5, d0
 800ca7e:	f7ff ff4f 	bl	800c920 <__b2d>
 800ca82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ca8a:	eba3 0c02 	sub.w	ip, r3, r2
 800ca8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ca92:	1a9b      	subs	r3, r3, r2
 800ca94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ca98:	ec51 0b10 	vmov	r0, r1, d0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	bfd6      	itet	le
 800caa0:	460a      	movle	r2, r1
 800caa2:	462a      	movgt	r2, r5
 800caa4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800caa8:	468b      	mov	fp, r1
 800caaa:	462f      	mov	r7, r5
 800caac:	bfd4      	ite	le
 800caae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cab2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cab6:	4620      	mov	r0, r4
 800cab8:	ee10 2a10 	vmov	r2, s0
 800cabc:	465b      	mov	r3, fp
 800cabe:	4639      	mov	r1, r7
 800cac0:	f7f3 fee4 	bl	800088c <__aeabi_ddiv>
 800cac4:	ec41 0b10 	vmov	d0, r0, r1
 800cac8:	b003      	add	sp, #12
 800caca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cace <__copybits>:
 800cace:	3901      	subs	r1, #1
 800cad0:	b570      	push	{r4, r5, r6, lr}
 800cad2:	1149      	asrs	r1, r1, #5
 800cad4:	6914      	ldr	r4, [r2, #16]
 800cad6:	3101      	adds	r1, #1
 800cad8:	f102 0314 	add.w	r3, r2, #20
 800cadc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cae0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cae4:	1f05      	subs	r5, r0, #4
 800cae6:	42a3      	cmp	r3, r4
 800cae8:	d30c      	bcc.n	800cb04 <__copybits+0x36>
 800caea:	1aa3      	subs	r3, r4, r2
 800caec:	3b11      	subs	r3, #17
 800caee:	f023 0303 	bic.w	r3, r3, #3
 800caf2:	3211      	adds	r2, #17
 800caf4:	42a2      	cmp	r2, r4
 800caf6:	bf88      	it	hi
 800caf8:	2300      	movhi	r3, #0
 800cafa:	4418      	add	r0, r3
 800cafc:	2300      	movs	r3, #0
 800cafe:	4288      	cmp	r0, r1
 800cb00:	d305      	bcc.n	800cb0e <__copybits+0x40>
 800cb02:	bd70      	pop	{r4, r5, r6, pc}
 800cb04:	f853 6b04 	ldr.w	r6, [r3], #4
 800cb08:	f845 6f04 	str.w	r6, [r5, #4]!
 800cb0c:	e7eb      	b.n	800cae6 <__copybits+0x18>
 800cb0e:	f840 3b04 	str.w	r3, [r0], #4
 800cb12:	e7f4      	b.n	800cafe <__copybits+0x30>

0800cb14 <__any_on>:
 800cb14:	f100 0214 	add.w	r2, r0, #20
 800cb18:	6900      	ldr	r0, [r0, #16]
 800cb1a:	114b      	asrs	r3, r1, #5
 800cb1c:	4298      	cmp	r0, r3
 800cb1e:	b510      	push	{r4, lr}
 800cb20:	db11      	blt.n	800cb46 <__any_on+0x32>
 800cb22:	dd0a      	ble.n	800cb3a <__any_on+0x26>
 800cb24:	f011 011f 	ands.w	r1, r1, #31
 800cb28:	d007      	beq.n	800cb3a <__any_on+0x26>
 800cb2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb2e:	fa24 f001 	lsr.w	r0, r4, r1
 800cb32:	fa00 f101 	lsl.w	r1, r0, r1
 800cb36:	428c      	cmp	r4, r1
 800cb38:	d10b      	bne.n	800cb52 <__any_on+0x3e>
 800cb3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d803      	bhi.n	800cb4a <__any_on+0x36>
 800cb42:	2000      	movs	r0, #0
 800cb44:	bd10      	pop	{r4, pc}
 800cb46:	4603      	mov	r3, r0
 800cb48:	e7f7      	b.n	800cb3a <__any_on+0x26>
 800cb4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb4e:	2900      	cmp	r1, #0
 800cb50:	d0f5      	beq.n	800cb3e <__any_on+0x2a>
 800cb52:	2001      	movs	r0, #1
 800cb54:	e7f6      	b.n	800cb44 <__any_on+0x30>

0800cb56 <sulp>:
 800cb56:	b570      	push	{r4, r5, r6, lr}
 800cb58:	4604      	mov	r4, r0
 800cb5a:	460d      	mov	r5, r1
 800cb5c:	ec45 4b10 	vmov	d0, r4, r5
 800cb60:	4616      	mov	r6, r2
 800cb62:	f7ff feb7 	bl	800c8d4 <__ulp>
 800cb66:	ec51 0b10 	vmov	r0, r1, d0
 800cb6a:	b17e      	cbz	r6, 800cb8c <sulp+0x36>
 800cb6c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cb70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	dd09      	ble.n	800cb8c <sulp+0x36>
 800cb78:	051b      	lsls	r3, r3, #20
 800cb7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cb7e:	2400      	movs	r4, #0
 800cb80:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cb84:	4622      	mov	r2, r4
 800cb86:	462b      	mov	r3, r5
 800cb88:	f7f3 fd56 	bl	8000638 <__aeabi_dmul>
 800cb8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb90 <_strtod_l>:
 800cb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb94:	ed2d 8b02 	vpush	{d8}
 800cb98:	b09b      	sub	sp, #108	; 0x6c
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	9213      	str	r2, [sp, #76]	; 0x4c
 800cb9e:	2200      	movs	r2, #0
 800cba0:	9216      	str	r2, [sp, #88]	; 0x58
 800cba2:	460d      	mov	r5, r1
 800cba4:	f04f 0800 	mov.w	r8, #0
 800cba8:	f04f 0900 	mov.w	r9, #0
 800cbac:	460a      	mov	r2, r1
 800cbae:	9215      	str	r2, [sp, #84]	; 0x54
 800cbb0:	7811      	ldrb	r1, [r2, #0]
 800cbb2:	292b      	cmp	r1, #43	; 0x2b
 800cbb4:	d04c      	beq.n	800cc50 <_strtod_l+0xc0>
 800cbb6:	d83a      	bhi.n	800cc2e <_strtod_l+0x9e>
 800cbb8:	290d      	cmp	r1, #13
 800cbba:	d834      	bhi.n	800cc26 <_strtod_l+0x96>
 800cbbc:	2908      	cmp	r1, #8
 800cbbe:	d834      	bhi.n	800cc2a <_strtod_l+0x9a>
 800cbc0:	2900      	cmp	r1, #0
 800cbc2:	d03d      	beq.n	800cc40 <_strtod_l+0xb0>
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	920a      	str	r2, [sp, #40]	; 0x28
 800cbc8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800cbca:	7832      	ldrb	r2, [r6, #0]
 800cbcc:	2a30      	cmp	r2, #48	; 0x30
 800cbce:	f040 80b4 	bne.w	800cd3a <_strtod_l+0x1aa>
 800cbd2:	7872      	ldrb	r2, [r6, #1]
 800cbd4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800cbd8:	2a58      	cmp	r2, #88	; 0x58
 800cbda:	d170      	bne.n	800ccbe <_strtod_l+0x12e>
 800cbdc:	9302      	str	r3, [sp, #8]
 800cbde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbe0:	9301      	str	r3, [sp, #4]
 800cbe2:	ab16      	add	r3, sp, #88	; 0x58
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	4a8e      	ldr	r2, [pc, #568]	; (800ce20 <_strtod_l+0x290>)
 800cbe8:	ab17      	add	r3, sp, #92	; 0x5c
 800cbea:	a915      	add	r1, sp, #84	; 0x54
 800cbec:	4620      	mov	r0, r4
 800cbee:	f001 f93f 	bl	800de70 <__gethex>
 800cbf2:	f010 070f 	ands.w	r7, r0, #15
 800cbf6:	4605      	mov	r5, r0
 800cbf8:	d005      	beq.n	800cc06 <_strtod_l+0x76>
 800cbfa:	2f06      	cmp	r7, #6
 800cbfc:	d12a      	bne.n	800cc54 <_strtod_l+0xc4>
 800cbfe:	3601      	adds	r6, #1
 800cc00:	2300      	movs	r3, #0
 800cc02:	9615      	str	r6, [sp, #84]	; 0x54
 800cc04:	930a      	str	r3, [sp, #40]	; 0x28
 800cc06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f040 857f 	bne.w	800d70c <_strtod_l+0xb7c>
 800cc0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc10:	b1db      	cbz	r3, 800cc4a <_strtod_l+0xba>
 800cc12:	4642      	mov	r2, r8
 800cc14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cc18:	ec43 2b10 	vmov	d0, r2, r3
 800cc1c:	b01b      	add	sp, #108	; 0x6c
 800cc1e:	ecbd 8b02 	vpop	{d8}
 800cc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc26:	2920      	cmp	r1, #32
 800cc28:	d1cc      	bne.n	800cbc4 <_strtod_l+0x34>
 800cc2a:	3201      	adds	r2, #1
 800cc2c:	e7bf      	b.n	800cbae <_strtod_l+0x1e>
 800cc2e:	292d      	cmp	r1, #45	; 0x2d
 800cc30:	d1c8      	bne.n	800cbc4 <_strtod_l+0x34>
 800cc32:	2101      	movs	r1, #1
 800cc34:	910a      	str	r1, [sp, #40]	; 0x28
 800cc36:	1c51      	adds	r1, r2, #1
 800cc38:	9115      	str	r1, [sp, #84]	; 0x54
 800cc3a:	7852      	ldrb	r2, [r2, #1]
 800cc3c:	2a00      	cmp	r2, #0
 800cc3e:	d1c3      	bne.n	800cbc8 <_strtod_l+0x38>
 800cc40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc42:	9515      	str	r5, [sp, #84]	; 0x54
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	f040 855f 	bne.w	800d708 <_strtod_l+0xb78>
 800cc4a:	4642      	mov	r2, r8
 800cc4c:	464b      	mov	r3, r9
 800cc4e:	e7e3      	b.n	800cc18 <_strtod_l+0x88>
 800cc50:	2100      	movs	r1, #0
 800cc52:	e7ef      	b.n	800cc34 <_strtod_l+0xa4>
 800cc54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cc56:	b13a      	cbz	r2, 800cc68 <_strtod_l+0xd8>
 800cc58:	2135      	movs	r1, #53	; 0x35
 800cc5a:	a818      	add	r0, sp, #96	; 0x60
 800cc5c:	f7ff ff37 	bl	800cace <__copybits>
 800cc60:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cc62:	4620      	mov	r0, r4
 800cc64:	f7ff fb0a 	bl	800c27c <_Bfree>
 800cc68:	3f01      	subs	r7, #1
 800cc6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cc6c:	2f04      	cmp	r7, #4
 800cc6e:	d806      	bhi.n	800cc7e <_strtod_l+0xee>
 800cc70:	e8df f007 	tbb	[pc, r7]
 800cc74:	201d0314 	.word	0x201d0314
 800cc78:	14          	.byte	0x14
 800cc79:	00          	.byte	0x00
 800cc7a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800cc7e:	05e9      	lsls	r1, r5, #23
 800cc80:	bf48      	it	mi
 800cc82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800cc86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc8a:	0d1b      	lsrs	r3, r3, #20
 800cc8c:	051b      	lsls	r3, r3, #20
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d1b9      	bne.n	800cc06 <_strtod_l+0x76>
 800cc92:	f7fe fb03 	bl	800b29c <__errno>
 800cc96:	2322      	movs	r3, #34	; 0x22
 800cc98:	6003      	str	r3, [r0, #0]
 800cc9a:	e7b4      	b.n	800cc06 <_strtod_l+0x76>
 800cc9c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800cca0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cca4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cca8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ccac:	e7e7      	b.n	800cc7e <_strtod_l+0xee>
 800ccae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ce28 <_strtod_l+0x298>
 800ccb2:	e7e4      	b.n	800cc7e <_strtod_l+0xee>
 800ccb4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ccb8:	f04f 38ff 	mov.w	r8, #4294967295
 800ccbc:	e7df      	b.n	800cc7e <_strtod_l+0xee>
 800ccbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccc0:	1c5a      	adds	r2, r3, #1
 800ccc2:	9215      	str	r2, [sp, #84]	; 0x54
 800ccc4:	785b      	ldrb	r3, [r3, #1]
 800ccc6:	2b30      	cmp	r3, #48	; 0x30
 800ccc8:	d0f9      	beq.n	800ccbe <_strtod_l+0x12e>
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d09b      	beq.n	800cc06 <_strtod_l+0x76>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	f04f 0a00 	mov.w	sl, #0
 800ccd4:	9304      	str	r3, [sp, #16]
 800ccd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccda:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ccde:	46d3      	mov	fp, sl
 800cce0:	220a      	movs	r2, #10
 800cce2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cce4:	7806      	ldrb	r6, [r0, #0]
 800cce6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ccea:	b2d9      	uxtb	r1, r3
 800ccec:	2909      	cmp	r1, #9
 800ccee:	d926      	bls.n	800cd3e <_strtod_l+0x1ae>
 800ccf0:	494c      	ldr	r1, [pc, #304]	; (800ce24 <_strtod_l+0x294>)
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	f000 ffe6 	bl	800dcc4 <strncmp>
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	d030      	beq.n	800cd5e <_strtod_l+0x1ce>
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	4632      	mov	r2, r6
 800cd00:	9005      	str	r0, [sp, #20]
 800cd02:	465e      	mov	r6, fp
 800cd04:	4603      	mov	r3, r0
 800cd06:	2a65      	cmp	r2, #101	; 0x65
 800cd08:	d001      	beq.n	800cd0e <_strtod_l+0x17e>
 800cd0a:	2a45      	cmp	r2, #69	; 0x45
 800cd0c:	d113      	bne.n	800cd36 <_strtod_l+0x1a6>
 800cd0e:	b91e      	cbnz	r6, 800cd18 <_strtod_l+0x188>
 800cd10:	9a04      	ldr	r2, [sp, #16]
 800cd12:	4302      	orrs	r2, r0
 800cd14:	d094      	beq.n	800cc40 <_strtod_l+0xb0>
 800cd16:	2600      	movs	r6, #0
 800cd18:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cd1a:	1c6a      	adds	r2, r5, #1
 800cd1c:	9215      	str	r2, [sp, #84]	; 0x54
 800cd1e:	786a      	ldrb	r2, [r5, #1]
 800cd20:	2a2b      	cmp	r2, #43	; 0x2b
 800cd22:	d074      	beq.n	800ce0e <_strtod_l+0x27e>
 800cd24:	2a2d      	cmp	r2, #45	; 0x2d
 800cd26:	d078      	beq.n	800ce1a <_strtod_l+0x28a>
 800cd28:	f04f 0c00 	mov.w	ip, #0
 800cd2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cd30:	2909      	cmp	r1, #9
 800cd32:	d97f      	bls.n	800ce34 <_strtod_l+0x2a4>
 800cd34:	9515      	str	r5, [sp, #84]	; 0x54
 800cd36:	2700      	movs	r7, #0
 800cd38:	e09e      	b.n	800ce78 <_strtod_l+0x2e8>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	e7c8      	b.n	800ccd0 <_strtod_l+0x140>
 800cd3e:	f1bb 0f08 	cmp.w	fp, #8
 800cd42:	bfd8      	it	le
 800cd44:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cd46:	f100 0001 	add.w	r0, r0, #1
 800cd4a:	bfda      	itte	le
 800cd4c:	fb02 3301 	mlale	r3, r2, r1, r3
 800cd50:	9309      	strle	r3, [sp, #36]	; 0x24
 800cd52:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800cd56:	f10b 0b01 	add.w	fp, fp, #1
 800cd5a:	9015      	str	r0, [sp, #84]	; 0x54
 800cd5c:	e7c1      	b.n	800cce2 <_strtod_l+0x152>
 800cd5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd60:	1c5a      	adds	r2, r3, #1
 800cd62:	9215      	str	r2, [sp, #84]	; 0x54
 800cd64:	785a      	ldrb	r2, [r3, #1]
 800cd66:	f1bb 0f00 	cmp.w	fp, #0
 800cd6a:	d037      	beq.n	800cddc <_strtod_l+0x24c>
 800cd6c:	9005      	str	r0, [sp, #20]
 800cd6e:	465e      	mov	r6, fp
 800cd70:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cd74:	2b09      	cmp	r3, #9
 800cd76:	d912      	bls.n	800cd9e <_strtod_l+0x20e>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e7c4      	b.n	800cd06 <_strtod_l+0x176>
 800cd7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	9215      	str	r2, [sp, #84]	; 0x54
 800cd82:	785a      	ldrb	r2, [r3, #1]
 800cd84:	3001      	adds	r0, #1
 800cd86:	2a30      	cmp	r2, #48	; 0x30
 800cd88:	d0f8      	beq.n	800cd7c <_strtod_l+0x1ec>
 800cd8a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cd8e:	2b08      	cmp	r3, #8
 800cd90:	f200 84c1 	bhi.w	800d716 <_strtod_l+0xb86>
 800cd94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd96:	9005      	str	r0, [sp, #20]
 800cd98:	2000      	movs	r0, #0
 800cd9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd9c:	4606      	mov	r6, r0
 800cd9e:	3a30      	subs	r2, #48	; 0x30
 800cda0:	f100 0301 	add.w	r3, r0, #1
 800cda4:	d014      	beq.n	800cdd0 <_strtod_l+0x240>
 800cda6:	9905      	ldr	r1, [sp, #20]
 800cda8:	4419      	add	r1, r3
 800cdaa:	9105      	str	r1, [sp, #20]
 800cdac:	4633      	mov	r3, r6
 800cdae:	eb00 0c06 	add.w	ip, r0, r6
 800cdb2:	210a      	movs	r1, #10
 800cdb4:	4563      	cmp	r3, ip
 800cdb6:	d113      	bne.n	800cde0 <_strtod_l+0x250>
 800cdb8:	1833      	adds	r3, r6, r0
 800cdba:	2b08      	cmp	r3, #8
 800cdbc:	f106 0601 	add.w	r6, r6, #1
 800cdc0:	4406      	add	r6, r0
 800cdc2:	dc1a      	bgt.n	800cdfa <_strtod_l+0x26a>
 800cdc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdc6:	230a      	movs	r3, #10
 800cdc8:	fb03 2301 	mla	r3, r3, r1, r2
 800cdcc:	9309      	str	r3, [sp, #36]	; 0x24
 800cdce:	2300      	movs	r3, #0
 800cdd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cdd2:	1c51      	adds	r1, r2, #1
 800cdd4:	9115      	str	r1, [sp, #84]	; 0x54
 800cdd6:	7852      	ldrb	r2, [r2, #1]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	e7c9      	b.n	800cd70 <_strtod_l+0x1e0>
 800cddc:	4658      	mov	r0, fp
 800cdde:	e7d2      	b.n	800cd86 <_strtod_l+0x1f6>
 800cde0:	2b08      	cmp	r3, #8
 800cde2:	f103 0301 	add.w	r3, r3, #1
 800cde6:	dc03      	bgt.n	800cdf0 <_strtod_l+0x260>
 800cde8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cdea:	434f      	muls	r7, r1
 800cdec:	9709      	str	r7, [sp, #36]	; 0x24
 800cdee:	e7e1      	b.n	800cdb4 <_strtod_l+0x224>
 800cdf0:	2b10      	cmp	r3, #16
 800cdf2:	bfd8      	it	le
 800cdf4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800cdf8:	e7dc      	b.n	800cdb4 <_strtod_l+0x224>
 800cdfa:	2e10      	cmp	r6, #16
 800cdfc:	bfdc      	itt	le
 800cdfe:	230a      	movle	r3, #10
 800ce00:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ce04:	e7e3      	b.n	800cdce <_strtod_l+0x23e>
 800ce06:	2300      	movs	r3, #0
 800ce08:	9305      	str	r3, [sp, #20]
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e780      	b.n	800cd10 <_strtod_l+0x180>
 800ce0e:	f04f 0c00 	mov.w	ip, #0
 800ce12:	1caa      	adds	r2, r5, #2
 800ce14:	9215      	str	r2, [sp, #84]	; 0x54
 800ce16:	78aa      	ldrb	r2, [r5, #2]
 800ce18:	e788      	b.n	800cd2c <_strtod_l+0x19c>
 800ce1a:	f04f 0c01 	mov.w	ip, #1
 800ce1e:	e7f8      	b.n	800ce12 <_strtod_l+0x282>
 800ce20:	0800ed38 	.word	0x0800ed38
 800ce24:	0800ed34 	.word	0x0800ed34
 800ce28:	7ff00000 	.word	0x7ff00000
 800ce2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce2e:	1c51      	adds	r1, r2, #1
 800ce30:	9115      	str	r1, [sp, #84]	; 0x54
 800ce32:	7852      	ldrb	r2, [r2, #1]
 800ce34:	2a30      	cmp	r2, #48	; 0x30
 800ce36:	d0f9      	beq.n	800ce2c <_strtod_l+0x29c>
 800ce38:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ce3c:	2908      	cmp	r1, #8
 800ce3e:	f63f af7a 	bhi.w	800cd36 <_strtod_l+0x1a6>
 800ce42:	3a30      	subs	r2, #48	; 0x30
 800ce44:	9208      	str	r2, [sp, #32]
 800ce46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce48:	920c      	str	r2, [sp, #48]	; 0x30
 800ce4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ce4c:	1c57      	adds	r7, r2, #1
 800ce4e:	9715      	str	r7, [sp, #84]	; 0x54
 800ce50:	7852      	ldrb	r2, [r2, #1]
 800ce52:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ce56:	f1be 0f09 	cmp.w	lr, #9
 800ce5a:	d938      	bls.n	800cece <_strtod_l+0x33e>
 800ce5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce5e:	1a7f      	subs	r7, r7, r1
 800ce60:	2f08      	cmp	r7, #8
 800ce62:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ce66:	dc03      	bgt.n	800ce70 <_strtod_l+0x2e0>
 800ce68:	9908      	ldr	r1, [sp, #32]
 800ce6a:	428f      	cmp	r7, r1
 800ce6c:	bfa8      	it	ge
 800ce6e:	460f      	movge	r7, r1
 800ce70:	f1bc 0f00 	cmp.w	ip, #0
 800ce74:	d000      	beq.n	800ce78 <_strtod_l+0x2e8>
 800ce76:	427f      	negs	r7, r7
 800ce78:	2e00      	cmp	r6, #0
 800ce7a:	d14f      	bne.n	800cf1c <_strtod_l+0x38c>
 800ce7c:	9904      	ldr	r1, [sp, #16]
 800ce7e:	4301      	orrs	r1, r0
 800ce80:	f47f aec1 	bne.w	800cc06 <_strtod_l+0x76>
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	f47f aedb 	bne.w	800cc40 <_strtod_l+0xb0>
 800ce8a:	2a69      	cmp	r2, #105	; 0x69
 800ce8c:	d029      	beq.n	800cee2 <_strtod_l+0x352>
 800ce8e:	dc26      	bgt.n	800cede <_strtod_l+0x34e>
 800ce90:	2a49      	cmp	r2, #73	; 0x49
 800ce92:	d026      	beq.n	800cee2 <_strtod_l+0x352>
 800ce94:	2a4e      	cmp	r2, #78	; 0x4e
 800ce96:	f47f aed3 	bne.w	800cc40 <_strtod_l+0xb0>
 800ce9a:	499b      	ldr	r1, [pc, #620]	; (800d108 <_strtod_l+0x578>)
 800ce9c:	a815      	add	r0, sp, #84	; 0x54
 800ce9e:	f001 fa27 	bl	800e2f0 <__match>
 800cea2:	2800      	cmp	r0, #0
 800cea4:	f43f aecc 	beq.w	800cc40 <_strtod_l+0xb0>
 800cea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	2b28      	cmp	r3, #40	; 0x28
 800ceae:	d12f      	bne.n	800cf10 <_strtod_l+0x380>
 800ceb0:	4996      	ldr	r1, [pc, #600]	; (800d10c <_strtod_l+0x57c>)
 800ceb2:	aa18      	add	r2, sp, #96	; 0x60
 800ceb4:	a815      	add	r0, sp, #84	; 0x54
 800ceb6:	f001 fa2f 	bl	800e318 <__hexnan>
 800ceba:	2805      	cmp	r0, #5
 800cebc:	d128      	bne.n	800cf10 <_strtod_l+0x380>
 800cebe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cec0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cec4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800cec8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800cecc:	e69b      	b.n	800cc06 <_strtod_l+0x76>
 800cece:	9f08      	ldr	r7, [sp, #32]
 800ced0:	210a      	movs	r1, #10
 800ced2:	fb01 2107 	mla	r1, r1, r7, r2
 800ced6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ceda:	9208      	str	r2, [sp, #32]
 800cedc:	e7b5      	b.n	800ce4a <_strtod_l+0x2ba>
 800cede:	2a6e      	cmp	r2, #110	; 0x6e
 800cee0:	e7d9      	b.n	800ce96 <_strtod_l+0x306>
 800cee2:	498b      	ldr	r1, [pc, #556]	; (800d110 <_strtod_l+0x580>)
 800cee4:	a815      	add	r0, sp, #84	; 0x54
 800cee6:	f001 fa03 	bl	800e2f0 <__match>
 800ceea:	2800      	cmp	r0, #0
 800ceec:	f43f aea8 	beq.w	800cc40 <_strtod_l+0xb0>
 800cef0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cef2:	4988      	ldr	r1, [pc, #544]	; (800d114 <_strtod_l+0x584>)
 800cef4:	3b01      	subs	r3, #1
 800cef6:	a815      	add	r0, sp, #84	; 0x54
 800cef8:	9315      	str	r3, [sp, #84]	; 0x54
 800cefa:	f001 f9f9 	bl	800e2f0 <__match>
 800cefe:	b910      	cbnz	r0, 800cf06 <_strtod_l+0x376>
 800cf00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf02:	3301      	adds	r3, #1
 800cf04:	9315      	str	r3, [sp, #84]	; 0x54
 800cf06:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d124 <_strtod_l+0x594>
 800cf0a:	f04f 0800 	mov.w	r8, #0
 800cf0e:	e67a      	b.n	800cc06 <_strtod_l+0x76>
 800cf10:	4881      	ldr	r0, [pc, #516]	; (800d118 <_strtod_l+0x588>)
 800cf12:	f000 ff09 	bl	800dd28 <nan>
 800cf16:	ec59 8b10 	vmov	r8, r9, d0
 800cf1a:	e674      	b.n	800cc06 <_strtod_l+0x76>
 800cf1c:	9b05      	ldr	r3, [sp, #20]
 800cf1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf20:	1afb      	subs	r3, r7, r3
 800cf22:	f1bb 0f00 	cmp.w	fp, #0
 800cf26:	bf08      	it	eq
 800cf28:	46b3      	moveq	fp, r6
 800cf2a:	2e10      	cmp	r6, #16
 800cf2c:	9308      	str	r3, [sp, #32]
 800cf2e:	4635      	mov	r5, r6
 800cf30:	bfa8      	it	ge
 800cf32:	2510      	movge	r5, #16
 800cf34:	f7f3 fb06 	bl	8000544 <__aeabi_ui2d>
 800cf38:	2e09      	cmp	r6, #9
 800cf3a:	4680      	mov	r8, r0
 800cf3c:	4689      	mov	r9, r1
 800cf3e:	dd13      	ble.n	800cf68 <_strtod_l+0x3d8>
 800cf40:	4b76      	ldr	r3, [pc, #472]	; (800d11c <_strtod_l+0x58c>)
 800cf42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cf46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cf4a:	f7f3 fb75 	bl	8000638 <__aeabi_dmul>
 800cf4e:	4680      	mov	r8, r0
 800cf50:	4650      	mov	r0, sl
 800cf52:	4689      	mov	r9, r1
 800cf54:	f7f3 faf6 	bl	8000544 <__aeabi_ui2d>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	4640      	mov	r0, r8
 800cf5e:	4649      	mov	r1, r9
 800cf60:	f7f3 f9b4 	bl	80002cc <__adddf3>
 800cf64:	4680      	mov	r8, r0
 800cf66:	4689      	mov	r9, r1
 800cf68:	2e0f      	cmp	r6, #15
 800cf6a:	dc38      	bgt.n	800cfde <_strtod_l+0x44e>
 800cf6c:	9b08      	ldr	r3, [sp, #32]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	f43f ae49 	beq.w	800cc06 <_strtod_l+0x76>
 800cf74:	dd24      	ble.n	800cfc0 <_strtod_l+0x430>
 800cf76:	2b16      	cmp	r3, #22
 800cf78:	dc0b      	bgt.n	800cf92 <_strtod_l+0x402>
 800cf7a:	4968      	ldr	r1, [pc, #416]	; (800d11c <_strtod_l+0x58c>)
 800cf7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf84:	4642      	mov	r2, r8
 800cf86:	464b      	mov	r3, r9
 800cf88:	f7f3 fb56 	bl	8000638 <__aeabi_dmul>
 800cf8c:	4680      	mov	r8, r0
 800cf8e:	4689      	mov	r9, r1
 800cf90:	e639      	b.n	800cc06 <_strtod_l+0x76>
 800cf92:	9a08      	ldr	r2, [sp, #32]
 800cf94:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	db20      	blt.n	800cfde <_strtod_l+0x44e>
 800cf9c:	4c5f      	ldr	r4, [pc, #380]	; (800d11c <_strtod_l+0x58c>)
 800cf9e:	f1c6 060f 	rsb	r6, r6, #15
 800cfa2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800cfa6:	4642      	mov	r2, r8
 800cfa8:	464b      	mov	r3, r9
 800cfaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfae:	f7f3 fb43 	bl	8000638 <__aeabi_dmul>
 800cfb2:	9b08      	ldr	r3, [sp, #32]
 800cfb4:	1b9e      	subs	r6, r3, r6
 800cfb6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800cfba:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cfbe:	e7e3      	b.n	800cf88 <_strtod_l+0x3f8>
 800cfc0:	9b08      	ldr	r3, [sp, #32]
 800cfc2:	3316      	adds	r3, #22
 800cfc4:	db0b      	blt.n	800cfde <_strtod_l+0x44e>
 800cfc6:	9b05      	ldr	r3, [sp, #20]
 800cfc8:	1bdf      	subs	r7, r3, r7
 800cfca:	4b54      	ldr	r3, [pc, #336]	; (800d11c <_strtod_l+0x58c>)
 800cfcc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cfd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfd4:	4640      	mov	r0, r8
 800cfd6:	4649      	mov	r1, r9
 800cfd8:	f7f3 fc58 	bl	800088c <__aeabi_ddiv>
 800cfdc:	e7d6      	b.n	800cf8c <_strtod_l+0x3fc>
 800cfde:	9b08      	ldr	r3, [sp, #32]
 800cfe0:	1b75      	subs	r5, r6, r5
 800cfe2:	441d      	add	r5, r3
 800cfe4:	2d00      	cmp	r5, #0
 800cfe6:	dd70      	ble.n	800d0ca <_strtod_l+0x53a>
 800cfe8:	f015 030f 	ands.w	r3, r5, #15
 800cfec:	d00a      	beq.n	800d004 <_strtod_l+0x474>
 800cfee:	494b      	ldr	r1, [pc, #300]	; (800d11c <_strtod_l+0x58c>)
 800cff0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cff4:	4642      	mov	r2, r8
 800cff6:	464b      	mov	r3, r9
 800cff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cffc:	f7f3 fb1c 	bl	8000638 <__aeabi_dmul>
 800d000:	4680      	mov	r8, r0
 800d002:	4689      	mov	r9, r1
 800d004:	f035 050f 	bics.w	r5, r5, #15
 800d008:	d04d      	beq.n	800d0a6 <_strtod_l+0x516>
 800d00a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d00e:	dd22      	ble.n	800d056 <_strtod_l+0x4c6>
 800d010:	2500      	movs	r5, #0
 800d012:	46ab      	mov	fp, r5
 800d014:	9509      	str	r5, [sp, #36]	; 0x24
 800d016:	9505      	str	r5, [sp, #20]
 800d018:	2322      	movs	r3, #34	; 0x22
 800d01a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d124 <_strtod_l+0x594>
 800d01e:	6023      	str	r3, [r4, #0]
 800d020:	f04f 0800 	mov.w	r8, #0
 800d024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d026:	2b00      	cmp	r3, #0
 800d028:	f43f aded 	beq.w	800cc06 <_strtod_l+0x76>
 800d02c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d02e:	4620      	mov	r0, r4
 800d030:	f7ff f924 	bl	800c27c <_Bfree>
 800d034:	9905      	ldr	r1, [sp, #20]
 800d036:	4620      	mov	r0, r4
 800d038:	f7ff f920 	bl	800c27c <_Bfree>
 800d03c:	4659      	mov	r1, fp
 800d03e:	4620      	mov	r0, r4
 800d040:	f7ff f91c 	bl	800c27c <_Bfree>
 800d044:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d046:	4620      	mov	r0, r4
 800d048:	f7ff f918 	bl	800c27c <_Bfree>
 800d04c:	4629      	mov	r1, r5
 800d04e:	4620      	mov	r0, r4
 800d050:	f7ff f914 	bl	800c27c <_Bfree>
 800d054:	e5d7      	b.n	800cc06 <_strtod_l+0x76>
 800d056:	4b32      	ldr	r3, [pc, #200]	; (800d120 <_strtod_l+0x590>)
 800d058:	9304      	str	r3, [sp, #16]
 800d05a:	2300      	movs	r3, #0
 800d05c:	112d      	asrs	r5, r5, #4
 800d05e:	4640      	mov	r0, r8
 800d060:	4649      	mov	r1, r9
 800d062:	469a      	mov	sl, r3
 800d064:	2d01      	cmp	r5, #1
 800d066:	dc21      	bgt.n	800d0ac <_strtod_l+0x51c>
 800d068:	b10b      	cbz	r3, 800d06e <_strtod_l+0x4de>
 800d06a:	4680      	mov	r8, r0
 800d06c:	4689      	mov	r9, r1
 800d06e:	492c      	ldr	r1, [pc, #176]	; (800d120 <_strtod_l+0x590>)
 800d070:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d074:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d078:	4642      	mov	r2, r8
 800d07a:	464b      	mov	r3, r9
 800d07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d080:	f7f3 fada 	bl	8000638 <__aeabi_dmul>
 800d084:	4b27      	ldr	r3, [pc, #156]	; (800d124 <_strtod_l+0x594>)
 800d086:	460a      	mov	r2, r1
 800d088:	400b      	ands	r3, r1
 800d08a:	4927      	ldr	r1, [pc, #156]	; (800d128 <_strtod_l+0x598>)
 800d08c:	428b      	cmp	r3, r1
 800d08e:	4680      	mov	r8, r0
 800d090:	d8be      	bhi.n	800d010 <_strtod_l+0x480>
 800d092:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d096:	428b      	cmp	r3, r1
 800d098:	bf86      	itte	hi
 800d09a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d12c <_strtod_l+0x59c>
 800d09e:	f04f 38ff 	movhi.w	r8, #4294967295
 800d0a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	9304      	str	r3, [sp, #16]
 800d0aa:	e07b      	b.n	800d1a4 <_strtod_l+0x614>
 800d0ac:	07ea      	lsls	r2, r5, #31
 800d0ae:	d505      	bpl.n	800d0bc <_strtod_l+0x52c>
 800d0b0:	9b04      	ldr	r3, [sp, #16]
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	f7f3 fabf 	bl	8000638 <__aeabi_dmul>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	9a04      	ldr	r2, [sp, #16]
 800d0be:	3208      	adds	r2, #8
 800d0c0:	f10a 0a01 	add.w	sl, sl, #1
 800d0c4:	106d      	asrs	r5, r5, #1
 800d0c6:	9204      	str	r2, [sp, #16]
 800d0c8:	e7cc      	b.n	800d064 <_strtod_l+0x4d4>
 800d0ca:	d0ec      	beq.n	800d0a6 <_strtod_l+0x516>
 800d0cc:	426d      	negs	r5, r5
 800d0ce:	f015 020f 	ands.w	r2, r5, #15
 800d0d2:	d00a      	beq.n	800d0ea <_strtod_l+0x55a>
 800d0d4:	4b11      	ldr	r3, [pc, #68]	; (800d11c <_strtod_l+0x58c>)
 800d0d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0da:	4640      	mov	r0, r8
 800d0dc:	4649      	mov	r1, r9
 800d0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e2:	f7f3 fbd3 	bl	800088c <__aeabi_ddiv>
 800d0e6:	4680      	mov	r8, r0
 800d0e8:	4689      	mov	r9, r1
 800d0ea:	112d      	asrs	r5, r5, #4
 800d0ec:	d0db      	beq.n	800d0a6 <_strtod_l+0x516>
 800d0ee:	2d1f      	cmp	r5, #31
 800d0f0:	dd1e      	ble.n	800d130 <_strtod_l+0x5a0>
 800d0f2:	2500      	movs	r5, #0
 800d0f4:	46ab      	mov	fp, r5
 800d0f6:	9509      	str	r5, [sp, #36]	; 0x24
 800d0f8:	9505      	str	r5, [sp, #20]
 800d0fa:	2322      	movs	r3, #34	; 0x22
 800d0fc:	f04f 0800 	mov.w	r8, #0
 800d100:	f04f 0900 	mov.w	r9, #0
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	e78d      	b.n	800d024 <_strtod_l+0x494>
 800d108:	0800eb21 	.word	0x0800eb21
 800d10c:	0800ed4c 	.word	0x0800ed4c
 800d110:	0800eb19 	.word	0x0800eb19
 800d114:	0800eb50 	.word	0x0800eb50
 800d118:	0800eedd 	.word	0x0800eedd
 800d11c:	0800ec60 	.word	0x0800ec60
 800d120:	0800ec38 	.word	0x0800ec38
 800d124:	7ff00000 	.word	0x7ff00000
 800d128:	7ca00000 	.word	0x7ca00000
 800d12c:	7fefffff 	.word	0x7fefffff
 800d130:	f015 0310 	ands.w	r3, r5, #16
 800d134:	bf18      	it	ne
 800d136:	236a      	movne	r3, #106	; 0x6a
 800d138:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d4dc <_strtod_l+0x94c>
 800d13c:	9304      	str	r3, [sp, #16]
 800d13e:	4640      	mov	r0, r8
 800d140:	4649      	mov	r1, r9
 800d142:	2300      	movs	r3, #0
 800d144:	07ea      	lsls	r2, r5, #31
 800d146:	d504      	bpl.n	800d152 <_strtod_l+0x5c2>
 800d148:	e9da 2300 	ldrd	r2, r3, [sl]
 800d14c:	f7f3 fa74 	bl	8000638 <__aeabi_dmul>
 800d150:	2301      	movs	r3, #1
 800d152:	106d      	asrs	r5, r5, #1
 800d154:	f10a 0a08 	add.w	sl, sl, #8
 800d158:	d1f4      	bne.n	800d144 <_strtod_l+0x5b4>
 800d15a:	b10b      	cbz	r3, 800d160 <_strtod_l+0x5d0>
 800d15c:	4680      	mov	r8, r0
 800d15e:	4689      	mov	r9, r1
 800d160:	9b04      	ldr	r3, [sp, #16]
 800d162:	b1bb      	cbz	r3, 800d194 <_strtod_l+0x604>
 800d164:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d168:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	4649      	mov	r1, r9
 800d170:	dd10      	ble.n	800d194 <_strtod_l+0x604>
 800d172:	2b1f      	cmp	r3, #31
 800d174:	f340 811e 	ble.w	800d3b4 <_strtod_l+0x824>
 800d178:	2b34      	cmp	r3, #52	; 0x34
 800d17a:	bfde      	ittt	le
 800d17c:	f04f 33ff 	movle.w	r3, #4294967295
 800d180:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d184:	4093      	lslle	r3, r2
 800d186:	f04f 0800 	mov.w	r8, #0
 800d18a:	bfcc      	ite	gt
 800d18c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d190:	ea03 0901 	andle.w	r9, r3, r1
 800d194:	2200      	movs	r2, #0
 800d196:	2300      	movs	r3, #0
 800d198:	4640      	mov	r0, r8
 800d19a:	4649      	mov	r1, r9
 800d19c:	f7f3 fcb4 	bl	8000b08 <__aeabi_dcmpeq>
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d1a6      	bne.n	800d0f2 <_strtod_l+0x562>
 800d1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d1aa:	4633      	mov	r3, r6
 800d1ac:	465a      	mov	r2, fp
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f7ff f8cc 	bl	800c34c <__s2b>
 800d1b4:	9009      	str	r0, [sp, #36]	; 0x24
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	f43f af2a 	beq.w	800d010 <_strtod_l+0x480>
 800d1bc:	9a08      	ldr	r2, [sp, #32]
 800d1be:	9b05      	ldr	r3, [sp, #20]
 800d1c0:	2a00      	cmp	r2, #0
 800d1c2:	eba3 0307 	sub.w	r3, r3, r7
 800d1c6:	bfa8      	it	ge
 800d1c8:	2300      	movge	r3, #0
 800d1ca:	930c      	str	r3, [sp, #48]	; 0x30
 800d1cc:	2500      	movs	r5, #0
 800d1ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d1d2:	9312      	str	r3, [sp, #72]	; 0x48
 800d1d4:	46ab      	mov	fp, r5
 800d1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d8:	4620      	mov	r0, r4
 800d1da:	6859      	ldr	r1, [r3, #4]
 800d1dc:	f7ff f80e 	bl	800c1fc <_Balloc>
 800d1e0:	9005      	str	r0, [sp, #20]
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	f43f af18 	beq.w	800d018 <_strtod_l+0x488>
 800d1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ea:	691a      	ldr	r2, [r3, #16]
 800d1ec:	3202      	adds	r2, #2
 800d1ee:	f103 010c 	add.w	r1, r3, #12
 800d1f2:	0092      	lsls	r2, r2, #2
 800d1f4:	300c      	adds	r0, #12
 800d1f6:	f000 fd87 	bl	800dd08 <memcpy>
 800d1fa:	ec49 8b10 	vmov	d0, r8, r9
 800d1fe:	aa18      	add	r2, sp, #96	; 0x60
 800d200:	a917      	add	r1, sp, #92	; 0x5c
 800d202:	4620      	mov	r0, r4
 800d204:	f7ff fbd6 	bl	800c9b4 <__d2b>
 800d208:	ec49 8b18 	vmov	d8, r8, r9
 800d20c:	9016      	str	r0, [sp, #88]	; 0x58
 800d20e:	2800      	cmp	r0, #0
 800d210:	f43f af02 	beq.w	800d018 <_strtod_l+0x488>
 800d214:	2101      	movs	r1, #1
 800d216:	4620      	mov	r0, r4
 800d218:	f7ff f930 	bl	800c47c <__i2b>
 800d21c:	4683      	mov	fp, r0
 800d21e:	2800      	cmp	r0, #0
 800d220:	f43f aefa 	beq.w	800d018 <_strtod_l+0x488>
 800d224:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d226:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d228:	2e00      	cmp	r6, #0
 800d22a:	bfab      	itete	ge
 800d22c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d22e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d230:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d232:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d236:	bfac      	ite	ge
 800d238:	eb06 0a03 	addge.w	sl, r6, r3
 800d23c:	1b9f      	sublt	r7, r3, r6
 800d23e:	9b04      	ldr	r3, [sp, #16]
 800d240:	1af6      	subs	r6, r6, r3
 800d242:	4416      	add	r6, r2
 800d244:	4ba0      	ldr	r3, [pc, #640]	; (800d4c8 <_strtod_l+0x938>)
 800d246:	3e01      	subs	r6, #1
 800d248:	429e      	cmp	r6, r3
 800d24a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d24e:	f280 80c4 	bge.w	800d3da <_strtod_l+0x84a>
 800d252:	1b9b      	subs	r3, r3, r6
 800d254:	2b1f      	cmp	r3, #31
 800d256:	eba2 0203 	sub.w	r2, r2, r3
 800d25a:	f04f 0101 	mov.w	r1, #1
 800d25e:	f300 80b0 	bgt.w	800d3c2 <_strtod_l+0x832>
 800d262:	fa01 f303 	lsl.w	r3, r1, r3
 800d266:	930e      	str	r3, [sp, #56]	; 0x38
 800d268:	2300      	movs	r3, #0
 800d26a:	930d      	str	r3, [sp, #52]	; 0x34
 800d26c:	eb0a 0602 	add.w	r6, sl, r2
 800d270:	9b04      	ldr	r3, [sp, #16]
 800d272:	45b2      	cmp	sl, r6
 800d274:	4417      	add	r7, r2
 800d276:	441f      	add	r7, r3
 800d278:	4653      	mov	r3, sl
 800d27a:	bfa8      	it	ge
 800d27c:	4633      	movge	r3, r6
 800d27e:	42bb      	cmp	r3, r7
 800d280:	bfa8      	it	ge
 800d282:	463b      	movge	r3, r7
 800d284:	2b00      	cmp	r3, #0
 800d286:	bfc2      	ittt	gt
 800d288:	1af6      	subgt	r6, r6, r3
 800d28a:	1aff      	subgt	r7, r7, r3
 800d28c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d292:	2b00      	cmp	r3, #0
 800d294:	dd17      	ble.n	800d2c6 <_strtod_l+0x736>
 800d296:	4659      	mov	r1, fp
 800d298:	461a      	mov	r2, r3
 800d29a:	4620      	mov	r0, r4
 800d29c:	f7ff f9ae 	bl	800c5fc <__pow5mult>
 800d2a0:	4683      	mov	fp, r0
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	f43f aeb8 	beq.w	800d018 <_strtod_l+0x488>
 800d2a8:	4601      	mov	r1, r0
 800d2aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	f7ff f8fb 	bl	800c4a8 <__multiply>
 800d2b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	f43f aeaf 	beq.w	800d018 <_strtod_l+0x488>
 800d2ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f7fe ffdd 	bl	800c27c <_Bfree>
 800d2c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2c4:	9316      	str	r3, [sp, #88]	; 0x58
 800d2c6:	2e00      	cmp	r6, #0
 800d2c8:	f300 808c 	bgt.w	800d3e4 <_strtod_l+0x854>
 800d2cc:	9b08      	ldr	r3, [sp, #32]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	dd08      	ble.n	800d2e4 <_strtod_l+0x754>
 800d2d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d2d4:	9905      	ldr	r1, [sp, #20]
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f7ff f990 	bl	800c5fc <__pow5mult>
 800d2dc:	9005      	str	r0, [sp, #20]
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	f43f ae9a 	beq.w	800d018 <_strtod_l+0x488>
 800d2e4:	2f00      	cmp	r7, #0
 800d2e6:	dd08      	ble.n	800d2fa <_strtod_l+0x76a>
 800d2e8:	9905      	ldr	r1, [sp, #20]
 800d2ea:	463a      	mov	r2, r7
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f7ff f9df 	bl	800c6b0 <__lshift>
 800d2f2:	9005      	str	r0, [sp, #20]
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	f43f ae8f 	beq.w	800d018 <_strtod_l+0x488>
 800d2fa:	f1ba 0f00 	cmp.w	sl, #0
 800d2fe:	dd08      	ble.n	800d312 <_strtod_l+0x782>
 800d300:	4659      	mov	r1, fp
 800d302:	4652      	mov	r2, sl
 800d304:	4620      	mov	r0, r4
 800d306:	f7ff f9d3 	bl	800c6b0 <__lshift>
 800d30a:	4683      	mov	fp, r0
 800d30c:	2800      	cmp	r0, #0
 800d30e:	f43f ae83 	beq.w	800d018 <_strtod_l+0x488>
 800d312:	9a05      	ldr	r2, [sp, #20]
 800d314:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d316:	4620      	mov	r0, r4
 800d318:	f7ff fa52 	bl	800c7c0 <__mdiff>
 800d31c:	4605      	mov	r5, r0
 800d31e:	2800      	cmp	r0, #0
 800d320:	f43f ae7a 	beq.w	800d018 <_strtod_l+0x488>
 800d324:	68c3      	ldr	r3, [r0, #12]
 800d326:	930b      	str	r3, [sp, #44]	; 0x2c
 800d328:	2300      	movs	r3, #0
 800d32a:	60c3      	str	r3, [r0, #12]
 800d32c:	4659      	mov	r1, fp
 800d32e:	f7ff fa2b 	bl	800c788 <__mcmp>
 800d332:	2800      	cmp	r0, #0
 800d334:	da60      	bge.n	800d3f8 <_strtod_l+0x868>
 800d336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d338:	ea53 0308 	orrs.w	r3, r3, r8
 800d33c:	f040 8084 	bne.w	800d448 <_strtod_l+0x8b8>
 800d340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d344:	2b00      	cmp	r3, #0
 800d346:	d17f      	bne.n	800d448 <_strtod_l+0x8b8>
 800d348:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d34c:	0d1b      	lsrs	r3, r3, #20
 800d34e:	051b      	lsls	r3, r3, #20
 800d350:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d354:	d978      	bls.n	800d448 <_strtod_l+0x8b8>
 800d356:	696b      	ldr	r3, [r5, #20]
 800d358:	b913      	cbnz	r3, 800d360 <_strtod_l+0x7d0>
 800d35a:	692b      	ldr	r3, [r5, #16]
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	dd73      	ble.n	800d448 <_strtod_l+0x8b8>
 800d360:	4629      	mov	r1, r5
 800d362:	2201      	movs	r2, #1
 800d364:	4620      	mov	r0, r4
 800d366:	f7ff f9a3 	bl	800c6b0 <__lshift>
 800d36a:	4659      	mov	r1, fp
 800d36c:	4605      	mov	r5, r0
 800d36e:	f7ff fa0b 	bl	800c788 <__mcmp>
 800d372:	2800      	cmp	r0, #0
 800d374:	dd68      	ble.n	800d448 <_strtod_l+0x8b8>
 800d376:	9904      	ldr	r1, [sp, #16]
 800d378:	4a54      	ldr	r2, [pc, #336]	; (800d4cc <_strtod_l+0x93c>)
 800d37a:	464b      	mov	r3, r9
 800d37c:	2900      	cmp	r1, #0
 800d37e:	f000 8084 	beq.w	800d48a <_strtod_l+0x8fa>
 800d382:	ea02 0109 	and.w	r1, r2, r9
 800d386:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d38a:	dc7e      	bgt.n	800d48a <_strtod_l+0x8fa>
 800d38c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d390:	f77f aeb3 	ble.w	800d0fa <_strtod_l+0x56a>
 800d394:	4b4e      	ldr	r3, [pc, #312]	; (800d4d0 <_strtod_l+0x940>)
 800d396:	4640      	mov	r0, r8
 800d398:	4649      	mov	r1, r9
 800d39a:	2200      	movs	r2, #0
 800d39c:	f7f3 f94c 	bl	8000638 <__aeabi_dmul>
 800d3a0:	4b4a      	ldr	r3, [pc, #296]	; (800d4cc <_strtod_l+0x93c>)
 800d3a2:	400b      	ands	r3, r1
 800d3a4:	4680      	mov	r8, r0
 800d3a6:	4689      	mov	r9, r1
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f47f ae3f 	bne.w	800d02c <_strtod_l+0x49c>
 800d3ae:	2322      	movs	r3, #34	; 0x22
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	e63b      	b.n	800d02c <_strtod_l+0x49c>
 800d3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3bc:	ea03 0808 	and.w	r8, r3, r8
 800d3c0:	e6e8      	b.n	800d194 <_strtod_l+0x604>
 800d3c2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d3c6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d3ca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d3ce:	36e2      	adds	r6, #226	; 0xe2
 800d3d0:	fa01 f306 	lsl.w	r3, r1, r6
 800d3d4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d3d8:	e748      	b.n	800d26c <_strtod_l+0x6dc>
 800d3da:	2100      	movs	r1, #0
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d3e2:	e743      	b.n	800d26c <_strtod_l+0x6dc>
 800d3e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d3e6:	4632      	mov	r2, r6
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f7ff f961 	bl	800c6b0 <__lshift>
 800d3ee:	9016      	str	r0, [sp, #88]	; 0x58
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	f47f af6b 	bne.w	800d2cc <_strtod_l+0x73c>
 800d3f6:	e60f      	b.n	800d018 <_strtod_l+0x488>
 800d3f8:	46ca      	mov	sl, r9
 800d3fa:	d171      	bne.n	800d4e0 <_strtod_l+0x950>
 800d3fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d402:	b352      	cbz	r2, 800d45a <_strtod_l+0x8ca>
 800d404:	4a33      	ldr	r2, [pc, #204]	; (800d4d4 <_strtod_l+0x944>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d12a      	bne.n	800d460 <_strtod_l+0x8d0>
 800d40a:	9b04      	ldr	r3, [sp, #16]
 800d40c:	4641      	mov	r1, r8
 800d40e:	b1fb      	cbz	r3, 800d450 <_strtod_l+0x8c0>
 800d410:	4b2e      	ldr	r3, [pc, #184]	; (800d4cc <_strtod_l+0x93c>)
 800d412:	ea09 0303 	and.w	r3, r9, r3
 800d416:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d41a:	f04f 32ff 	mov.w	r2, #4294967295
 800d41e:	d81a      	bhi.n	800d456 <_strtod_l+0x8c6>
 800d420:	0d1b      	lsrs	r3, r3, #20
 800d422:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d426:	fa02 f303 	lsl.w	r3, r2, r3
 800d42a:	4299      	cmp	r1, r3
 800d42c:	d118      	bne.n	800d460 <_strtod_l+0x8d0>
 800d42e:	4b2a      	ldr	r3, [pc, #168]	; (800d4d8 <_strtod_l+0x948>)
 800d430:	459a      	cmp	sl, r3
 800d432:	d102      	bne.n	800d43a <_strtod_l+0x8aa>
 800d434:	3101      	adds	r1, #1
 800d436:	f43f adef 	beq.w	800d018 <_strtod_l+0x488>
 800d43a:	4b24      	ldr	r3, [pc, #144]	; (800d4cc <_strtod_l+0x93c>)
 800d43c:	ea0a 0303 	and.w	r3, sl, r3
 800d440:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d444:	f04f 0800 	mov.w	r8, #0
 800d448:	9b04      	ldr	r3, [sp, #16]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1a2      	bne.n	800d394 <_strtod_l+0x804>
 800d44e:	e5ed      	b.n	800d02c <_strtod_l+0x49c>
 800d450:	f04f 33ff 	mov.w	r3, #4294967295
 800d454:	e7e9      	b.n	800d42a <_strtod_l+0x89a>
 800d456:	4613      	mov	r3, r2
 800d458:	e7e7      	b.n	800d42a <_strtod_l+0x89a>
 800d45a:	ea53 0308 	orrs.w	r3, r3, r8
 800d45e:	d08a      	beq.n	800d376 <_strtod_l+0x7e6>
 800d460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d462:	b1e3      	cbz	r3, 800d49e <_strtod_l+0x90e>
 800d464:	ea13 0f0a 	tst.w	r3, sl
 800d468:	d0ee      	beq.n	800d448 <_strtod_l+0x8b8>
 800d46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d46c:	9a04      	ldr	r2, [sp, #16]
 800d46e:	4640      	mov	r0, r8
 800d470:	4649      	mov	r1, r9
 800d472:	b1c3      	cbz	r3, 800d4a6 <_strtod_l+0x916>
 800d474:	f7ff fb6f 	bl	800cb56 <sulp>
 800d478:	4602      	mov	r2, r0
 800d47a:	460b      	mov	r3, r1
 800d47c:	ec51 0b18 	vmov	r0, r1, d8
 800d480:	f7f2 ff24 	bl	80002cc <__adddf3>
 800d484:	4680      	mov	r8, r0
 800d486:	4689      	mov	r9, r1
 800d488:	e7de      	b.n	800d448 <_strtod_l+0x8b8>
 800d48a:	4013      	ands	r3, r2
 800d48c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d490:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d494:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d498:	f04f 38ff 	mov.w	r8, #4294967295
 800d49c:	e7d4      	b.n	800d448 <_strtod_l+0x8b8>
 800d49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4a0:	ea13 0f08 	tst.w	r3, r8
 800d4a4:	e7e0      	b.n	800d468 <_strtod_l+0x8d8>
 800d4a6:	f7ff fb56 	bl	800cb56 <sulp>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	ec51 0b18 	vmov	r0, r1, d8
 800d4b2:	f7f2 ff09 	bl	80002c8 <__aeabi_dsub>
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	4680      	mov	r8, r0
 800d4bc:	4689      	mov	r9, r1
 800d4be:	f7f3 fb23 	bl	8000b08 <__aeabi_dcmpeq>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	d0c0      	beq.n	800d448 <_strtod_l+0x8b8>
 800d4c6:	e618      	b.n	800d0fa <_strtod_l+0x56a>
 800d4c8:	fffffc02 	.word	0xfffffc02
 800d4cc:	7ff00000 	.word	0x7ff00000
 800d4d0:	39500000 	.word	0x39500000
 800d4d4:	000fffff 	.word	0x000fffff
 800d4d8:	7fefffff 	.word	0x7fefffff
 800d4dc:	0800ed60 	.word	0x0800ed60
 800d4e0:	4659      	mov	r1, fp
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	f7ff fac0 	bl	800ca68 <__ratio>
 800d4e8:	ec57 6b10 	vmov	r6, r7, d0
 800d4ec:	ee10 0a10 	vmov	r0, s0
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4f6:	4639      	mov	r1, r7
 800d4f8:	f7f3 fb1a 	bl	8000b30 <__aeabi_dcmple>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	d071      	beq.n	800d5e4 <_strtod_l+0xa54>
 800d500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d502:	2b00      	cmp	r3, #0
 800d504:	d17c      	bne.n	800d600 <_strtod_l+0xa70>
 800d506:	f1b8 0f00 	cmp.w	r8, #0
 800d50a:	d15a      	bne.n	800d5c2 <_strtod_l+0xa32>
 800d50c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d510:	2b00      	cmp	r3, #0
 800d512:	d15d      	bne.n	800d5d0 <_strtod_l+0xa40>
 800d514:	4b90      	ldr	r3, [pc, #576]	; (800d758 <_strtod_l+0xbc8>)
 800d516:	2200      	movs	r2, #0
 800d518:	4630      	mov	r0, r6
 800d51a:	4639      	mov	r1, r7
 800d51c:	f7f3 fafe 	bl	8000b1c <__aeabi_dcmplt>
 800d520:	2800      	cmp	r0, #0
 800d522:	d15c      	bne.n	800d5de <_strtod_l+0xa4e>
 800d524:	4630      	mov	r0, r6
 800d526:	4639      	mov	r1, r7
 800d528:	4b8c      	ldr	r3, [pc, #560]	; (800d75c <_strtod_l+0xbcc>)
 800d52a:	2200      	movs	r2, #0
 800d52c:	f7f3 f884 	bl	8000638 <__aeabi_dmul>
 800d530:	4606      	mov	r6, r0
 800d532:	460f      	mov	r7, r1
 800d534:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d538:	9606      	str	r6, [sp, #24]
 800d53a:	9307      	str	r3, [sp, #28]
 800d53c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d540:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d544:	4b86      	ldr	r3, [pc, #536]	; (800d760 <_strtod_l+0xbd0>)
 800d546:	ea0a 0303 	and.w	r3, sl, r3
 800d54a:	930d      	str	r3, [sp, #52]	; 0x34
 800d54c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d54e:	4b85      	ldr	r3, [pc, #532]	; (800d764 <_strtod_l+0xbd4>)
 800d550:	429a      	cmp	r2, r3
 800d552:	f040 8090 	bne.w	800d676 <_strtod_l+0xae6>
 800d556:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d55a:	ec49 8b10 	vmov	d0, r8, r9
 800d55e:	f7ff f9b9 	bl	800c8d4 <__ulp>
 800d562:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d566:	ec51 0b10 	vmov	r0, r1, d0
 800d56a:	f7f3 f865 	bl	8000638 <__aeabi_dmul>
 800d56e:	4642      	mov	r2, r8
 800d570:	464b      	mov	r3, r9
 800d572:	f7f2 feab 	bl	80002cc <__adddf3>
 800d576:	460b      	mov	r3, r1
 800d578:	4979      	ldr	r1, [pc, #484]	; (800d760 <_strtod_l+0xbd0>)
 800d57a:	4a7b      	ldr	r2, [pc, #492]	; (800d768 <_strtod_l+0xbd8>)
 800d57c:	4019      	ands	r1, r3
 800d57e:	4291      	cmp	r1, r2
 800d580:	4680      	mov	r8, r0
 800d582:	d944      	bls.n	800d60e <_strtod_l+0xa7e>
 800d584:	ee18 2a90 	vmov	r2, s17
 800d588:	4b78      	ldr	r3, [pc, #480]	; (800d76c <_strtod_l+0xbdc>)
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d104      	bne.n	800d598 <_strtod_l+0xa08>
 800d58e:	ee18 3a10 	vmov	r3, s16
 800d592:	3301      	adds	r3, #1
 800d594:	f43f ad40 	beq.w	800d018 <_strtod_l+0x488>
 800d598:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d76c <_strtod_l+0xbdc>
 800d59c:	f04f 38ff 	mov.w	r8, #4294967295
 800d5a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	f7fe fe6a 	bl	800c27c <_Bfree>
 800d5a8:	9905      	ldr	r1, [sp, #20]
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f7fe fe66 	bl	800c27c <_Bfree>
 800d5b0:	4659      	mov	r1, fp
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f7fe fe62 	bl	800c27c <_Bfree>
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f7fe fe5e 	bl	800c27c <_Bfree>
 800d5c0:	e609      	b.n	800d1d6 <_strtod_l+0x646>
 800d5c2:	f1b8 0f01 	cmp.w	r8, #1
 800d5c6:	d103      	bne.n	800d5d0 <_strtod_l+0xa40>
 800d5c8:	f1b9 0f00 	cmp.w	r9, #0
 800d5cc:	f43f ad95 	beq.w	800d0fa <_strtod_l+0x56a>
 800d5d0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d728 <_strtod_l+0xb98>
 800d5d4:	4f60      	ldr	r7, [pc, #384]	; (800d758 <_strtod_l+0xbc8>)
 800d5d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d5da:	2600      	movs	r6, #0
 800d5dc:	e7ae      	b.n	800d53c <_strtod_l+0x9ac>
 800d5de:	4f5f      	ldr	r7, [pc, #380]	; (800d75c <_strtod_l+0xbcc>)
 800d5e0:	2600      	movs	r6, #0
 800d5e2:	e7a7      	b.n	800d534 <_strtod_l+0x9a4>
 800d5e4:	4b5d      	ldr	r3, [pc, #372]	; (800d75c <_strtod_l+0xbcc>)
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	4639      	mov	r1, r7
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f7f3 f824 	bl	8000638 <__aeabi_dmul>
 800d5f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	460f      	mov	r7, r1
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d09c      	beq.n	800d534 <_strtod_l+0x9a4>
 800d5fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d5fe:	e79d      	b.n	800d53c <_strtod_l+0x9ac>
 800d600:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d730 <_strtod_l+0xba0>
 800d604:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d608:	ec57 6b17 	vmov	r6, r7, d7
 800d60c:	e796      	b.n	800d53c <_strtod_l+0x9ac>
 800d60e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d612:	9b04      	ldr	r3, [sp, #16]
 800d614:	46ca      	mov	sl, r9
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1c2      	bne.n	800d5a0 <_strtod_l+0xa10>
 800d61a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d61e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d620:	0d1b      	lsrs	r3, r3, #20
 800d622:	051b      	lsls	r3, r3, #20
 800d624:	429a      	cmp	r2, r3
 800d626:	d1bb      	bne.n	800d5a0 <_strtod_l+0xa10>
 800d628:	4630      	mov	r0, r6
 800d62a:	4639      	mov	r1, r7
 800d62c:	f7f3 fb64 	bl	8000cf8 <__aeabi_d2lz>
 800d630:	f7f2 ffd4 	bl	80005dc <__aeabi_l2d>
 800d634:	4602      	mov	r2, r0
 800d636:	460b      	mov	r3, r1
 800d638:	4630      	mov	r0, r6
 800d63a:	4639      	mov	r1, r7
 800d63c:	f7f2 fe44 	bl	80002c8 <__aeabi_dsub>
 800d640:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d642:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d646:	ea43 0308 	orr.w	r3, r3, r8
 800d64a:	4313      	orrs	r3, r2
 800d64c:	4606      	mov	r6, r0
 800d64e:	460f      	mov	r7, r1
 800d650:	d054      	beq.n	800d6fc <_strtod_l+0xb6c>
 800d652:	a339      	add	r3, pc, #228	; (adr r3, 800d738 <_strtod_l+0xba8>)
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	f7f3 fa60 	bl	8000b1c <__aeabi_dcmplt>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	f47f ace5 	bne.w	800d02c <_strtod_l+0x49c>
 800d662:	a337      	add	r3, pc, #220	; (adr r3, 800d740 <_strtod_l+0xbb0>)
 800d664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d668:	4630      	mov	r0, r6
 800d66a:	4639      	mov	r1, r7
 800d66c:	f7f3 fa74 	bl	8000b58 <__aeabi_dcmpgt>
 800d670:	2800      	cmp	r0, #0
 800d672:	d095      	beq.n	800d5a0 <_strtod_l+0xa10>
 800d674:	e4da      	b.n	800d02c <_strtod_l+0x49c>
 800d676:	9b04      	ldr	r3, [sp, #16]
 800d678:	b333      	cbz	r3, 800d6c8 <_strtod_l+0xb38>
 800d67a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d67c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d680:	d822      	bhi.n	800d6c8 <_strtod_l+0xb38>
 800d682:	a331      	add	r3, pc, #196	; (adr r3, 800d748 <_strtod_l+0xbb8>)
 800d684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d688:	4630      	mov	r0, r6
 800d68a:	4639      	mov	r1, r7
 800d68c:	f7f3 fa50 	bl	8000b30 <__aeabi_dcmple>
 800d690:	b1a0      	cbz	r0, 800d6bc <_strtod_l+0xb2c>
 800d692:	4639      	mov	r1, r7
 800d694:	4630      	mov	r0, r6
 800d696:	f7f3 faa7 	bl	8000be8 <__aeabi_d2uiz>
 800d69a:	2801      	cmp	r0, #1
 800d69c:	bf38      	it	cc
 800d69e:	2001      	movcc	r0, #1
 800d6a0:	f7f2 ff50 	bl	8000544 <__aeabi_ui2d>
 800d6a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6a6:	4606      	mov	r6, r0
 800d6a8:	460f      	mov	r7, r1
 800d6aa:	bb23      	cbnz	r3, 800d6f6 <_strtod_l+0xb66>
 800d6ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6b0:	9010      	str	r0, [sp, #64]	; 0x40
 800d6b2:	9311      	str	r3, [sp, #68]	; 0x44
 800d6b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d6b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d6bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d6c4:	1a9b      	subs	r3, r3, r2
 800d6c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d6cc:	eeb0 0a48 	vmov.f32	s0, s16
 800d6d0:	eef0 0a68 	vmov.f32	s1, s17
 800d6d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d6d8:	f7ff f8fc 	bl	800c8d4 <__ulp>
 800d6dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d6e0:	ec53 2b10 	vmov	r2, r3, d0
 800d6e4:	f7f2 ffa8 	bl	8000638 <__aeabi_dmul>
 800d6e8:	ec53 2b18 	vmov	r2, r3, d8
 800d6ec:	f7f2 fdee 	bl	80002cc <__adddf3>
 800d6f0:	4680      	mov	r8, r0
 800d6f2:	4689      	mov	r9, r1
 800d6f4:	e78d      	b.n	800d612 <_strtod_l+0xa82>
 800d6f6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d6fa:	e7db      	b.n	800d6b4 <_strtod_l+0xb24>
 800d6fc:	a314      	add	r3, pc, #80	; (adr r3, 800d750 <_strtod_l+0xbc0>)
 800d6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d702:	f7f3 fa0b 	bl	8000b1c <__aeabi_dcmplt>
 800d706:	e7b3      	b.n	800d670 <_strtod_l+0xae0>
 800d708:	2300      	movs	r3, #0
 800d70a:	930a      	str	r3, [sp, #40]	; 0x28
 800d70c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d70e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d710:	6013      	str	r3, [r2, #0]
 800d712:	f7ff ba7c 	b.w	800cc0e <_strtod_l+0x7e>
 800d716:	2a65      	cmp	r2, #101	; 0x65
 800d718:	f43f ab75 	beq.w	800ce06 <_strtod_l+0x276>
 800d71c:	2a45      	cmp	r2, #69	; 0x45
 800d71e:	f43f ab72 	beq.w	800ce06 <_strtod_l+0x276>
 800d722:	2301      	movs	r3, #1
 800d724:	f7ff bbaa 	b.w	800ce7c <_strtod_l+0x2ec>
 800d728:	00000000 	.word	0x00000000
 800d72c:	bff00000 	.word	0xbff00000
 800d730:	00000000 	.word	0x00000000
 800d734:	3ff00000 	.word	0x3ff00000
 800d738:	94a03595 	.word	0x94a03595
 800d73c:	3fdfffff 	.word	0x3fdfffff
 800d740:	35afe535 	.word	0x35afe535
 800d744:	3fe00000 	.word	0x3fe00000
 800d748:	ffc00000 	.word	0xffc00000
 800d74c:	41dfffff 	.word	0x41dfffff
 800d750:	94a03595 	.word	0x94a03595
 800d754:	3fcfffff 	.word	0x3fcfffff
 800d758:	3ff00000 	.word	0x3ff00000
 800d75c:	3fe00000 	.word	0x3fe00000
 800d760:	7ff00000 	.word	0x7ff00000
 800d764:	7fe00000 	.word	0x7fe00000
 800d768:	7c9fffff 	.word	0x7c9fffff
 800d76c:	7fefffff 	.word	0x7fefffff

0800d770 <_strtod_r>:
 800d770:	4b01      	ldr	r3, [pc, #4]	; (800d778 <_strtod_r+0x8>)
 800d772:	f7ff ba0d 	b.w	800cb90 <_strtod_l>
 800d776:	bf00      	nop
 800d778:	20000168 	.word	0x20000168

0800d77c <_strtol_l.constprop.0>:
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d782:	d001      	beq.n	800d788 <_strtol_l.constprop.0+0xc>
 800d784:	2b24      	cmp	r3, #36	; 0x24
 800d786:	d906      	bls.n	800d796 <_strtol_l.constprop.0+0x1a>
 800d788:	f7fd fd88 	bl	800b29c <__errno>
 800d78c:	2316      	movs	r3, #22
 800d78e:	6003      	str	r3, [r0, #0]
 800d790:	2000      	movs	r0, #0
 800d792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d796:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d87c <_strtol_l.constprop.0+0x100>
 800d79a:	460d      	mov	r5, r1
 800d79c:	462e      	mov	r6, r5
 800d79e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7a2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d7a6:	f017 0708 	ands.w	r7, r7, #8
 800d7aa:	d1f7      	bne.n	800d79c <_strtol_l.constprop.0+0x20>
 800d7ac:	2c2d      	cmp	r4, #45	; 0x2d
 800d7ae:	d132      	bne.n	800d816 <_strtol_l.constprop.0+0x9a>
 800d7b0:	782c      	ldrb	r4, [r5, #0]
 800d7b2:	2701      	movs	r7, #1
 800d7b4:	1cb5      	adds	r5, r6, #2
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d05b      	beq.n	800d872 <_strtol_l.constprop.0+0xf6>
 800d7ba:	2b10      	cmp	r3, #16
 800d7bc:	d109      	bne.n	800d7d2 <_strtol_l.constprop.0+0x56>
 800d7be:	2c30      	cmp	r4, #48	; 0x30
 800d7c0:	d107      	bne.n	800d7d2 <_strtol_l.constprop.0+0x56>
 800d7c2:	782c      	ldrb	r4, [r5, #0]
 800d7c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d7c8:	2c58      	cmp	r4, #88	; 0x58
 800d7ca:	d14d      	bne.n	800d868 <_strtol_l.constprop.0+0xec>
 800d7cc:	786c      	ldrb	r4, [r5, #1]
 800d7ce:	2310      	movs	r3, #16
 800d7d0:	3502      	adds	r5, #2
 800d7d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d7d6:	f108 38ff 	add.w	r8, r8, #4294967295
 800d7da:	f04f 0e00 	mov.w	lr, #0
 800d7de:	fbb8 f9f3 	udiv	r9, r8, r3
 800d7e2:	4676      	mov	r6, lr
 800d7e4:	fb03 8a19 	mls	sl, r3, r9, r8
 800d7e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d7ec:	f1bc 0f09 	cmp.w	ip, #9
 800d7f0:	d816      	bhi.n	800d820 <_strtol_l.constprop.0+0xa4>
 800d7f2:	4664      	mov	r4, ip
 800d7f4:	42a3      	cmp	r3, r4
 800d7f6:	dd24      	ble.n	800d842 <_strtol_l.constprop.0+0xc6>
 800d7f8:	f1be 3fff 	cmp.w	lr, #4294967295
 800d7fc:	d008      	beq.n	800d810 <_strtol_l.constprop.0+0x94>
 800d7fe:	45b1      	cmp	r9, r6
 800d800:	d31c      	bcc.n	800d83c <_strtol_l.constprop.0+0xc0>
 800d802:	d101      	bne.n	800d808 <_strtol_l.constprop.0+0x8c>
 800d804:	45a2      	cmp	sl, r4
 800d806:	db19      	blt.n	800d83c <_strtol_l.constprop.0+0xc0>
 800d808:	fb06 4603 	mla	r6, r6, r3, r4
 800d80c:	f04f 0e01 	mov.w	lr, #1
 800d810:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d814:	e7e8      	b.n	800d7e8 <_strtol_l.constprop.0+0x6c>
 800d816:	2c2b      	cmp	r4, #43	; 0x2b
 800d818:	bf04      	itt	eq
 800d81a:	782c      	ldrbeq	r4, [r5, #0]
 800d81c:	1cb5      	addeq	r5, r6, #2
 800d81e:	e7ca      	b.n	800d7b6 <_strtol_l.constprop.0+0x3a>
 800d820:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d824:	f1bc 0f19 	cmp.w	ip, #25
 800d828:	d801      	bhi.n	800d82e <_strtol_l.constprop.0+0xb2>
 800d82a:	3c37      	subs	r4, #55	; 0x37
 800d82c:	e7e2      	b.n	800d7f4 <_strtol_l.constprop.0+0x78>
 800d82e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d832:	f1bc 0f19 	cmp.w	ip, #25
 800d836:	d804      	bhi.n	800d842 <_strtol_l.constprop.0+0xc6>
 800d838:	3c57      	subs	r4, #87	; 0x57
 800d83a:	e7db      	b.n	800d7f4 <_strtol_l.constprop.0+0x78>
 800d83c:	f04f 3eff 	mov.w	lr, #4294967295
 800d840:	e7e6      	b.n	800d810 <_strtol_l.constprop.0+0x94>
 800d842:	f1be 3fff 	cmp.w	lr, #4294967295
 800d846:	d105      	bne.n	800d854 <_strtol_l.constprop.0+0xd8>
 800d848:	2322      	movs	r3, #34	; 0x22
 800d84a:	6003      	str	r3, [r0, #0]
 800d84c:	4646      	mov	r6, r8
 800d84e:	b942      	cbnz	r2, 800d862 <_strtol_l.constprop.0+0xe6>
 800d850:	4630      	mov	r0, r6
 800d852:	e79e      	b.n	800d792 <_strtol_l.constprop.0+0x16>
 800d854:	b107      	cbz	r7, 800d858 <_strtol_l.constprop.0+0xdc>
 800d856:	4276      	negs	r6, r6
 800d858:	2a00      	cmp	r2, #0
 800d85a:	d0f9      	beq.n	800d850 <_strtol_l.constprop.0+0xd4>
 800d85c:	f1be 0f00 	cmp.w	lr, #0
 800d860:	d000      	beq.n	800d864 <_strtol_l.constprop.0+0xe8>
 800d862:	1e69      	subs	r1, r5, #1
 800d864:	6011      	str	r1, [r2, #0]
 800d866:	e7f3      	b.n	800d850 <_strtol_l.constprop.0+0xd4>
 800d868:	2430      	movs	r4, #48	; 0x30
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1b1      	bne.n	800d7d2 <_strtol_l.constprop.0+0x56>
 800d86e:	2308      	movs	r3, #8
 800d870:	e7af      	b.n	800d7d2 <_strtol_l.constprop.0+0x56>
 800d872:	2c30      	cmp	r4, #48	; 0x30
 800d874:	d0a5      	beq.n	800d7c2 <_strtol_l.constprop.0+0x46>
 800d876:	230a      	movs	r3, #10
 800d878:	e7ab      	b.n	800d7d2 <_strtol_l.constprop.0+0x56>
 800d87a:	bf00      	nop
 800d87c:	0800ed89 	.word	0x0800ed89

0800d880 <_strtol_r>:
 800d880:	f7ff bf7c 	b.w	800d77c <_strtol_l.constprop.0>

0800d884 <__ssputs_r>:
 800d884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d888:	688e      	ldr	r6, [r1, #8]
 800d88a:	461f      	mov	r7, r3
 800d88c:	42be      	cmp	r6, r7
 800d88e:	680b      	ldr	r3, [r1, #0]
 800d890:	4682      	mov	sl, r0
 800d892:	460c      	mov	r4, r1
 800d894:	4690      	mov	r8, r2
 800d896:	d82c      	bhi.n	800d8f2 <__ssputs_r+0x6e>
 800d898:	898a      	ldrh	r2, [r1, #12]
 800d89a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d89e:	d026      	beq.n	800d8ee <__ssputs_r+0x6a>
 800d8a0:	6965      	ldr	r5, [r4, #20]
 800d8a2:	6909      	ldr	r1, [r1, #16]
 800d8a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8a8:	eba3 0901 	sub.w	r9, r3, r1
 800d8ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8b0:	1c7b      	adds	r3, r7, #1
 800d8b2:	444b      	add	r3, r9
 800d8b4:	106d      	asrs	r5, r5, #1
 800d8b6:	429d      	cmp	r5, r3
 800d8b8:	bf38      	it	cc
 800d8ba:	461d      	movcc	r5, r3
 800d8bc:	0553      	lsls	r3, r2, #21
 800d8be:	d527      	bpl.n	800d910 <__ssputs_r+0x8c>
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	f7fe fc0f 	bl	800c0e4 <_malloc_r>
 800d8c6:	4606      	mov	r6, r0
 800d8c8:	b360      	cbz	r0, 800d924 <__ssputs_r+0xa0>
 800d8ca:	6921      	ldr	r1, [r4, #16]
 800d8cc:	464a      	mov	r2, r9
 800d8ce:	f000 fa1b 	bl	800dd08 <memcpy>
 800d8d2:	89a3      	ldrh	r3, [r4, #12]
 800d8d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8dc:	81a3      	strh	r3, [r4, #12]
 800d8de:	6126      	str	r6, [r4, #16]
 800d8e0:	6165      	str	r5, [r4, #20]
 800d8e2:	444e      	add	r6, r9
 800d8e4:	eba5 0509 	sub.w	r5, r5, r9
 800d8e8:	6026      	str	r6, [r4, #0]
 800d8ea:	60a5      	str	r5, [r4, #8]
 800d8ec:	463e      	mov	r6, r7
 800d8ee:	42be      	cmp	r6, r7
 800d8f0:	d900      	bls.n	800d8f4 <__ssputs_r+0x70>
 800d8f2:	463e      	mov	r6, r7
 800d8f4:	6820      	ldr	r0, [r4, #0]
 800d8f6:	4632      	mov	r2, r6
 800d8f8:	4641      	mov	r1, r8
 800d8fa:	f000 f9c9 	bl	800dc90 <memmove>
 800d8fe:	68a3      	ldr	r3, [r4, #8]
 800d900:	1b9b      	subs	r3, r3, r6
 800d902:	60a3      	str	r3, [r4, #8]
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	4433      	add	r3, r6
 800d908:	6023      	str	r3, [r4, #0]
 800d90a:	2000      	movs	r0, #0
 800d90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d910:	462a      	mov	r2, r5
 800d912:	f000 fdae 	bl	800e472 <_realloc_r>
 800d916:	4606      	mov	r6, r0
 800d918:	2800      	cmp	r0, #0
 800d91a:	d1e0      	bne.n	800d8de <__ssputs_r+0x5a>
 800d91c:	6921      	ldr	r1, [r4, #16]
 800d91e:	4650      	mov	r0, sl
 800d920:	f7fe fb6c 	bl	800bffc <_free_r>
 800d924:	230c      	movs	r3, #12
 800d926:	f8ca 3000 	str.w	r3, [sl]
 800d92a:	89a3      	ldrh	r3, [r4, #12]
 800d92c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d930:	81a3      	strh	r3, [r4, #12]
 800d932:	f04f 30ff 	mov.w	r0, #4294967295
 800d936:	e7e9      	b.n	800d90c <__ssputs_r+0x88>

0800d938 <_svfiprintf_r>:
 800d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93c:	4698      	mov	r8, r3
 800d93e:	898b      	ldrh	r3, [r1, #12]
 800d940:	061b      	lsls	r3, r3, #24
 800d942:	b09d      	sub	sp, #116	; 0x74
 800d944:	4607      	mov	r7, r0
 800d946:	460d      	mov	r5, r1
 800d948:	4614      	mov	r4, r2
 800d94a:	d50e      	bpl.n	800d96a <_svfiprintf_r+0x32>
 800d94c:	690b      	ldr	r3, [r1, #16]
 800d94e:	b963      	cbnz	r3, 800d96a <_svfiprintf_r+0x32>
 800d950:	2140      	movs	r1, #64	; 0x40
 800d952:	f7fe fbc7 	bl	800c0e4 <_malloc_r>
 800d956:	6028      	str	r0, [r5, #0]
 800d958:	6128      	str	r0, [r5, #16]
 800d95a:	b920      	cbnz	r0, 800d966 <_svfiprintf_r+0x2e>
 800d95c:	230c      	movs	r3, #12
 800d95e:	603b      	str	r3, [r7, #0]
 800d960:	f04f 30ff 	mov.w	r0, #4294967295
 800d964:	e0d0      	b.n	800db08 <_svfiprintf_r+0x1d0>
 800d966:	2340      	movs	r3, #64	; 0x40
 800d968:	616b      	str	r3, [r5, #20]
 800d96a:	2300      	movs	r3, #0
 800d96c:	9309      	str	r3, [sp, #36]	; 0x24
 800d96e:	2320      	movs	r3, #32
 800d970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d974:	f8cd 800c 	str.w	r8, [sp, #12]
 800d978:	2330      	movs	r3, #48	; 0x30
 800d97a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800db20 <_svfiprintf_r+0x1e8>
 800d97e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d982:	f04f 0901 	mov.w	r9, #1
 800d986:	4623      	mov	r3, r4
 800d988:	469a      	mov	sl, r3
 800d98a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d98e:	b10a      	cbz	r2, 800d994 <_svfiprintf_r+0x5c>
 800d990:	2a25      	cmp	r2, #37	; 0x25
 800d992:	d1f9      	bne.n	800d988 <_svfiprintf_r+0x50>
 800d994:	ebba 0b04 	subs.w	fp, sl, r4
 800d998:	d00b      	beq.n	800d9b2 <_svfiprintf_r+0x7a>
 800d99a:	465b      	mov	r3, fp
 800d99c:	4622      	mov	r2, r4
 800d99e:	4629      	mov	r1, r5
 800d9a0:	4638      	mov	r0, r7
 800d9a2:	f7ff ff6f 	bl	800d884 <__ssputs_r>
 800d9a6:	3001      	adds	r0, #1
 800d9a8:	f000 80a9 	beq.w	800dafe <_svfiprintf_r+0x1c6>
 800d9ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9ae:	445a      	add	r2, fp
 800d9b0:	9209      	str	r2, [sp, #36]	; 0x24
 800d9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	f000 80a1 	beq.w	800dafe <_svfiprintf_r+0x1c6>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9c6:	f10a 0a01 	add.w	sl, sl, #1
 800d9ca:	9304      	str	r3, [sp, #16]
 800d9cc:	9307      	str	r3, [sp, #28]
 800d9ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9d2:	931a      	str	r3, [sp, #104]	; 0x68
 800d9d4:	4654      	mov	r4, sl
 800d9d6:	2205      	movs	r2, #5
 800d9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9dc:	4850      	ldr	r0, [pc, #320]	; (800db20 <_svfiprintf_r+0x1e8>)
 800d9de:	f7f2 fc17 	bl	8000210 <memchr>
 800d9e2:	9a04      	ldr	r2, [sp, #16]
 800d9e4:	b9d8      	cbnz	r0, 800da1e <_svfiprintf_r+0xe6>
 800d9e6:	06d0      	lsls	r0, r2, #27
 800d9e8:	bf44      	itt	mi
 800d9ea:	2320      	movmi	r3, #32
 800d9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9f0:	0711      	lsls	r1, r2, #28
 800d9f2:	bf44      	itt	mi
 800d9f4:	232b      	movmi	r3, #43	; 0x2b
 800d9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d9fe:	2b2a      	cmp	r3, #42	; 0x2a
 800da00:	d015      	beq.n	800da2e <_svfiprintf_r+0xf6>
 800da02:	9a07      	ldr	r2, [sp, #28]
 800da04:	4654      	mov	r4, sl
 800da06:	2000      	movs	r0, #0
 800da08:	f04f 0c0a 	mov.w	ip, #10
 800da0c:	4621      	mov	r1, r4
 800da0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da12:	3b30      	subs	r3, #48	; 0x30
 800da14:	2b09      	cmp	r3, #9
 800da16:	d94d      	bls.n	800dab4 <_svfiprintf_r+0x17c>
 800da18:	b1b0      	cbz	r0, 800da48 <_svfiprintf_r+0x110>
 800da1a:	9207      	str	r2, [sp, #28]
 800da1c:	e014      	b.n	800da48 <_svfiprintf_r+0x110>
 800da1e:	eba0 0308 	sub.w	r3, r0, r8
 800da22:	fa09 f303 	lsl.w	r3, r9, r3
 800da26:	4313      	orrs	r3, r2
 800da28:	9304      	str	r3, [sp, #16]
 800da2a:	46a2      	mov	sl, r4
 800da2c:	e7d2      	b.n	800d9d4 <_svfiprintf_r+0x9c>
 800da2e:	9b03      	ldr	r3, [sp, #12]
 800da30:	1d19      	adds	r1, r3, #4
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	9103      	str	r1, [sp, #12]
 800da36:	2b00      	cmp	r3, #0
 800da38:	bfbb      	ittet	lt
 800da3a:	425b      	neglt	r3, r3
 800da3c:	f042 0202 	orrlt.w	r2, r2, #2
 800da40:	9307      	strge	r3, [sp, #28]
 800da42:	9307      	strlt	r3, [sp, #28]
 800da44:	bfb8      	it	lt
 800da46:	9204      	strlt	r2, [sp, #16]
 800da48:	7823      	ldrb	r3, [r4, #0]
 800da4a:	2b2e      	cmp	r3, #46	; 0x2e
 800da4c:	d10c      	bne.n	800da68 <_svfiprintf_r+0x130>
 800da4e:	7863      	ldrb	r3, [r4, #1]
 800da50:	2b2a      	cmp	r3, #42	; 0x2a
 800da52:	d134      	bne.n	800dabe <_svfiprintf_r+0x186>
 800da54:	9b03      	ldr	r3, [sp, #12]
 800da56:	1d1a      	adds	r2, r3, #4
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	9203      	str	r2, [sp, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	bfb8      	it	lt
 800da60:	f04f 33ff 	movlt.w	r3, #4294967295
 800da64:	3402      	adds	r4, #2
 800da66:	9305      	str	r3, [sp, #20]
 800da68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800db30 <_svfiprintf_r+0x1f8>
 800da6c:	7821      	ldrb	r1, [r4, #0]
 800da6e:	2203      	movs	r2, #3
 800da70:	4650      	mov	r0, sl
 800da72:	f7f2 fbcd 	bl	8000210 <memchr>
 800da76:	b138      	cbz	r0, 800da88 <_svfiprintf_r+0x150>
 800da78:	9b04      	ldr	r3, [sp, #16]
 800da7a:	eba0 000a 	sub.w	r0, r0, sl
 800da7e:	2240      	movs	r2, #64	; 0x40
 800da80:	4082      	lsls	r2, r0
 800da82:	4313      	orrs	r3, r2
 800da84:	3401      	adds	r4, #1
 800da86:	9304      	str	r3, [sp, #16]
 800da88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da8c:	4825      	ldr	r0, [pc, #148]	; (800db24 <_svfiprintf_r+0x1ec>)
 800da8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da92:	2206      	movs	r2, #6
 800da94:	f7f2 fbbc 	bl	8000210 <memchr>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d038      	beq.n	800db0e <_svfiprintf_r+0x1d6>
 800da9c:	4b22      	ldr	r3, [pc, #136]	; (800db28 <_svfiprintf_r+0x1f0>)
 800da9e:	bb1b      	cbnz	r3, 800dae8 <_svfiprintf_r+0x1b0>
 800daa0:	9b03      	ldr	r3, [sp, #12]
 800daa2:	3307      	adds	r3, #7
 800daa4:	f023 0307 	bic.w	r3, r3, #7
 800daa8:	3308      	adds	r3, #8
 800daaa:	9303      	str	r3, [sp, #12]
 800daac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daae:	4433      	add	r3, r6
 800dab0:	9309      	str	r3, [sp, #36]	; 0x24
 800dab2:	e768      	b.n	800d986 <_svfiprintf_r+0x4e>
 800dab4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dab8:	460c      	mov	r4, r1
 800daba:	2001      	movs	r0, #1
 800dabc:	e7a6      	b.n	800da0c <_svfiprintf_r+0xd4>
 800dabe:	2300      	movs	r3, #0
 800dac0:	3401      	adds	r4, #1
 800dac2:	9305      	str	r3, [sp, #20]
 800dac4:	4619      	mov	r1, r3
 800dac6:	f04f 0c0a 	mov.w	ip, #10
 800daca:	4620      	mov	r0, r4
 800dacc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dad0:	3a30      	subs	r2, #48	; 0x30
 800dad2:	2a09      	cmp	r2, #9
 800dad4:	d903      	bls.n	800dade <_svfiprintf_r+0x1a6>
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d0c6      	beq.n	800da68 <_svfiprintf_r+0x130>
 800dada:	9105      	str	r1, [sp, #20]
 800dadc:	e7c4      	b.n	800da68 <_svfiprintf_r+0x130>
 800dade:	fb0c 2101 	mla	r1, ip, r1, r2
 800dae2:	4604      	mov	r4, r0
 800dae4:	2301      	movs	r3, #1
 800dae6:	e7f0      	b.n	800daca <_svfiprintf_r+0x192>
 800dae8:	ab03      	add	r3, sp, #12
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	462a      	mov	r2, r5
 800daee:	4b0f      	ldr	r3, [pc, #60]	; (800db2c <_svfiprintf_r+0x1f4>)
 800daf0:	a904      	add	r1, sp, #16
 800daf2:	4638      	mov	r0, r7
 800daf4:	f7fc fc84 	bl	800a400 <_printf_float>
 800daf8:	1c42      	adds	r2, r0, #1
 800dafa:	4606      	mov	r6, r0
 800dafc:	d1d6      	bne.n	800daac <_svfiprintf_r+0x174>
 800dafe:	89ab      	ldrh	r3, [r5, #12]
 800db00:	065b      	lsls	r3, r3, #25
 800db02:	f53f af2d 	bmi.w	800d960 <_svfiprintf_r+0x28>
 800db06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db08:	b01d      	add	sp, #116	; 0x74
 800db0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db0e:	ab03      	add	r3, sp, #12
 800db10:	9300      	str	r3, [sp, #0]
 800db12:	462a      	mov	r2, r5
 800db14:	4b05      	ldr	r3, [pc, #20]	; (800db2c <_svfiprintf_r+0x1f4>)
 800db16:	a904      	add	r1, sp, #16
 800db18:	4638      	mov	r0, r7
 800db1a:	f7fc ff15 	bl	800a948 <_printf_i>
 800db1e:	e7eb      	b.n	800daf8 <_svfiprintf_r+0x1c0>
 800db20:	0800ee89 	.word	0x0800ee89
 800db24:	0800ee93 	.word	0x0800ee93
 800db28:	0800a401 	.word	0x0800a401
 800db2c:	0800d885 	.word	0x0800d885
 800db30:	0800ee8f 	.word	0x0800ee8f

0800db34 <__sflush_r>:
 800db34:	898a      	ldrh	r2, [r1, #12]
 800db36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db3a:	4605      	mov	r5, r0
 800db3c:	0710      	lsls	r0, r2, #28
 800db3e:	460c      	mov	r4, r1
 800db40:	d458      	bmi.n	800dbf4 <__sflush_r+0xc0>
 800db42:	684b      	ldr	r3, [r1, #4]
 800db44:	2b00      	cmp	r3, #0
 800db46:	dc05      	bgt.n	800db54 <__sflush_r+0x20>
 800db48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	dc02      	bgt.n	800db54 <__sflush_r+0x20>
 800db4e:	2000      	movs	r0, #0
 800db50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db56:	2e00      	cmp	r6, #0
 800db58:	d0f9      	beq.n	800db4e <__sflush_r+0x1a>
 800db5a:	2300      	movs	r3, #0
 800db5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db60:	682f      	ldr	r7, [r5, #0]
 800db62:	6a21      	ldr	r1, [r4, #32]
 800db64:	602b      	str	r3, [r5, #0]
 800db66:	d032      	beq.n	800dbce <__sflush_r+0x9a>
 800db68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db6a:	89a3      	ldrh	r3, [r4, #12]
 800db6c:	075a      	lsls	r2, r3, #29
 800db6e:	d505      	bpl.n	800db7c <__sflush_r+0x48>
 800db70:	6863      	ldr	r3, [r4, #4]
 800db72:	1ac0      	subs	r0, r0, r3
 800db74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db76:	b10b      	cbz	r3, 800db7c <__sflush_r+0x48>
 800db78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db7a:	1ac0      	subs	r0, r0, r3
 800db7c:	2300      	movs	r3, #0
 800db7e:	4602      	mov	r2, r0
 800db80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db82:	6a21      	ldr	r1, [r4, #32]
 800db84:	4628      	mov	r0, r5
 800db86:	47b0      	blx	r6
 800db88:	1c43      	adds	r3, r0, #1
 800db8a:	89a3      	ldrh	r3, [r4, #12]
 800db8c:	d106      	bne.n	800db9c <__sflush_r+0x68>
 800db8e:	6829      	ldr	r1, [r5, #0]
 800db90:	291d      	cmp	r1, #29
 800db92:	d82b      	bhi.n	800dbec <__sflush_r+0xb8>
 800db94:	4a29      	ldr	r2, [pc, #164]	; (800dc3c <__sflush_r+0x108>)
 800db96:	410a      	asrs	r2, r1
 800db98:	07d6      	lsls	r6, r2, #31
 800db9a:	d427      	bmi.n	800dbec <__sflush_r+0xb8>
 800db9c:	2200      	movs	r2, #0
 800db9e:	6062      	str	r2, [r4, #4]
 800dba0:	04d9      	lsls	r1, r3, #19
 800dba2:	6922      	ldr	r2, [r4, #16]
 800dba4:	6022      	str	r2, [r4, #0]
 800dba6:	d504      	bpl.n	800dbb2 <__sflush_r+0x7e>
 800dba8:	1c42      	adds	r2, r0, #1
 800dbaa:	d101      	bne.n	800dbb0 <__sflush_r+0x7c>
 800dbac:	682b      	ldr	r3, [r5, #0]
 800dbae:	b903      	cbnz	r3, 800dbb2 <__sflush_r+0x7e>
 800dbb0:	6560      	str	r0, [r4, #84]	; 0x54
 800dbb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbb4:	602f      	str	r7, [r5, #0]
 800dbb6:	2900      	cmp	r1, #0
 800dbb8:	d0c9      	beq.n	800db4e <__sflush_r+0x1a>
 800dbba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbbe:	4299      	cmp	r1, r3
 800dbc0:	d002      	beq.n	800dbc8 <__sflush_r+0x94>
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	f7fe fa1a 	bl	800bffc <_free_r>
 800dbc8:	2000      	movs	r0, #0
 800dbca:	6360      	str	r0, [r4, #52]	; 0x34
 800dbcc:	e7c0      	b.n	800db50 <__sflush_r+0x1c>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	47b0      	blx	r6
 800dbd4:	1c41      	adds	r1, r0, #1
 800dbd6:	d1c8      	bne.n	800db6a <__sflush_r+0x36>
 800dbd8:	682b      	ldr	r3, [r5, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d0c5      	beq.n	800db6a <__sflush_r+0x36>
 800dbde:	2b1d      	cmp	r3, #29
 800dbe0:	d001      	beq.n	800dbe6 <__sflush_r+0xb2>
 800dbe2:	2b16      	cmp	r3, #22
 800dbe4:	d101      	bne.n	800dbea <__sflush_r+0xb6>
 800dbe6:	602f      	str	r7, [r5, #0]
 800dbe8:	e7b1      	b.n	800db4e <__sflush_r+0x1a>
 800dbea:	89a3      	ldrh	r3, [r4, #12]
 800dbec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbf0:	81a3      	strh	r3, [r4, #12]
 800dbf2:	e7ad      	b.n	800db50 <__sflush_r+0x1c>
 800dbf4:	690f      	ldr	r7, [r1, #16]
 800dbf6:	2f00      	cmp	r7, #0
 800dbf8:	d0a9      	beq.n	800db4e <__sflush_r+0x1a>
 800dbfa:	0793      	lsls	r3, r2, #30
 800dbfc:	680e      	ldr	r6, [r1, #0]
 800dbfe:	bf08      	it	eq
 800dc00:	694b      	ldreq	r3, [r1, #20]
 800dc02:	600f      	str	r7, [r1, #0]
 800dc04:	bf18      	it	ne
 800dc06:	2300      	movne	r3, #0
 800dc08:	eba6 0807 	sub.w	r8, r6, r7
 800dc0c:	608b      	str	r3, [r1, #8]
 800dc0e:	f1b8 0f00 	cmp.w	r8, #0
 800dc12:	dd9c      	ble.n	800db4e <__sflush_r+0x1a>
 800dc14:	6a21      	ldr	r1, [r4, #32]
 800dc16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc18:	4643      	mov	r3, r8
 800dc1a:	463a      	mov	r2, r7
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	47b0      	blx	r6
 800dc20:	2800      	cmp	r0, #0
 800dc22:	dc06      	bgt.n	800dc32 <__sflush_r+0xfe>
 800dc24:	89a3      	ldrh	r3, [r4, #12]
 800dc26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc2a:	81a3      	strh	r3, [r4, #12]
 800dc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc30:	e78e      	b.n	800db50 <__sflush_r+0x1c>
 800dc32:	4407      	add	r7, r0
 800dc34:	eba8 0800 	sub.w	r8, r8, r0
 800dc38:	e7e9      	b.n	800dc0e <__sflush_r+0xda>
 800dc3a:	bf00      	nop
 800dc3c:	dfbffffe 	.word	0xdfbffffe

0800dc40 <_fflush_r>:
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	690b      	ldr	r3, [r1, #16]
 800dc44:	4605      	mov	r5, r0
 800dc46:	460c      	mov	r4, r1
 800dc48:	b913      	cbnz	r3, 800dc50 <_fflush_r+0x10>
 800dc4a:	2500      	movs	r5, #0
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	bd38      	pop	{r3, r4, r5, pc}
 800dc50:	b118      	cbz	r0, 800dc5a <_fflush_r+0x1a>
 800dc52:	6a03      	ldr	r3, [r0, #32]
 800dc54:	b90b      	cbnz	r3, 800dc5a <_fflush_r+0x1a>
 800dc56:	f7fd fa35 	bl	800b0c4 <__sinit>
 800dc5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d0f3      	beq.n	800dc4a <_fflush_r+0xa>
 800dc62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc64:	07d0      	lsls	r0, r2, #31
 800dc66:	d404      	bmi.n	800dc72 <_fflush_r+0x32>
 800dc68:	0599      	lsls	r1, r3, #22
 800dc6a:	d402      	bmi.n	800dc72 <_fflush_r+0x32>
 800dc6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc6e:	f7fd fb40 	bl	800b2f2 <__retarget_lock_acquire_recursive>
 800dc72:	4628      	mov	r0, r5
 800dc74:	4621      	mov	r1, r4
 800dc76:	f7ff ff5d 	bl	800db34 <__sflush_r>
 800dc7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc7c:	07da      	lsls	r2, r3, #31
 800dc7e:	4605      	mov	r5, r0
 800dc80:	d4e4      	bmi.n	800dc4c <_fflush_r+0xc>
 800dc82:	89a3      	ldrh	r3, [r4, #12]
 800dc84:	059b      	lsls	r3, r3, #22
 800dc86:	d4e1      	bmi.n	800dc4c <_fflush_r+0xc>
 800dc88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc8a:	f7fd fb33 	bl	800b2f4 <__retarget_lock_release_recursive>
 800dc8e:	e7dd      	b.n	800dc4c <_fflush_r+0xc>

0800dc90 <memmove>:
 800dc90:	4288      	cmp	r0, r1
 800dc92:	b510      	push	{r4, lr}
 800dc94:	eb01 0402 	add.w	r4, r1, r2
 800dc98:	d902      	bls.n	800dca0 <memmove+0x10>
 800dc9a:	4284      	cmp	r4, r0
 800dc9c:	4623      	mov	r3, r4
 800dc9e:	d807      	bhi.n	800dcb0 <memmove+0x20>
 800dca0:	1e43      	subs	r3, r0, #1
 800dca2:	42a1      	cmp	r1, r4
 800dca4:	d008      	beq.n	800dcb8 <memmove+0x28>
 800dca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcae:	e7f8      	b.n	800dca2 <memmove+0x12>
 800dcb0:	4402      	add	r2, r0
 800dcb2:	4601      	mov	r1, r0
 800dcb4:	428a      	cmp	r2, r1
 800dcb6:	d100      	bne.n	800dcba <memmove+0x2a>
 800dcb8:	bd10      	pop	{r4, pc}
 800dcba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcc2:	e7f7      	b.n	800dcb4 <memmove+0x24>

0800dcc4 <strncmp>:
 800dcc4:	b510      	push	{r4, lr}
 800dcc6:	b16a      	cbz	r2, 800dce4 <strncmp+0x20>
 800dcc8:	3901      	subs	r1, #1
 800dcca:	1884      	adds	r4, r0, r2
 800dccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d103      	bne.n	800dce0 <strncmp+0x1c>
 800dcd8:	42a0      	cmp	r0, r4
 800dcda:	d001      	beq.n	800dce0 <strncmp+0x1c>
 800dcdc:	2a00      	cmp	r2, #0
 800dcde:	d1f5      	bne.n	800dccc <strncmp+0x8>
 800dce0:	1ad0      	subs	r0, r2, r3
 800dce2:	bd10      	pop	{r4, pc}
 800dce4:	4610      	mov	r0, r2
 800dce6:	e7fc      	b.n	800dce2 <strncmp+0x1e>

0800dce8 <_sbrk_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	4d06      	ldr	r5, [pc, #24]	; (800dd04 <_sbrk_r+0x1c>)
 800dcec:	2300      	movs	r3, #0
 800dcee:	4604      	mov	r4, r0
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	602b      	str	r3, [r5, #0]
 800dcf4:	f7f3 ff5e 	bl	8001bb4 <_sbrk>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d102      	bne.n	800dd02 <_sbrk_r+0x1a>
 800dcfc:	682b      	ldr	r3, [r5, #0]
 800dcfe:	b103      	cbz	r3, 800dd02 <_sbrk_r+0x1a>
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	bd38      	pop	{r3, r4, r5, pc}
 800dd04:	200021c4 	.word	0x200021c4

0800dd08 <memcpy>:
 800dd08:	440a      	add	r2, r1
 800dd0a:	4291      	cmp	r1, r2
 800dd0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd10:	d100      	bne.n	800dd14 <memcpy+0xc>
 800dd12:	4770      	bx	lr
 800dd14:	b510      	push	{r4, lr}
 800dd16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd1e:	4291      	cmp	r1, r2
 800dd20:	d1f9      	bne.n	800dd16 <memcpy+0xe>
 800dd22:	bd10      	pop	{r4, pc}
 800dd24:	0000      	movs	r0, r0
	...

0800dd28 <nan>:
 800dd28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dd30 <nan+0x8>
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	00000000 	.word	0x00000000
 800dd34:	7ff80000 	.word	0x7ff80000

0800dd38 <__assert_func>:
 800dd38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd3a:	4614      	mov	r4, r2
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	4b09      	ldr	r3, [pc, #36]	; (800dd64 <__assert_func+0x2c>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4605      	mov	r5, r0
 800dd44:	68d8      	ldr	r0, [r3, #12]
 800dd46:	b14c      	cbz	r4, 800dd5c <__assert_func+0x24>
 800dd48:	4b07      	ldr	r3, [pc, #28]	; (800dd68 <__assert_func+0x30>)
 800dd4a:	9100      	str	r1, [sp, #0]
 800dd4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd50:	4906      	ldr	r1, [pc, #24]	; (800dd6c <__assert_func+0x34>)
 800dd52:	462b      	mov	r3, r5
 800dd54:	f000 fbca 	bl	800e4ec <fiprintf>
 800dd58:	f000 fbda 	bl	800e510 <abort>
 800dd5c:	4b04      	ldr	r3, [pc, #16]	; (800dd70 <__assert_func+0x38>)
 800dd5e:	461c      	mov	r4, r3
 800dd60:	e7f3      	b.n	800dd4a <__assert_func+0x12>
 800dd62:	bf00      	nop
 800dd64:	20000164 	.word	0x20000164
 800dd68:	0800eea2 	.word	0x0800eea2
 800dd6c:	0800eeaf 	.word	0x0800eeaf
 800dd70:	0800eedd 	.word	0x0800eedd

0800dd74 <_calloc_r>:
 800dd74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd76:	fba1 2402 	umull	r2, r4, r1, r2
 800dd7a:	b94c      	cbnz	r4, 800dd90 <_calloc_r+0x1c>
 800dd7c:	4611      	mov	r1, r2
 800dd7e:	9201      	str	r2, [sp, #4]
 800dd80:	f7fe f9b0 	bl	800c0e4 <_malloc_r>
 800dd84:	9a01      	ldr	r2, [sp, #4]
 800dd86:	4605      	mov	r5, r0
 800dd88:	b930      	cbnz	r0, 800dd98 <_calloc_r+0x24>
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	b003      	add	sp, #12
 800dd8e:	bd30      	pop	{r4, r5, pc}
 800dd90:	220c      	movs	r2, #12
 800dd92:	6002      	str	r2, [r0, #0]
 800dd94:	2500      	movs	r5, #0
 800dd96:	e7f8      	b.n	800dd8a <_calloc_r+0x16>
 800dd98:	4621      	mov	r1, r4
 800dd9a:	f7fd fa2c 	bl	800b1f6 <memset>
 800dd9e:	e7f4      	b.n	800dd8a <_calloc_r+0x16>

0800dda0 <rshift>:
 800dda0:	6903      	ldr	r3, [r0, #16]
 800dda2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dda6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddaa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ddae:	f100 0414 	add.w	r4, r0, #20
 800ddb2:	dd45      	ble.n	800de40 <rshift+0xa0>
 800ddb4:	f011 011f 	ands.w	r1, r1, #31
 800ddb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ddbc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ddc0:	d10c      	bne.n	800dddc <rshift+0x3c>
 800ddc2:	f100 0710 	add.w	r7, r0, #16
 800ddc6:	4629      	mov	r1, r5
 800ddc8:	42b1      	cmp	r1, r6
 800ddca:	d334      	bcc.n	800de36 <rshift+0x96>
 800ddcc:	1a9b      	subs	r3, r3, r2
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	1eea      	subs	r2, r5, #3
 800ddd2:	4296      	cmp	r6, r2
 800ddd4:	bf38      	it	cc
 800ddd6:	2300      	movcc	r3, #0
 800ddd8:	4423      	add	r3, r4
 800ddda:	e015      	b.n	800de08 <rshift+0x68>
 800dddc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dde0:	f1c1 0820 	rsb	r8, r1, #32
 800dde4:	40cf      	lsrs	r7, r1
 800dde6:	f105 0e04 	add.w	lr, r5, #4
 800ddea:	46a1      	mov	r9, r4
 800ddec:	4576      	cmp	r6, lr
 800ddee:	46f4      	mov	ip, lr
 800ddf0:	d815      	bhi.n	800de1e <rshift+0x7e>
 800ddf2:	1a9a      	subs	r2, r3, r2
 800ddf4:	0092      	lsls	r2, r2, #2
 800ddf6:	3a04      	subs	r2, #4
 800ddf8:	3501      	adds	r5, #1
 800ddfa:	42ae      	cmp	r6, r5
 800ddfc:	bf38      	it	cc
 800ddfe:	2200      	movcc	r2, #0
 800de00:	18a3      	adds	r3, r4, r2
 800de02:	50a7      	str	r7, [r4, r2]
 800de04:	b107      	cbz	r7, 800de08 <rshift+0x68>
 800de06:	3304      	adds	r3, #4
 800de08:	1b1a      	subs	r2, r3, r4
 800de0a:	42a3      	cmp	r3, r4
 800de0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800de10:	bf08      	it	eq
 800de12:	2300      	moveq	r3, #0
 800de14:	6102      	str	r2, [r0, #16]
 800de16:	bf08      	it	eq
 800de18:	6143      	streq	r3, [r0, #20]
 800de1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de1e:	f8dc c000 	ldr.w	ip, [ip]
 800de22:	fa0c fc08 	lsl.w	ip, ip, r8
 800de26:	ea4c 0707 	orr.w	r7, ip, r7
 800de2a:	f849 7b04 	str.w	r7, [r9], #4
 800de2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de32:	40cf      	lsrs	r7, r1
 800de34:	e7da      	b.n	800ddec <rshift+0x4c>
 800de36:	f851 cb04 	ldr.w	ip, [r1], #4
 800de3a:	f847 cf04 	str.w	ip, [r7, #4]!
 800de3e:	e7c3      	b.n	800ddc8 <rshift+0x28>
 800de40:	4623      	mov	r3, r4
 800de42:	e7e1      	b.n	800de08 <rshift+0x68>

0800de44 <__hexdig_fun>:
 800de44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800de48:	2b09      	cmp	r3, #9
 800de4a:	d802      	bhi.n	800de52 <__hexdig_fun+0xe>
 800de4c:	3820      	subs	r0, #32
 800de4e:	b2c0      	uxtb	r0, r0
 800de50:	4770      	bx	lr
 800de52:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800de56:	2b05      	cmp	r3, #5
 800de58:	d801      	bhi.n	800de5e <__hexdig_fun+0x1a>
 800de5a:	3847      	subs	r0, #71	; 0x47
 800de5c:	e7f7      	b.n	800de4e <__hexdig_fun+0xa>
 800de5e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800de62:	2b05      	cmp	r3, #5
 800de64:	d801      	bhi.n	800de6a <__hexdig_fun+0x26>
 800de66:	3827      	subs	r0, #39	; 0x27
 800de68:	e7f1      	b.n	800de4e <__hexdig_fun+0xa>
 800de6a:	2000      	movs	r0, #0
 800de6c:	4770      	bx	lr
	...

0800de70 <__gethex>:
 800de70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de74:	4617      	mov	r7, r2
 800de76:	680a      	ldr	r2, [r1, #0]
 800de78:	b085      	sub	sp, #20
 800de7a:	f102 0b02 	add.w	fp, r2, #2
 800de7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800de82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de86:	4681      	mov	r9, r0
 800de88:	468a      	mov	sl, r1
 800de8a:	9302      	str	r3, [sp, #8]
 800de8c:	32fe      	adds	r2, #254	; 0xfe
 800de8e:	eb02 030b 	add.w	r3, r2, fp
 800de92:	46d8      	mov	r8, fp
 800de94:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800de98:	9301      	str	r3, [sp, #4]
 800de9a:	2830      	cmp	r0, #48	; 0x30
 800de9c:	d0f7      	beq.n	800de8e <__gethex+0x1e>
 800de9e:	f7ff ffd1 	bl	800de44 <__hexdig_fun>
 800dea2:	4604      	mov	r4, r0
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d138      	bne.n	800df1a <__gethex+0xaa>
 800dea8:	49a7      	ldr	r1, [pc, #668]	; (800e148 <__gethex+0x2d8>)
 800deaa:	2201      	movs	r2, #1
 800deac:	4640      	mov	r0, r8
 800deae:	f7ff ff09 	bl	800dcc4 <strncmp>
 800deb2:	4606      	mov	r6, r0
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d169      	bne.n	800df8c <__gethex+0x11c>
 800deb8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800debc:	465d      	mov	r5, fp
 800debe:	f7ff ffc1 	bl	800de44 <__hexdig_fun>
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d064      	beq.n	800df90 <__gethex+0x120>
 800dec6:	465a      	mov	r2, fp
 800dec8:	7810      	ldrb	r0, [r2, #0]
 800deca:	2830      	cmp	r0, #48	; 0x30
 800decc:	4690      	mov	r8, r2
 800dece:	f102 0201 	add.w	r2, r2, #1
 800ded2:	d0f9      	beq.n	800dec8 <__gethex+0x58>
 800ded4:	f7ff ffb6 	bl	800de44 <__hexdig_fun>
 800ded8:	2301      	movs	r3, #1
 800deda:	fab0 f480 	clz	r4, r0
 800dede:	0964      	lsrs	r4, r4, #5
 800dee0:	465e      	mov	r6, fp
 800dee2:	9301      	str	r3, [sp, #4]
 800dee4:	4642      	mov	r2, r8
 800dee6:	4615      	mov	r5, r2
 800dee8:	3201      	adds	r2, #1
 800deea:	7828      	ldrb	r0, [r5, #0]
 800deec:	f7ff ffaa 	bl	800de44 <__hexdig_fun>
 800def0:	2800      	cmp	r0, #0
 800def2:	d1f8      	bne.n	800dee6 <__gethex+0x76>
 800def4:	4994      	ldr	r1, [pc, #592]	; (800e148 <__gethex+0x2d8>)
 800def6:	2201      	movs	r2, #1
 800def8:	4628      	mov	r0, r5
 800defa:	f7ff fee3 	bl	800dcc4 <strncmp>
 800defe:	b978      	cbnz	r0, 800df20 <__gethex+0xb0>
 800df00:	b946      	cbnz	r6, 800df14 <__gethex+0xa4>
 800df02:	1c6e      	adds	r6, r5, #1
 800df04:	4632      	mov	r2, r6
 800df06:	4615      	mov	r5, r2
 800df08:	3201      	adds	r2, #1
 800df0a:	7828      	ldrb	r0, [r5, #0]
 800df0c:	f7ff ff9a 	bl	800de44 <__hexdig_fun>
 800df10:	2800      	cmp	r0, #0
 800df12:	d1f8      	bne.n	800df06 <__gethex+0x96>
 800df14:	1b73      	subs	r3, r6, r5
 800df16:	009e      	lsls	r6, r3, #2
 800df18:	e004      	b.n	800df24 <__gethex+0xb4>
 800df1a:	2400      	movs	r4, #0
 800df1c:	4626      	mov	r6, r4
 800df1e:	e7e1      	b.n	800dee4 <__gethex+0x74>
 800df20:	2e00      	cmp	r6, #0
 800df22:	d1f7      	bne.n	800df14 <__gethex+0xa4>
 800df24:	782b      	ldrb	r3, [r5, #0]
 800df26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800df2a:	2b50      	cmp	r3, #80	; 0x50
 800df2c:	d13d      	bne.n	800dfaa <__gethex+0x13a>
 800df2e:	786b      	ldrb	r3, [r5, #1]
 800df30:	2b2b      	cmp	r3, #43	; 0x2b
 800df32:	d02f      	beq.n	800df94 <__gethex+0x124>
 800df34:	2b2d      	cmp	r3, #45	; 0x2d
 800df36:	d031      	beq.n	800df9c <__gethex+0x12c>
 800df38:	1c69      	adds	r1, r5, #1
 800df3a:	f04f 0b00 	mov.w	fp, #0
 800df3e:	7808      	ldrb	r0, [r1, #0]
 800df40:	f7ff ff80 	bl	800de44 <__hexdig_fun>
 800df44:	1e42      	subs	r2, r0, #1
 800df46:	b2d2      	uxtb	r2, r2
 800df48:	2a18      	cmp	r2, #24
 800df4a:	d82e      	bhi.n	800dfaa <__gethex+0x13a>
 800df4c:	f1a0 0210 	sub.w	r2, r0, #16
 800df50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df54:	f7ff ff76 	bl	800de44 <__hexdig_fun>
 800df58:	f100 3cff 	add.w	ip, r0, #4294967295
 800df5c:	fa5f fc8c 	uxtb.w	ip, ip
 800df60:	f1bc 0f18 	cmp.w	ip, #24
 800df64:	d91d      	bls.n	800dfa2 <__gethex+0x132>
 800df66:	f1bb 0f00 	cmp.w	fp, #0
 800df6a:	d000      	beq.n	800df6e <__gethex+0xfe>
 800df6c:	4252      	negs	r2, r2
 800df6e:	4416      	add	r6, r2
 800df70:	f8ca 1000 	str.w	r1, [sl]
 800df74:	b1dc      	cbz	r4, 800dfae <__gethex+0x13e>
 800df76:	9b01      	ldr	r3, [sp, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	bf14      	ite	ne
 800df7c:	f04f 0800 	movne.w	r8, #0
 800df80:	f04f 0806 	moveq.w	r8, #6
 800df84:	4640      	mov	r0, r8
 800df86:	b005      	add	sp, #20
 800df88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df8c:	4645      	mov	r5, r8
 800df8e:	4626      	mov	r6, r4
 800df90:	2401      	movs	r4, #1
 800df92:	e7c7      	b.n	800df24 <__gethex+0xb4>
 800df94:	f04f 0b00 	mov.w	fp, #0
 800df98:	1ca9      	adds	r1, r5, #2
 800df9a:	e7d0      	b.n	800df3e <__gethex+0xce>
 800df9c:	f04f 0b01 	mov.w	fp, #1
 800dfa0:	e7fa      	b.n	800df98 <__gethex+0x128>
 800dfa2:	230a      	movs	r3, #10
 800dfa4:	fb03 0002 	mla	r0, r3, r2, r0
 800dfa8:	e7d0      	b.n	800df4c <__gethex+0xdc>
 800dfaa:	4629      	mov	r1, r5
 800dfac:	e7e0      	b.n	800df70 <__gethex+0x100>
 800dfae:	eba5 0308 	sub.w	r3, r5, r8
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	4621      	mov	r1, r4
 800dfb6:	2b07      	cmp	r3, #7
 800dfb8:	dc0a      	bgt.n	800dfd0 <__gethex+0x160>
 800dfba:	4648      	mov	r0, r9
 800dfbc:	f7fe f91e 	bl	800c1fc <_Balloc>
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	b940      	cbnz	r0, 800dfd6 <__gethex+0x166>
 800dfc4:	4b61      	ldr	r3, [pc, #388]	; (800e14c <__gethex+0x2dc>)
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	21e4      	movs	r1, #228	; 0xe4
 800dfca:	4861      	ldr	r0, [pc, #388]	; (800e150 <__gethex+0x2e0>)
 800dfcc:	f7ff feb4 	bl	800dd38 <__assert_func>
 800dfd0:	3101      	adds	r1, #1
 800dfd2:	105b      	asrs	r3, r3, #1
 800dfd4:	e7ef      	b.n	800dfb6 <__gethex+0x146>
 800dfd6:	f100 0a14 	add.w	sl, r0, #20
 800dfda:	2300      	movs	r3, #0
 800dfdc:	495a      	ldr	r1, [pc, #360]	; (800e148 <__gethex+0x2d8>)
 800dfde:	f8cd a004 	str.w	sl, [sp, #4]
 800dfe2:	469b      	mov	fp, r3
 800dfe4:	45a8      	cmp	r8, r5
 800dfe6:	d342      	bcc.n	800e06e <__gethex+0x1fe>
 800dfe8:	9801      	ldr	r0, [sp, #4]
 800dfea:	f840 bb04 	str.w	fp, [r0], #4
 800dfee:	eba0 000a 	sub.w	r0, r0, sl
 800dff2:	1080      	asrs	r0, r0, #2
 800dff4:	6120      	str	r0, [r4, #16]
 800dff6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800dffa:	4658      	mov	r0, fp
 800dffc:	f7fe f9f0 	bl	800c3e0 <__hi0bits>
 800e000:	683d      	ldr	r5, [r7, #0]
 800e002:	eba8 0000 	sub.w	r0, r8, r0
 800e006:	42a8      	cmp	r0, r5
 800e008:	dd59      	ble.n	800e0be <__gethex+0x24e>
 800e00a:	eba0 0805 	sub.w	r8, r0, r5
 800e00e:	4641      	mov	r1, r8
 800e010:	4620      	mov	r0, r4
 800e012:	f7fe fd7f 	bl	800cb14 <__any_on>
 800e016:	4683      	mov	fp, r0
 800e018:	b1b8      	cbz	r0, 800e04a <__gethex+0x1da>
 800e01a:	f108 33ff 	add.w	r3, r8, #4294967295
 800e01e:	1159      	asrs	r1, r3, #5
 800e020:	f003 021f 	and.w	r2, r3, #31
 800e024:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e028:	f04f 0b01 	mov.w	fp, #1
 800e02c:	fa0b f202 	lsl.w	r2, fp, r2
 800e030:	420a      	tst	r2, r1
 800e032:	d00a      	beq.n	800e04a <__gethex+0x1da>
 800e034:	455b      	cmp	r3, fp
 800e036:	dd06      	ble.n	800e046 <__gethex+0x1d6>
 800e038:	f1a8 0102 	sub.w	r1, r8, #2
 800e03c:	4620      	mov	r0, r4
 800e03e:	f7fe fd69 	bl	800cb14 <__any_on>
 800e042:	2800      	cmp	r0, #0
 800e044:	d138      	bne.n	800e0b8 <__gethex+0x248>
 800e046:	f04f 0b02 	mov.w	fp, #2
 800e04a:	4641      	mov	r1, r8
 800e04c:	4620      	mov	r0, r4
 800e04e:	f7ff fea7 	bl	800dda0 <rshift>
 800e052:	4446      	add	r6, r8
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	42b3      	cmp	r3, r6
 800e058:	da41      	bge.n	800e0de <__gethex+0x26e>
 800e05a:	4621      	mov	r1, r4
 800e05c:	4648      	mov	r0, r9
 800e05e:	f7fe f90d 	bl	800c27c <_Bfree>
 800e062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e064:	2300      	movs	r3, #0
 800e066:	6013      	str	r3, [r2, #0]
 800e068:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e06c:	e78a      	b.n	800df84 <__gethex+0x114>
 800e06e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e072:	2a2e      	cmp	r2, #46	; 0x2e
 800e074:	d014      	beq.n	800e0a0 <__gethex+0x230>
 800e076:	2b20      	cmp	r3, #32
 800e078:	d106      	bne.n	800e088 <__gethex+0x218>
 800e07a:	9b01      	ldr	r3, [sp, #4]
 800e07c:	f843 bb04 	str.w	fp, [r3], #4
 800e080:	f04f 0b00 	mov.w	fp, #0
 800e084:	9301      	str	r3, [sp, #4]
 800e086:	465b      	mov	r3, fp
 800e088:	7828      	ldrb	r0, [r5, #0]
 800e08a:	9303      	str	r3, [sp, #12]
 800e08c:	f7ff feda 	bl	800de44 <__hexdig_fun>
 800e090:	9b03      	ldr	r3, [sp, #12]
 800e092:	f000 000f 	and.w	r0, r0, #15
 800e096:	4098      	lsls	r0, r3
 800e098:	ea4b 0b00 	orr.w	fp, fp, r0
 800e09c:	3304      	adds	r3, #4
 800e09e:	e7a1      	b.n	800dfe4 <__gethex+0x174>
 800e0a0:	45a8      	cmp	r8, r5
 800e0a2:	d8e8      	bhi.n	800e076 <__gethex+0x206>
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	9303      	str	r3, [sp, #12]
 800e0aa:	f7ff fe0b 	bl	800dcc4 <strncmp>
 800e0ae:	4926      	ldr	r1, [pc, #152]	; (800e148 <__gethex+0x2d8>)
 800e0b0:	9b03      	ldr	r3, [sp, #12]
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d1df      	bne.n	800e076 <__gethex+0x206>
 800e0b6:	e795      	b.n	800dfe4 <__gethex+0x174>
 800e0b8:	f04f 0b03 	mov.w	fp, #3
 800e0bc:	e7c5      	b.n	800e04a <__gethex+0x1da>
 800e0be:	da0b      	bge.n	800e0d8 <__gethex+0x268>
 800e0c0:	eba5 0800 	sub.w	r8, r5, r0
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	4642      	mov	r2, r8
 800e0c8:	4648      	mov	r0, r9
 800e0ca:	f7fe faf1 	bl	800c6b0 <__lshift>
 800e0ce:	eba6 0608 	sub.w	r6, r6, r8
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	f100 0a14 	add.w	sl, r0, #20
 800e0d8:	f04f 0b00 	mov.w	fp, #0
 800e0dc:	e7ba      	b.n	800e054 <__gethex+0x1e4>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	42b3      	cmp	r3, r6
 800e0e2:	dd73      	ble.n	800e1cc <__gethex+0x35c>
 800e0e4:	1b9e      	subs	r6, r3, r6
 800e0e6:	42b5      	cmp	r5, r6
 800e0e8:	dc34      	bgt.n	800e154 <__gethex+0x2e4>
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d023      	beq.n	800e138 <__gethex+0x2c8>
 800e0f0:	2b03      	cmp	r3, #3
 800e0f2:	d025      	beq.n	800e140 <__gethex+0x2d0>
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d115      	bne.n	800e124 <__gethex+0x2b4>
 800e0f8:	42b5      	cmp	r5, r6
 800e0fa:	d113      	bne.n	800e124 <__gethex+0x2b4>
 800e0fc:	2d01      	cmp	r5, #1
 800e0fe:	d10b      	bne.n	800e118 <__gethex+0x2a8>
 800e100:	9a02      	ldr	r2, [sp, #8]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6013      	str	r3, [r2, #0]
 800e106:	2301      	movs	r3, #1
 800e108:	6123      	str	r3, [r4, #16]
 800e10a:	f8ca 3000 	str.w	r3, [sl]
 800e10e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e110:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e114:	601c      	str	r4, [r3, #0]
 800e116:	e735      	b.n	800df84 <__gethex+0x114>
 800e118:	1e69      	subs	r1, r5, #1
 800e11a:	4620      	mov	r0, r4
 800e11c:	f7fe fcfa 	bl	800cb14 <__any_on>
 800e120:	2800      	cmp	r0, #0
 800e122:	d1ed      	bne.n	800e100 <__gethex+0x290>
 800e124:	4621      	mov	r1, r4
 800e126:	4648      	mov	r0, r9
 800e128:	f7fe f8a8 	bl	800c27c <_Bfree>
 800e12c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e12e:	2300      	movs	r3, #0
 800e130:	6013      	str	r3, [r2, #0]
 800e132:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e136:	e725      	b.n	800df84 <__gethex+0x114>
 800e138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d1f2      	bne.n	800e124 <__gethex+0x2b4>
 800e13e:	e7df      	b.n	800e100 <__gethex+0x290>
 800e140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e142:	2b00      	cmp	r3, #0
 800e144:	d1dc      	bne.n	800e100 <__gethex+0x290>
 800e146:	e7ed      	b.n	800e124 <__gethex+0x2b4>
 800e148:	0800ed34 	.word	0x0800ed34
 800e14c:	0800ebc9 	.word	0x0800ebc9
 800e150:	0800eede 	.word	0x0800eede
 800e154:	f106 38ff 	add.w	r8, r6, #4294967295
 800e158:	f1bb 0f00 	cmp.w	fp, #0
 800e15c:	d133      	bne.n	800e1c6 <__gethex+0x356>
 800e15e:	f1b8 0f00 	cmp.w	r8, #0
 800e162:	d004      	beq.n	800e16e <__gethex+0x2fe>
 800e164:	4641      	mov	r1, r8
 800e166:	4620      	mov	r0, r4
 800e168:	f7fe fcd4 	bl	800cb14 <__any_on>
 800e16c:	4683      	mov	fp, r0
 800e16e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e172:	2301      	movs	r3, #1
 800e174:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e178:	f008 081f 	and.w	r8, r8, #31
 800e17c:	fa03 f308 	lsl.w	r3, r3, r8
 800e180:	4213      	tst	r3, r2
 800e182:	4631      	mov	r1, r6
 800e184:	4620      	mov	r0, r4
 800e186:	bf18      	it	ne
 800e188:	f04b 0b02 	orrne.w	fp, fp, #2
 800e18c:	1bad      	subs	r5, r5, r6
 800e18e:	f7ff fe07 	bl	800dda0 <rshift>
 800e192:	687e      	ldr	r6, [r7, #4]
 800e194:	f04f 0802 	mov.w	r8, #2
 800e198:	f1bb 0f00 	cmp.w	fp, #0
 800e19c:	d04a      	beq.n	800e234 <__gethex+0x3c4>
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	d016      	beq.n	800e1d2 <__gethex+0x362>
 800e1a4:	2b03      	cmp	r3, #3
 800e1a6:	d018      	beq.n	800e1da <__gethex+0x36a>
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d109      	bne.n	800e1c0 <__gethex+0x350>
 800e1ac:	f01b 0f02 	tst.w	fp, #2
 800e1b0:	d006      	beq.n	800e1c0 <__gethex+0x350>
 800e1b2:	f8da 3000 	ldr.w	r3, [sl]
 800e1b6:	ea4b 0b03 	orr.w	fp, fp, r3
 800e1ba:	f01b 0f01 	tst.w	fp, #1
 800e1be:	d10f      	bne.n	800e1e0 <__gethex+0x370>
 800e1c0:	f048 0810 	orr.w	r8, r8, #16
 800e1c4:	e036      	b.n	800e234 <__gethex+0x3c4>
 800e1c6:	f04f 0b01 	mov.w	fp, #1
 800e1ca:	e7d0      	b.n	800e16e <__gethex+0x2fe>
 800e1cc:	f04f 0801 	mov.w	r8, #1
 800e1d0:	e7e2      	b.n	800e198 <__gethex+0x328>
 800e1d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1d4:	f1c3 0301 	rsb	r3, r3, #1
 800e1d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d0ef      	beq.n	800e1c0 <__gethex+0x350>
 800e1e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e1e4:	f104 0214 	add.w	r2, r4, #20
 800e1e8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	4694      	mov	ip, r2
 800e1f6:	f852 1b04 	ldr.w	r1, [r2], #4
 800e1fa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e1fe:	d01e      	beq.n	800e23e <__gethex+0x3ce>
 800e200:	3101      	adds	r1, #1
 800e202:	f8cc 1000 	str.w	r1, [ip]
 800e206:	f1b8 0f02 	cmp.w	r8, #2
 800e20a:	f104 0214 	add.w	r2, r4, #20
 800e20e:	d13d      	bne.n	800e28c <__gethex+0x41c>
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	3b01      	subs	r3, #1
 800e214:	42ab      	cmp	r3, r5
 800e216:	d10b      	bne.n	800e230 <__gethex+0x3c0>
 800e218:	1169      	asrs	r1, r5, #5
 800e21a:	2301      	movs	r3, #1
 800e21c:	f005 051f 	and.w	r5, r5, #31
 800e220:	fa03 f505 	lsl.w	r5, r3, r5
 800e224:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e228:	421d      	tst	r5, r3
 800e22a:	bf18      	it	ne
 800e22c:	f04f 0801 	movne.w	r8, #1
 800e230:	f048 0820 	orr.w	r8, r8, #32
 800e234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e236:	601c      	str	r4, [r3, #0]
 800e238:	9b02      	ldr	r3, [sp, #8]
 800e23a:	601e      	str	r6, [r3, #0]
 800e23c:	e6a2      	b.n	800df84 <__gethex+0x114>
 800e23e:	4290      	cmp	r0, r2
 800e240:	f842 3c04 	str.w	r3, [r2, #-4]
 800e244:	d8d6      	bhi.n	800e1f4 <__gethex+0x384>
 800e246:	68a2      	ldr	r2, [r4, #8]
 800e248:	4593      	cmp	fp, r2
 800e24a:	db17      	blt.n	800e27c <__gethex+0x40c>
 800e24c:	6861      	ldr	r1, [r4, #4]
 800e24e:	4648      	mov	r0, r9
 800e250:	3101      	adds	r1, #1
 800e252:	f7fd ffd3 	bl	800c1fc <_Balloc>
 800e256:	4682      	mov	sl, r0
 800e258:	b918      	cbnz	r0, 800e262 <__gethex+0x3f2>
 800e25a:	4b1b      	ldr	r3, [pc, #108]	; (800e2c8 <__gethex+0x458>)
 800e25c:	4602      	mov	r2, r0
 800e25e:	2184      	movs	r1, #132	; 0x84
 800e260:	e6b3      	b.n	800dfca <__gethex+0x15a>
 800e262:	6922      	ldr	r2, [r4, #16]
 800e264:	3202      	adds	r2, #2
 800e266:	f104 010c 	add.w	r1, r4, #12
 800e26a:	0092      	lsls	r2, r2, #2
 800e26c:	300c      	adds	r0, #12
 800e26e:	f7ff fd4b 	bl	800dd08 <memcpy>
 800e272:	4621      	mov	r1, r4
 800e274:	4648      	mov	r0, r9
 800e276:	f7fe f801 	bl	800c27c <_Bfree>
 800e27a:	4654      	mov	r4, sl
 800e27c:	6922      	ldr	r2, [r4, #16]
 800e27e:	1c51      	adds	r1, r2, #1
 800e280:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e284:	6121      	str	r1, [r4, #16]
 800e286:	2101      	movs	r1, #1
 800e288:	6151      	str	r1, [r2, #20]
 800e28a:	e7bc      	b.n	800e206 <__gethex+0x396>
 800e28c:	6921      	ldr	r1, [r4, #16]
 800e28e:	4559      	cmp	r1, fp
 800e290:	dd0b      	ble.n	800e2aa <__gethex+0x43a>
 800e292:	2101      	movs	r1, #1
 800e294:	4620      	mov	r0, r4
 800e296:	f7ff fd83 	bl	800dda0 <rshift>
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	3601      	adds	r6, #1
 800e29e:	42b3      	cmp	r3, r6
 800e2a0:	f6ff aedb 	blt.w	800e05a <__gethex+0x1ea>
 800e2a4:	f04f 0801 	mov.w	r8, #1
 800e2a8:	e7c2      	b.n	800e230 <__gethex+0x3c0>
 800e2aa:	f015 051f 	ands.w	r5, r5, #31
 800e2ae:	d0f9      	beq.n	800e2a4 <__gethex+0x434>
 800e2b0:	9b01      	ldr	r3, [sp, #4]
 800e2b2:	441a      	add	r2, r3
 800e2b4:	f1c5 0520 	rsb	r5, r5, #32
 800e2b8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e2bc:	f7fe f890 	bl	800c3e0 <__hi0bits>
 800e2c0:	42a8      	cmp	r0, r5
 800e2c2:	dbe6      	blt.n	800e292 <__gethex+0x422>
 800e2c4:	e7ee      	b.n	800e2a4 <__gethex+0x434>
 800e2c6:	bf00      	nop
 800e2c8:	0800ebc9 	.word	0x0800ebc9

0800e2cc <L_shift>:
 800e2cc:	f1c2 0208 	rsb	r2, r2, #8
 800e2d0:	0092      	lsls	r2, r2, #2
 800e2d2:	b570      	push	{r4, r5, r6, lr}
 800e2d4:	f1c2 0620 	rsb	r6, r2, #32
 800e2d8:	6843      	ldr	r3, [r0, #4]
 800e2da:	6804      	ldr	r4, [r0, #0]
 800e2dc:	fa03 f506 	lsl.w	r5, r3, r6
 800e2e0:	432c      	orrs	r4, r5
 800e2e2:	40d3      	lsrs	r3, r2
 800e2e4:	6004      	str	r4, [r0, #0]
 800e2e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e2ea:	4288      	cmp	r0, r1
 800e2ec:	d3f4      	bcc.n	800e2d8 <L_shift+0xc>
 800e2ee:	bd70      	pop	{r4, r5, r6, pc}

0800e2f0 <__match>:
 800e2f0:	b530      	push	{r4, r5, lr}
 800e2f2:	6803      	ldr	r3, [r0, #0]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2fa:	b914      	cbnz	r4, 800e302 <__match+0x12>
 800e2fc:	6003      	str	r3, [r0, #0]
 800e2fe:	2001      	movs	r0, #1
 800e300:	bd30      	pop	{r4, r5, pc}
 800e302:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e306:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e30a:	2d19      	cmp	r5, #25
 800e30c:	bf98      	it	ls
 800e30e:	3220      	addls	r2, #32
 800e310:	42a2      	cmp	r2, r4
 800e312:	d0f0      	beq.n	800e2f6 <__match+0x6>
 800e314:	2000      	movs	r0, #0
 800e316:	e7f3      	b.n	800e300 <__match+0x10>

0800e318 <__hexnan>:
 800e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31c:	680b      	ldr	r3, [r1, #0]
 800e31e:	6801      	ldr	r1, [r0, #0]
 800e320:	115e      	asrs	r6, r3, #5
 800e322:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e326:	f013 031f 	ands.w	r3, r3, #31
 800e32a:	b087      	sub	sp, #28
 800e32c:	bf18      	it	ne
 800e32e:	3604      	addne	r6, #4
 800e330:	2500      	movs	r5, #0
 800e332:	1f37      	subs	r7, r6, #4
 800e334:	4682      	mov	sl, r0
 800e336:	4690      	mov	r8, r2
 800e338:	9301      	str	r3, [sp, #4]
 800e33a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e33e:	46b9      	mov	r9, r7
 800e340:	463c      	mov	r4, r7
 800e342:	9502      	str	r5, [sp, #8]
 800e344:	46ab      	mov	fp, r5
 800e346:	784a      	ldrb	r2, [r1, #1]
 800e348:	1c4b      	adds	r3, r1, #1
 800e34a:	9303      	str	r3, [sp, #12]
 800e34c:	b342      	cbz	r2, 800e3a0 <__hexnan+0x88>
 800e34e:	4610      	mov	r0, r2
 800e350:	9105      	str	r1, [sp, #20]
 800e352:	9204      	str	r2, [sp, #16]
 800e354:	f7ff fd76 	bl	800de44 <__hexdig_fun>
 800e358:	2800      	cmp	r0, #0
 800e35a:	d14f      	bne.n	800e3fc <__hexnan+0xe4>
 800e35c:	9a04      	ldr	r2, [sp, #16]
 800e35e:	9905      	ldr	r1, [sp, #20]
 800e360:	2a20      	cmp	r2, #32
 800e362:	d818      	bhi.n	800e396 <__hexnan+0x7e>
 800e364:	9b02      	ldr	r3, [sp, #8]
 800e366:	459b      	cmp	fp, r3
 800e368:	dd13      	ble.n	800e392 <__hexnan+0x7a>
 800e36a:	454c      	cmp	r4, r9
 800e36c:	d206      	bcs.n	800e37c <__hexnan+0x64>
 800e36e:	2d07      	cmp	r5, #7
 800e370:	dc04      	bgt.n	800e37c <__hexnan+0x64>
 800e372:	462a      	mov	r2, r5
 800e374:	4649      	mov	r1, r9
 800e376:	4620      	mov	r0, r4
 800e378:	f7ff ffa8 	bl	800e2cc <L_shift>
 800e37c:	4544      	cmp	r4, r8
 800e37e:	d950      	bls.n	800e422 <__hexnan+0x10a>
 800e380:	2300      	movs	r3, #0
 800e382:	f1a4 0904 	sub.w	r9, r4, #4
 800e386:	f844 3c04 	str.w	r3, [r4, #-4]
 800e38a:	f8cd b008 	str.w	fp, [sp, #8]
 800e38e:	464c      	mov	r4, r9
 800e390:	461d      	mov	r5, r3
 800e392:	9903      	ldr	r1, [sp, #12]
 800e394:	e7d7      	b.n	800e346 <__hexnan+0x2e>
 800e396:	2a29      	cmp	r2, #41	; 0x29
 800e398:	d155      	bne.n	800e446 <__hexnan+0x12e>
 800e39a:	3102      	adds	r1, #2
 800e39c:	f8ca 1000 	str.w	r1, [sl]
 800e3a0:	f1bb 0f00 	cmp.w	fp, #0
 800e3a4:	d04f      	beq.n	800e446 <__hexnan+0x12e>
 800e3a6:	454c      	cmp	r4, r9
 800e3a8:	d206      	bcs.n	800e3b8 <__hexnan+0xa0>
 800e3aa:	2d07      	cmp	r5, #7
 800e3ac:	dc04      	bgt.n	800e3b8 <__hexnan+0xa0>
 800e3ae:	462a      	mov	r2, r5
 800e3b0:	4649      	mov	r1, r9
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f7ff ff8a 	bl	800e2cc <L_shift>
 800e3b8:	4544      	cmp	r4, r8
 800e3ba:	d934      	bls.n	800e426 <__hexnan+0x10e>
 800e3bc:	f1a8 0204 	sub.w	r2, r8, #4
 800e3c0:	4623      	mov	r3, r4
 800e3c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e3c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e3ca:	429f      	cmp	r7, r3
 800e3cc:	d2f9      	bcs.n	800e3c2 <__hexnan+0xaa>
 800e3ce:	1b3b      	subs	r3, r7, r4
 800e3d0:	f023 0303 	bic.w	r3, r3, #3
 800e3d4:	3304      	adds	r3, #4
 800e3d6:	3e03      	subs	r6, #3
 800e3d8:	3401      	adds	r4, #1
 800e3da:	42a6      	cmp	r6, r4
 800e3dc:	bf38      	it	cc
 800e3de:	2304      	movcc	r3, #4
 800e3e0:	4443      	add	r3, r8
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f843 2b04 	str.w	r2, [r3], #4
 800e3e8:	429f      	cmp	r7, r3
 800e3ea:	d2fb      	bcs.n	800e3e4 <__hexnan+0xcc>
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	b91b      	cbnz	r3, 800e3f8 <__hexnan+0xe0>
 800e3f0:	4547      	cmp	r7, r8
 800e3f2:	d126      	bne.n	800e442 <__hexnan+0x12a>
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	603b      	str	r3, [r7, #0]
 800e3f8:	2005      	movs	r0, #5
 800e3fa:	e025      	b.n	800e448 <__hexnan+0x130>
 800e3fc:	3501      	adds	r5, #1
 800e3fe:	2d08      	cmp	r5, #8
 800e400:	f10b 0b01 	add.w	fp, fp, #1
 800e404:	dd06      	ble.n	800e414 <__hexnan+0xfc>
 800e406:	4544      	cmp	r4, r8
 800e408:	d9c3      	bls.n	800e392 <__hexnan+0x7a>
 800e40a:	2300      	movs	r3, #0
 800e40c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e410:	2501      	movs	r5, #1
 800e412:	3c04      	subs	r4, #4
 800e414:	6822      	ldr	r2, [r4, #0]
 800e416:	f000 000f 	and.w	r0, r0, #15
 800e41a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e41e:	6020      	str	r0, [r4, #0]
 800e420:	e7b7      	b.n	800e392 <__hexnan+0x7a>
 800e422:	2508      	movs	r5, #8
 800e424:	e7b5      	b.n	800e392 <__hexnan+0x7a>
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d0df      	beq.n	800e3ec <__hexnan+0xd4>
 800e42c:	f1c3 0320 	rsb	r3, r3, #32
 800e430:	f04f 32ff 	mov.w	r2, #4294967295
 800e434:	40da      	lsrs	r2, r3
 800e436:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e43a:	4013      	ands	r3, r2
 800e43c:	f846 3c04 	str.w	r3, [r6, #-4]
 800e440:	e7d4      	b.n	800e3ec <__hexnan+0xd4>
 800e442:	3f04      	subs	r7, #4
 800e444:	e7d2      	b.n	800e3ec <__hexnan+0xd4>
 800e446:	2004      	movs	r0, #4
 800e448:	b007      	add	sp, #28
 800e44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e44e <__ascii_mbtowc>:
 800e44e:	b082      	sub	sp, #8
 800e450:	b901      	cbnz	r1, 800e454 <__ascii_mbtowc+0x6>
 800e452:	a901      	add	r1, sp, #4
 800e454:	b142      	cbz	r2, 800e468 <__ascii_mbtowc+0x1a>
 800e456:	b14b      	cbz	r3, 800e46c <__ascii_mbtowc+0x1e>
 800e458:	7813      	ldrb	r3, [r2, #0]
 800e45a:	600b      	str	r3, [r1, #0]
 800e45c:	7812      	ldrb	r2, [r2, #0]
 800e45e:	1e10      	subs	r0, r2, #0
 800e460:	bf18      	it	ne
 800e462:	2001      	movne	r0, #1
 800e464:	b002      	add	sp, #8
 800e466:	4770      	bx	lr
 800e468:	4610      	mov	r0, r2
 800e46a:	e7fb      	b.n	800e464 <__ascii_mbtowc+0x16>
 800e46c:	f06f 0001 	mvn.w	r0, #1
 800e470:	e7f8      	b.n	800e464 <__ascii_mbtowc+0x16>

0800e472 <_realloc_r>:
 800e472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e476:	4680      	mov	r8, r0
 800e478:	4614      	mov	r4, r2
 800e47a:	460e      	mov	r6, r1
 800e47c:	b921      	cbnz	r1, 800e488 <_realloc_r+0x16>
 800e47e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e482:	4611      	mov	r1, r2
 800e484:	f7fd be2e 	b.w	800c0e4 <_malloc_r>
 800e488:	b92a      	cbnz	r2, 800e496 <_realloc_r+0x24>
 800e48a:	f7fd fdb7 	bl	800bffc <_free_r>
 800e48e:	4625      	mov	r5, r4
 800e490:	4628      	mov	r0, r5
 800e492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e496:	f000 f842 	bl	800e51e <_malloc_usable_size_r>
 800e49a:	4284      	cmp	r4, r0
 800e49c:	4607      	mov	r7, r0
 800e49e:	d802      	bhi.n	800e4a6 <_realloc_r+0x34>
 800e4a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e4a4:	d812      	bhi.n	800e4cc <_realloc_r+0x5a>
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	4640      	mov	r0, r8
 800e4aa:	f7fd fe1b 	bl	800c0e4 <_malloc_r>
 800e4ae:	4605      	mov	r5, r0
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	d0ed      	beq.n	800e490 <_realloc_r+0x1e>
 800e4b4:	42bc      	cmp	r4, r7
 800e4b6:	4622      	mov	r2, r4
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	bf28      	it	cs
 800e4bc:	463a      	movcs	r2, r7
 800e4be:	f7ff fc23 	bl	800dd08 <memcpy>
 800e4c2:	4631      	mov	r1, r6
 800e4c4:	4640      	mov	r0, r8
 800e4c6:	f7fd fd99 	bl	800bffc <_free_r>
 800e4ca:	e7e1      	b.n	800e490 <_realloc_r+0x1e>
 800e4cc:	4635      	mov	r5, r6
 800e4ce:	e7df      	b.n	800e490 <_realloc_r+0x1e>

0800e4d0 <__ascii_wctomb>:
 800e4d0:	b149      	cbz	r1, 800e4e6 <__ascii_wctomb+0x16>
 800e4d2:	2aff      	cmp	r2, #255	; 0xff
 800e4d4:	bf85      	ittet	hi
 800e4d6:	238a      	movhi	r3, #138	; 0x8a
 800e4d8:	6003      	strhi	r3, [r0, #0]
 800e4da:	700a      	strbls	r2, [r1, #0]
 800e4dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800e4e0:	bf98      	it	ls
 800e4e2:	2001      	movls	r0, #1
 800e4e4:	4770      	bx	lr
 800e4e6:	4608      	mov	r0, r1
 800e4e8:	4770      	bx	lr
	...

0800e4ec <fiprintf>:
 800e4ec:	b40e      	push	{r1, r2, r3}
 800e4ee:	b503      	push	{r0, r1, lr}
 800e4f0:	4601      	mov	r1, r0
 800e4f2:	ab03      	add	r3, sp, #12
 800e4f4:	4805      	ldr	r0, [pc, #20]	; (800e50c <fiprintf+0x20>)
 800e4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4fa:	6800      	ldr	r0, [r0, #0]
 800e4fc:	9301      	str	r3, [sp, #4]
 800e4fe:	f000 f83f 	bl	800e580 <_vfiprintf_r>
 800e502:	b002      	add	sp, #8
 800e504:	f85d eb04 	ldr.w	lr, [sp], #4
 800e508:	b003      	add	sp, #12
 800e50a:	4770      	bx	lr
 800e50c:	20000164 	.word	0x20000164

0800e510 <abort>:
 800e510:	b508      	push	{r3, lr}
 800e512:	2006      	movs	r0, #6
 800e514:	f000 fa0c 	bl	800e930 <raise>
 800e518:	2001      	movs	r0, #1
 800e51a:	f7f3 fad3 	bl	8001ac4 <_exit>

0800e51e <_malloc_usable_size_r>:
 800e51e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e522:	1f18      	subs	r0, r3, #4
 800e524:	2b00      	cmp	r3, #0
 800e526:	bfbc      	itt	lt
 800e528:	580b      	ldrlt	r3, [r1, r0]
 800e52a:	18c0      	addlt	r0, r0, r3
 800e52c:	4770      	bx	lr

0800e52e <__sfputc_r>:
 800e52e:	6893      	ldr	r3, [r2, #8]
 800e530:	3b01      	subs	r3, #1
 800e532:	2b00      	cmp	r3, #0
 800e534:	b410      	push	{r4}
 800e536:	6093      	str	r3, [r2, #8]
 800e538:	da08      	bge.n	800e54c <__sfputc_r+0x1e>
 800e53a:	6994      	ldr	r4, [r2, #24]
 800e53c:	42a3      	cmp	r3, r4
 800e53e:	db01      	blt.n	800e544 <__sfputc_r+0x16>
 800e540:	290a      	cmp	r1, #10
 800e542:	d103      	bne.n	800e54c <__sfputc_r+0x1e>
 800e544:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e548:	f000 b934 	b.w	800e7b4 <__swbuf_r>
 800e54c:	6813      	ldr	r3, [r2, #0]
 800e54e:	1c58      	adds	r0, r3, #1
 800e550:	6010      	str	r0, [r2, #0]
 800e552:	7019      	strb	r1, [r3, #0]
 800e554:	4608      	mov	r0, r1
 800e556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <__sfputs_r>:
 800e55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55e:	4606      	mov	r6, r0
 800e560:	460f      	mov	r7, r1
 800e562:	4614      	mov	r4, r2
 800e564:	18d5      	adds	r5, r2, r3
 800e566:	42ac      	cmp	r4, r5
 800e568:	d101      	bne.n	800e56e <__sfputs_r+0x12>
 800e56a:	2000      	movs	r0, #0
 800e56c:	e007      	b.n	800e57e <__sfputs_r+0x22>
 800e56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e572:	463a      	mov	r2, r7
 800e574:	4630      	mov	r0, r6
 800e576:	f7ff ffda 	bl	800e52e <__sfputc_r>
 800e57a:	1c43      	adds	r3, r0, #1
 800e57c:	d1f3      	bne.n	800e566 <__sfputs_r+0xa>
 800e57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e580 <_vfiprintf_r>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	460d      	mov	r5, r1
 800e586:	b09d      	sub	sp, #116	; 0x74
 800e588:	4614      	mov	r4, r2
 800e58a:	4698      	mov	r8, r3
 800e58c:	4606      	mov	r6, r0
 800e58e:	b118      	cbz	r0, 800e598 <_vfiprintf_r+0x18>
 800e590:	6a03      	ldr	r3, [r0, #32]
 800e592:	b90b      	cbnz	r3, 800e598 <_vfiprintf_r+0x18>
 800e594:	f7fc fd96 	bl	800b0c4 <__sinit>
 800e598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e59a:	07d9      	lsls	r1, r3, #31
 800e59c:	d405      	bmi.n	800e5aa <_vfiprintf_r+0x2a>
 800e59e:	89ab      	ldrh	r3, [r5, #12]
 800e5a0:	059a      	lsls	r2, r3, #22
 800e5a2:	d402      	bmi.n	800e5aa <_vfiprintf_r+0x2a>
 800e5a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5a6:	f7fc fea4 	bl	800b2f2 <__retarget_lock_acquire_recursive>
 800e5aa:	89ab      	ldrh	r3, [r5, #12]
 800e5ac:	071b      	lsls	r3, r3, #28
 800e5ae:	d501      	bpl.n	800e5b4 <_vfiprintf_r+0x34>
 800e5b0:	692b      	ldr	r3, [r5, #16]
 800e5b2:	b99b      	cbnz	r3, 800e5dc <_vfiprintf_r+0x5c>
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	f000 f93a 	bl	800e830 <__swsetup_r>
 800e5bc:	b170      	cbz	r0, 800e5dc <_vfiprintf_r+0x5c>
 800e5be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5c0:	07dc      	lsls	r4, r3, #31
 800e5c2:	d504      	bpl.n	800e5ce <_vfiprintf_r+0x4e>
 800e5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5c8:	b01d      	add	sp, #116	; 0x74
 800e5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ce:	89ab      	ldrh	r3, [r5, #12]
 800e5d0:	0598      	lsls	r0, r3, #22
 800e5d2:	d4f7      	bmi.n	800e5c4 <_vfiprintf_r+0x44>
 800e5d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5d6:	f7fc fe8d 	bl	800b2f4 <__retarget_lock_release_recursive>
 800e5da:	e7f3      	b.n	800e5c4 <_vfiprintf_r+0x44>
 800e5dc:	2300      	movs	r3, #0
 800e5de:	9309      	str	r3, [sp, #36]	; 0x24
 800e5e0:	2320      	movs	r3, #32
 800e5e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5ea:	2330      	movs	r3, #48	; 0x30
 800e5ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e7a0 <_vfiprintf_r+0x220>
 800e5f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5f4:	f04f 0901 	mov.w	r9, #1
 800e5f8:	4623      	mov	r3, r4
 800e5fa:	469a      	mov	sl, r3
 800e5fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e600:	b10a      	cbz	r2, 800e606 <_vfiprintf_r+0x86>
 800e602:	2a25      	cmp	r2, #37	; 0x25
 800e604:	d1f9      	bne.n	800e5fa <_vfiprintf_r+0x7a>
 800e606:	ebba 0b04 	subs.w	fp, sl, r4
 800e60a:	d00b      	beq.n	800e624 <_vfiprintf_r+0xa4>
 800e60c:	465b      	mov	r3, fp
 800e60e:	4622      	mov	r2, r4
 800e610:	4629      	mov	r1, r5
 800e612:	4630      	mov	r0, r6
 800e614:	f7ff ffa2 	bl	800e55c <__sfputs_r>
 800e618:	3001      	adds	r0, #1
 800e61a:	f000 80a9 	beq.w	800e770 <_vfiprintf_r+0x1f0>
 800e61e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e620:	445a      	add	r2, fp
 800e622:	9209      	str	r2, [sp, #36]	; 0x24
 800e624:	f89a 3000 	ldrb.w	r3, [sl]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	f000 80a1 	beq.w	800e770 <_vfiprintf_r+0x1f0>
 800e62e:	2300      	movs	r3, #0
 800e630:	f04f 32ff 	mov.w	r2, #4294967295
 800e634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e638:	f10a 0a01 	add.w	sl, sl, #1
 800e63c:	9304      	str	r3, [sp, #16]
 800e63e:	9307      	str	r3, [sp, #28]
 800e640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e644:	931a      	str	r3, [sp, #104]	; 0x68
 800e646:	4654      	mov	r4, sl
 800e648:	2205      	movs	r2, #5
 800e64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e64e:	4854      	ldr	r0, [pc, #336]	; (800e7a0 <_vfiprintf_r+0x220>)
 800e650:	f7f1 fdde 	bl	8000210 <memchr>
 800e654:	9a04      	ldr	r2, [sp, #16]
 800e656:	b9d8      	cbnz	r0, 800e690 <_vfiprintf_r+0x110>
 800e658:	06d1      	lsls	r1, r2, #27
 800e65a:	bf44      	itt	mi
 800e65c:	2320      	movmi	r3, #32
 800e65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e662:	0713      	lsls	r3, r2, #28
 800e664:	bf44      	itt	mi
 800e666:	232b      	movmi	r3, #43	; 0x2b
 800e668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e66c:	f89a 3000 	ldrb.w	r3, [sl]
 800e670:	2b2a      	cmp	r3, #42	; 0x2a
 800e672:	d015      	beq.n	800e6a0 <_vfiprintf_r+0x120>
 800e674:	9a07      	ldr	r2, [sp, #28]
 800e676:	4654      	mov	r4, sl
 800e678:	2000      	movs	r0, #0
 800e67a:	f04f 0c0a 	mov.w	ip, #10
 800e67e:	4621      	mov	r1, r4
 800e680:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e684:	3b30      	subs	r3, #48	; 0x30
 800e686:	2b09      	cmp	r3, #9
 800e688:	d94d      	bls.n	800e726 <_vfiprintf_r+0x1a6>
 800e68a:	b1b0      	cbz	r0, 800e6ba <_vfiprintf_r+0x13a>
 800e68c:	9207      	str	r2, [sp, #28]
 800e68e:	e014      	b.n	800e6ba <_vfiprintf_r+0x13a>
 800e690:	eba0 0308 	sub.w	r3, r0, r8
 800e694:	fa09 f303 	lsl.w	r3, r9, r3
 800e698:	4313      	orrs	r3, r2
 800e69a:	9304      	str	r3, [sp, #16]
 800e69c:	46a2      	mov	sl, r4
 800e69e:	e7d2      	b.n	800e646 <_vfiprintf_r+0xc6>
 800e6a0:	9b03      	ldr	r3, [sp, #12]
 800e6a2:	1d19      	adds	r1, r3, #4
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	9103      	str	r1, [sp, #12]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	bfbb      	ittet	lt
 800e6ac:	425b      	neglt	r3, r3
 800e6ae:	f042 0202 	orrlt.w	r2, r2, #2
 800e6b2:	9307      	strge	r3, [sp, #28]
 800e6b4:	9307      	strlt	r3, [sp, #28]
 800e6b6:	bfb8      	it	lt
 800e6b8:	9204      	strlt	r2, [sp, #16]
 800e6ba:	7823      	ldrb	r3, [r4, #0]
 800e6bc:	2b2e      	cmp	r3, #46	; 0x2e
 800e6be:	d10c      	bne.n	800e6da <_vfiprintf_r+0x15a>
 800e6c0:	7863      	ldrb	r3, [r4, #1]
 800e6c2:	2b2a      	cmp	r3, #42	; 0x2a
 800e6c4:	d134      	bne.n	800e730 <_vfiprintf_r+0x1b0>
 800e6c6:	9b03      	ldr	r3, [sp, #12]
 800e6c8:	1d1a      	adds	r2, r3, #4
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	9203      	str	r2, [sp, #12]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	bfb8      	it	lt
 800e6d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6d6:	3402      	adds	r4, #2
 800e6d8:	9305      	str	r3, [sp, #20]
 800e6da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e7b0 <_vfiprintf_r+0x230>
 800e6de:	7821      	ldrb	r1, [r4, #0]
 800e6e0:	2203      	movs	r2, #3
 800e6e2:	4650      	mov	r0, sl
 800e6e4:	f7f1 fd94 	bl	8000210 <memchr>
 800e6e8:	b138      	cbz	r0, 800e6fa <_vfiprintf_r+0x17a>
 800e6ea:	9b04      	ldr	r3, [sp, #16]
 800e6ec:	eba0 000a 	sub.w	r0, r0, sl
 800e6f0:	2240      	movs	r2, #64	; 0x40
 800e6f2:	4082      	lsls	r2, r0
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	3401      	adds	r4, #1
 800e6f8:	9304      	str	r3, [sp, #16]
 800e6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6fe:	4829      	ldr	r0, [pc, #164]	; (800e7a4 <_vfiprintf_r+0x224>)
 800e700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e704:	2206      	movs	r2, #6
 800e706:	f7f1 fd83 	bl	8000210 <memchr>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d03f      	beq.n	800e78e <_vfiprintf_r+0x20e>
 800e70e:	4b26      	ldr	r3, [pc, #152]	; (800e7a8 <_vfiprintf_r+0x228>)
 800e710:	bb1b      	cbnz	r3, 800e75a <_vfiprintf_r+0x1da>
 800e712:	9b03      	ldr	r3, [sp, #12]
 800e714:	3307      	adds	r3, #7
 800e716:	f023 0307 	bic.w	r3, r3, #7
 800e71a:	3308      	adds	r3, #8
 800e71c:	9303      	str	r3, [sp, #12]
 800e71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e720:	443b      	add	r3, r7
 800e722:	9309      	str	r3, [sp, #36]	; 0x24
 800e724:	e768      	b.n	800e5f8 <_vfiprintf_r+0x78>
 800e726:	fb0c 3202 	mla	r2, ip, r2, r3
 800e72a:	460c      	mov	r4, r1
 800e72c:	2001      	movs	r0, #1
 800e72e:	e7a6      	b.n	800e67e <_vfiprintf_r+0xfe>
 800e730:	2300      	movs	r3, #0
 800e732:	3401      	adds	r4, #1
 800e734:	9305      	str	r3, [sp, #20]
 800e736:	4619      	mov	r1, r3
 800e738:	f04f 0c0a 	mov.w	ip, #10
 800e73c:	4620      	mov	r0, r4
 800e73e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e742:	3a30      	subs	r2, #48	; 0x30
 800e744:	2a09      	cmp	r2, #9
 800e746:	d903      	bls.n	800e750 <_vfiprintf_r+0x1d0>
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d0c6      	beq.n	800e6da <_vfiprintf_r+0x15a>
 800e74c:	9105      	str	r1, [sp, #20]
 800e74e:	e7c4      	b.n	800e6da <_vfiprintf_r+0x15a>
 800e750:	fb0c 2101 	mla	r1, ip, r1, r2
 800e754:	4604      	mov	r4, r0
 800e756:	2301      	movs	r3, #1
 800e758:	e7f0      	b.n	800e73c <_vfiprintf_r+0x1bc>
 800e75a:	ab03      	add	r3, sp, #12
 800e75c:	9300      	str	r3, [sp, #0]
 800e75e:	462a      	mov	r2, r5
 800e760:	4b12      	ldr	r3, [pc, #72]	; (800e7ac <_vfiprintf_r+0x22c>)
 800e762:	a904      	add	r1, sp, #16
 800e764:	4630      	mov	r0, r6
 800e766:	f7fb fe4b 	bl	800a400 <_printf_float>
 800e76a:	4607      	mov	r7, r0
 800e76c:	1c78      	adds	r0, r7, #1
 800e76e:	d1d6      	bne.n	800e71e <_vfiprintf_r+0x19e>
 800e770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e772:	07d9      	lsls	r1, r3, #31
 800e774:	d405      	bmi.n	800e782 <_vfiprintf_r+0x202>
 800e776:	89ab      	ldrh	r3, [r5, #12]
 800e778:	059a      	lsls	r2, r3, #22
 800e77a:	d402      	bmi.n	800e782 <_vfiprintf_r+0x202>
 800e77c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e77e:	f7fc fdb9 	bl	800b2f4 <__retarget_lock_release_recursive>
 800e782:	89ab      	ldrh	r3, [r5, #12]
 800e784:	065b      	lsls	r3, r3, #25
 800e786:	f53f af1d 	bmi.w	800e5c4 <_vfiprintf_r+0x44>
 800e78a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e78c:	e71c      	b.n	800e5c8 <_vfiprintf_r+0x48>
 800e78e:	ab03      	add	r3, sp, #12
 800e790:	9300      	str	r3, [sp, #0]
 800e792:	462a      	mov	r2, r5
 800e794:	4b05      	ldr	r3, [pc, #20]	; (800e7ac <_vfiprintf_r+0x22c>)
 800e796:	a904      	add	r1, sp, #16
 800e798:	4630      	mov	r0, r6
 800e79a:	f7fc f8d5 	bl	800a948 <_printf_i>
 800e79e:	e7e4      	b.n	800e76a <_vfiprintf_r+0x1ea>
 800e7a0:	0800ee89 	.word	0x0800ee89
 800e7a4:	0800ee93 	.word	0x0800ee93
 800e7a8:	0800a401 	.word	0x0800a401
 800e7ac:	0800e55d 	.word	0x0800e55d
 800e7b0:	0800ee8f 	.word	0x0800ee8f

0800e7b4 <__swbuf_r>:
 800e7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b6:	460e      	mov	r6, r1
 800e7b8:	4614      	mov	r4, r2
 800e7ba:	4605      	mov	r5, r0
 800e7bc:	b118      	cbz	r0, 800e7c6 <__swbuf_r+0x12>
 800e7be:	6a03      	ldr	r3, [r0, #32]
 800e7c0:	b90b      	cbnz	r3, 800e7c6 <__swbuf_r+0x12>
 800e7c2:	f7fc fc7f 	bl	800b0c4 <__sinit>
 800e7c6:	69a3      	ldr	r3, [r4, #24]
 800e7c8:	60a3      	str	r3, [r4, #8]
 800e7ca:	89a3      	ldrh	r3, [r4, #12]
 800e7cc:	071a      	lsls	r2, r3, #28
 800e7ce:	d525      	bpl.n	800e81c <__swbuf_r+0x68>
 800e7d0:	6923      	ldr	r3, [r4, #16]
 800e7d2:	b31b      	cbz	r3, 800e81c <__swbuf_r+0x68>
 800e7d4:	6823      	ldr	r3, [r4, #0]
 800e7d6:	6922      	ldr	r2, [r4, #16]
 800e7d8:	1a98      	subs	r0, r3, r2
 800e7da:	6963      	ldr	r3, [r4, #20]
 800e7dc:	b2f6      	uxtb	r6, r6
 800e7de:	4283      	cmp	r3, r0
 800e7e0:	4637      	mov	r7, r6
 800e7e2:	dc04      	bgt.n	800e7ee <__swbuf_r+0x3a>
 800e7e4:	4621      	mov	r1, r4
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	f7ff fa2a 	bl	800dc40 <_fflush_r>
 800e7ec:	b9e0      	cbnz	r0, 800e828 <__swbuf_r+0x74>
 800e7ee:	68a3      	ldr	r3, [r4, #8]
 800e7f0:	3b01      	subs	r3, #1
 800e7f2:	60a3      	str	r3, [r4, #8]
 800e7f4:	6823      	ldr	r3, [r4, #0]
 800e7f6:	1c5a      	adds	r2, r3, #1
 800e7f8:	6022      	str	r2, [r4, #0]
 800e7fa:	701e      	strb	r6, [r3, #0]
 800e7fc:	6962      	ldr	r2, [r4, #20]
 800e7fe:	1c43      	adds	r3, r0, #1
 800e800:	429a      	cmp	r2, r3
 800e802:	d004      	beq.n	800e80e <__swbuf_r+0x5a>
 800e804:	89a3      	ldrh	r3, [r4, #12]
 800e806:	07db      	lsls	r3, r3, #31
 800e808:	d506      	bpl.n	800e818 <__swbuf_r+0x64>
 800e80a:	2e0a      	cmp	r6, #10
 800e80c:	d104      	bne.n	800e818 <__swbuf_r+0x64>
 800e80e:	4621      	mov	r1, r4
 800e810:	4628      	mov	r0, r5
 800e812:	f7ff fa15 	bl	800dc40 <_fflush_r>
 800e816:	b938      	cbnz	r0, 800e828 <__swbuf_r+0x74>
 800e818:	4638      	mov	r0, r7
 800e81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e81c:	4621      	mov	r1, r4
 800e81e:	4628      	mov	r0, r5
 800e820:	f000 f806 	bl	800e830 <__swsetup_r>
 800e824:	2800      	cmp	r0, #0
 800e826:	d0d5      	beq.n	800e7d4 <__swbuf_r+0x20>
 800e828:	f04f 37ff 	mov.w	r7, #4294967295
 800e82c:	e7f4      	b.n	800e818 <__swbuf_r+0x64>
	...

0800e830 <__swsetup_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	4b2a      	ldr	r3, [pc, #168]	; (800e8dc <__swsetup_r+0xac>)
 800e834:	4605      	mov	r5, r0
 800e836:	6818      	ldr	r0, [r3, #0]
 800e838:	460c      	mov	r4, r1
 800e83a:	b118      	cbz	r0, 800e844 <__swsetup_r+0x14>
 800e83c:	6a03      	ldr	r3, [r0, #32]
 800e83e:	b90b      	cbnz	r3, 800e844 <__swsetup_r+0x14>
 800e840:	f7fc fc40 	bl	800b0c4 <__sinit>
 800e844:	89a3      	ldrh	r3, [r4, #12]
 800e846:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e84a:	0718      	lsls	r0, r3, #28
 800e84c:	d422      	bmi.n	800e894 <__swsetup_r+0x64>
 800e84e:	06d9      	lsls	r1, r3, #27
 800e850:	d407      	bmi.n	800e862 <__swsetup_r+0x32>
 800e852:	2309      	movs	r3, #9
 800e854:	602b      	str	r3, [r5, #0]
 800e856:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e85a:	81a3      	strh	r3, [r4, #12]
 800e85c:	f04f 30ff 	mov.w	r0, #4294967295
 800e860:	e034      	b.n	800e8cc <__swsetup_r+0x9c>
 800e862:	0758      	lsls	r0, r3, #29
 800e864:	d512      	bpl.n	800e88c <__swsetup_r+0x5c>
 800e866:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e868:	b141      	cbz	r1, 800e87c <__swsetup_r+0x4c>
 800e86a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e86e:	4299      	cmp	r1, r3
 800e870:	d002      	beq.n	800e878 <__swsetup_r+0x48>
 800e872:	4628      	mov	r0, r5
 800e874:	f7fd fbc2 	bl	800bffc <_free_r>
 800e878:	2300      	movs	r3, #0
 800e87a:	6363      	str	r3, [r4, #52]	; 0x34
 800e87c:	89a3      	ldrh	r3, [r4, #12]
 800e87e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e882:	81a3      	strh	r3, [r4, #12]
 800e884:	2300      	movs	r3, #0
 800e886:	6063      	str	r3, [r4, #4]
 800e888:	6923      	ldr	r3, [r4, #16]
 800e88a:	6023      	str	r3, [r4, #0]
 800e88c:	89a3      	ldrh	r3, [r4, #12]
 800e88e:	f043 0308 	orr.w	r3, r3, #8
 800e892:	81a3      	strh	r3, [r4, #12]
 800e894:	6923      	ldr	r3, [r4, #16]
 800e896:	b94b      	cbnz	r3, 800e8ac <__swsetup_r+0x7c>
 800e898:	89a3      	ldrh	r3, [r4, #12]
 800e89a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e89e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8a2:	d003      	beq.n	800e8ac <__swsetup_r+0x7c>
 800e8a4:	4621      	mov	r1, r4
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	f000 f884 	bl	800e9b4 <__smakebuf_r>
 800e8ac:	89a0      	ldrh	r0, [r4, #12]
 800e8ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8b2:	f010 0301 	ands.w	r3, r0, #1
 800e8b6:	d00a      	beq.n	800e8ce <__swsetup_r+0x9e>
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	60a3      	str	r3, [r4, #8]
 800e8bc:	6963      	ldr	r3, [r4, #20]
 800e8be:	425b      	negs	r3, r3
 800e8c0:	61a3      	str	r3, [r4, #24]
 800e8c2:	6923      	ldr	r3, [r4, #16]
 800e8c4:	b943      	cbnz	r3, 800e8d8 <__swsetup_r+0xa8>
 800e8c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e8ca:	d1c4      	bne.n	800e856 <__swsetup_r+0x26>
 800e8cc:	bd38      	pop	{r3, r4, r5, pc}
 800e8ce:	0781      	lsls	r1, r0, #30
 800e8d0:	bf58      	it	pl
 800e8d2:	6963      	ldrpl	r3, [r4, #20]
 800e8d4:	60a3      	str	r3, [r4, #8]
 800e8d6:	e7f4      	b.n	800e8c2 <__swsetup_r+0x92>
 800e8d8:	2000      	movs	r0, #0
 800e8da:	e7f7      	b.n	800e8cc <__swsetup_r+0x9c>
 800e8dc:	20000164 	.word	0x20000164

0800e8e0 <_raise_r>:
 800e8e0:	291f      	cmp	r1, #31
 800e8e2:	b538      	push	{r3, r4, r5, lr}
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	460d      	mov	r5, r1
 800e8e8:	d904      	bls.n	800e8f4 <_raise_r+0x14>
 800e8ea:	2316      	movs	r3, #22
 800e8ec:	6003      	str	r3, [r0, #0]
 800e8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f2:	bd38      	pop	{r3, r4, r5, pc}
 800e8f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e8f6:	b112      	cbz	r2, 800e8fe <_raise_r+0x1e>
 800e8f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8fc:	b94b      	cbnz	r3, 800e912 <_raise_r+0x32>
 800e8fe:	4620      	mov	r0, r4
 800e900:	f000 f830 	bl	800e964 <_getpid_r>
 800e904:	462a      	mov	r2, r5
 800e906:	4601      	mov	r1, r0
 800e908:	4620      	mov	r0, r4
 800e90a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e90e:	f000 b817 	b.w	800e940 <_kill_r>
 800e912:	2b01      	cmp	r3, #1
 800e914:	d00a      	beq.n	800e92c <_raise_r+0x4c>
 800e916:	1c59      	adds	r1, r3, #1
 800e918:	d103      	bne.n	800e922 <_raise_r+0x42>
 800e91a:	2316      	movs	r3, #22
 800e91c:	6003      	str	r3, [r0, #0]
 800e91e:	2001      	movs	r0, #1
 800e920:	e7e7      	b.n	800e8f2 <_raise_r+0x12>
 800e922:	2400      	movs	r4, #0
 800e924:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e928:	4628      	mov	r0, r5
 800e92a:	4798      	blx	r3
 800e92c:	2000      	movs	r0, #0
 800e92e:	e7e0      	b.n	800e8f2 <_raise_r+0x12>

0800e930 <raise>:
 800e930:	4b02      	ldr	r3, [pc, #8]	; (800e93c <raise+0xc>)
 800e932:	4601      	mov	r1, r0
 800e934:	6818      	ldr	r0, [r3, #0]
 800e936:	f7ff bfd3 	b.w	800e8e0 <_raise_r>
 800e93a:	bf00      	nop
 800e93c:	20000164 	.word	0x20000164

0800e940 <_kill_r>:
 800e940:	b538      	push	{r3, r4, r5, lr}
 800e942:	4d07      	ldr	r5, [pc, #28]	; (800e960 <_kill_r+0x20>)
 800e944:	2300      	movs	r3, #0
 800e946:	4604      	mov	r4, r0
 800e948:	4608      	mov	r0, r1
 800e94a:	4611      	mov	r1, r2
 800e94c:	602b      	str	r3, [r5, #0]
 800e94e:	f7f3 f8a9 	bl	8001aa4 <_kill>
 800e952:	1c43      	adds	r3, r0, #1
 800e954:	d102      	bne.n	800e95c <_kill_r+0x1c>
 800e956:	682b      	ldr	r3, [r5, #0]
 800e958:	b103      	cbz	r3, 800e95c <_kill_r+0x1c>
 800e95a:	6023      	str	r3, [r4, #0]
 800e95c:	bd38      	pop	{r3, r4, r5, pc}
 800e95e:	bf00      	nop
 800e960:	200021c4 	.word	0x200021c4

0800e964 <_getpid_r>:
 800e964:	f7f3 b896 	b.w	8001a94 <_getpid>

0800e968 <__swhatbuf_r>:
 800e968:	b570      	push	{r4, r5, r6, lr}
 800e96a:	460c      	mov	r4, r1
 800e96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e970:	2900      	cmp	r1, #0
 800e972:	b096      	sub	sp, #88	; 0x58
 800e974:	4615      	mov	r5, r2
 800e976:	461e      	mov	r6, r3
 800e978:	da0d      	bge.n	800e996 <__swhatbuf_r+0x2e>
 800e97a:	89a3      	ldrh	r3, [r4, #12]
 800e97c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e980:	f04f 0100 	mov.w	r1, #0
 800e984:	bf0c      	ite	eq
 800e986:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e98a:	2340      	movne	r3, #64	; 0x40
 800e98c:	2000      	movs	r0, #0
 800e98e:	6031      	str	r1, [r6, #0]
 800e990:	602b      	str	r3, [r5, #0]
 800e992:	b016      	add	sp, #88	; 0x58
 800e994:	bd70      	pop	{r4, r5, r6, pc}
 800e996:	466a      	mov	r2, sp
 800e998:	f000 f848 	bl	800ea2c <_fstat_r>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	dbec      	blt.n	800e97a <__swhatbuf_r+0x12>
 800e9a0:	9901      	ldr	r1, [sp, #4]
 800e9a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e9a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e9aa:	4259      	negs	r1, r3
 800e9ac:	4159      	adcs	r1, r3
 800e9ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9b2:	e7eb      	b.n	800e98c <__swhatbuf_r+0x24>

0800e9b4 <__smakebuf_r>:
 800e9b4:	898b      	ldrh	r3, [r1, #12]
 800e9b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9b8:	079d      	lsls	r5, r3, #30
 800e9ba:	4606      	mov	r6, r0
 800e9bc:	460c      	mov	r4, r1
 800e9be:	d507      	bpl.n	800e9d0 <__smakebuf_r+0x1c>
 800e9c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e9c4:	6023      	str	r3, [r4, #0]
 800e9c6:	6123      	str	r3, [r4, #16]
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	6163      	str	r3, [r4, #20]
 800e9cc:	b002      	add	sp, #8
 800e9ce:	bd70      	pop	{r4, r5, r6, pc}
 800e9d0:	ab01      	add	r3, sp, #4
 800e9d2:	466a      	mov	r2, sp
 800e9d4:	f7ff ffc8 	bl	800e968 <__swhatbuf_r>
 800e9d8:	9900      	ldr	r1, [sp, #0]
 800e9da:	4605      	mov	r5, r0
 800e9dc:	4630      	mov	r0, r6
 800e9de:	f7fd fb81 	bl	800c0e4 <_malloc_r>
 800e9e2:	b948      	cbnz	r0, 800e9f8 <__smakebuf_r+0x44>
 800e9e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9e8:	059a      	lsls	r2, r3, #22
 800e9ea:	d4ef      	bmi.n	800e9cc <__smakebuf_r+0x18>
 800e9ec:	f023 0303 	bic.w	r3, r3, #3
 800e9f0:	f043 0302 	orr.w	r3, r3, #2
 800e9f4:	81a3      	strh	r3, [r4, #12]
 800e9f6:	e7e3      	b.n	800e9c0 <__smakebuf_r+0xc>
 800e9f8:	89a3      	ldrh	r3, [r4, #12]
 800e9fa:	6020      	str	r0, [r4, #0]
 800e9fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea00:	81a3      	strh	r3, [r4, #12]
 800ea02:	9b00      	ldr	r3, [sp, #0]
 800ea04:	6163      	str	r3, [r4, #20]
 800ea06:	9b01      	ldr	r3, [sp, #4]
 800ea08:	6120      	str	r0, [r4, #16]
 800ea0a:	b15b      	cbz	r3, 800ea24 <__smakebuf_r+0x70>
 800ea0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea10:	4630      	mov	r0, r6
 800ea12:	f000 f81d 	bl	800ea50 <_isatty_r>
 800ea16:	b128      	cbz	r0, 800ea24 <__smakebuf_r+0x70>
 800ea18:	89a3      	ldrh	r3, [r4, #12]
 800ea1a:	f023 0303 	bic.w	r3, r3, #3
 800ea1e:	f043 0301 	orr.w	r3, r3, #1
 800ea22:	81a3      	strh	r3, [r4, #12]
 800ea24:	89a3      	ldrh	r3, [r4, #12]
 800ea26:	431d      	orrs	r5, r3
 800ea28:	81a5      	strh	r5, [r4, #12]
 800ea2a:	e7cf      	b.n	800e9cc <__smakebuf_r+0x18>

0800ea2c <_fstat_r>:
 800ea2c:	b538      	push	{r3, r4, r5, lr}
 800ea2e:	4d07      	ldr	r5, [pc, #28]	; (800ea4c <_fstat_r+0x20>)
 800ea30:	2300      	movs	r3, #0
 800ea32:	4604      	mov	r4, r0
 800ea34:	4608      	mov	r0, r1
 800ea36:	4611      	mov	r1, r2
 800ea38:	602b      	str	r3, [r5, #0]
 800ea3a:	f7f3 f892 	bl	8001b62 <_fstat>
 800ea3e:	1c43      	adds	r3, r0, #1
 800ea40:	d102      	bne.n	800ea48 <_fstat_r+0x1c>
 800ea42:	682b      	ldr	r3, [r5, #0]
 800ea44:	b103      	cbz	r3, 800ea48 <_fstat_r+0x1c>
 800ea46:	6023      	str	r3, [r4, #0]
 800ea48:	bd38      	pop	{r3, r4, r5, pc}
 800ea4a:	bf00      	nop
 800ea4c:	200021c4 	.word	0x200021c4

0800ea50 <_isatty_r>:
 800ea50:	b538      	push	{r3, r4, r5, lr}
 800ea52:	4d06      	ldr	r5, [pc, #24]	; (800ea6c <_isatty_r+0x1c>)
 800ea54:	2300      	movs	r3, #0
 800ea56:	4604      	mov	r4, r0
 800ea58:	4608      	mov	r0, r1
 800ea5a:	602b      	str	r3, [r5, #0]
 800ea5c:	f7f3 f891 	bl	8001b82 <_isatty>
 800ea60:	1c43      	adds	r3, r0, #1
 800ea62:	d102      	bne.n	800ea6a <_isatty_r+0x1a>
 800ea64:	682b      	ldr	r3, [r5, #0]
 800ea66:	b103      	cbz	r3, 800ea6a <_isatty_r+0x1a>
 800ea68:	6023      	str	r3, [r4, #0]
 800ea6a:	bd38      	pop	{r3, r4, r5, pc}
 800ea6c:	200021c4 	.word	0x200021c4

0800ea70 <_init>:
 800ea70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea72:	bf00      	nop
 800ea74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea76:	bc08      	pop	{r3}
 800ea78:	469e      	mov	lr, r3
 800ea7a:	4770      	bx	lr

0800ea7c <_fini>:
 800ea7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7e:	bf00      	nop
 800ea80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea82:	bc08      	pop	{r3}
 800ea84:	469e      	mov	lr, r3
 800ea86:	4770      	bx	lr
